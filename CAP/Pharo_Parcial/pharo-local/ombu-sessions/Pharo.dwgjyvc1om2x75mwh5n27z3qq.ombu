OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:02.472073+01:00' ],		#prior : OmReference [ 'Pharo.f0szdbm6wbnd8zof9pges9df3', '49' ],		#self : OmReference [ '1' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'DeutschByte-jjddpp.6'		]	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ],		#time : DateAndTime [ '2024-01-14T12:46:02.552842+01:00' ],		#trigger : @3	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Association',				#traitCompositionSource : '{}',				#definitionSource : 'Association subclass: #Binding\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #Binding,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Binding class\r\tinstanceVariableNames: \'\''				},				#name : #'Binding class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Binding,					#isMetaSide : false				},				#parent : @7,				#content : 'A Binding is .\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'A Binding is .\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ],		#time : DateAndTime [ '2024-01-14T12:46:02.553952+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpCategoryAddition {		#classCategoryName : #DeutschByte,		#affectedPackageName : #DeutschByte	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ],		#time : DateAndTime [ '2024-01-14T12:46:02.618251+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Association',				#traitCompositionSource : '{}',				#definitionSource : 'Association subclass: #Binding\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'DeutschByte\''			},			#name : #Binding,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Binding class\r\tinstanceVariableNames: \'\''				},				#name : #'Binding class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Binding,					#isMetaSide : false				},				#parent : @8,				#content : 'A Binding is .\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #DeutschByte,			#package : #DeutschByte,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ],		#time : DateAndTime [ '2024-01-14T12:46:02.643225+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #BlockWithExit\r\tinstanceVariableNames: \'block exitBlock\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #BlockWithExit,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #BlockWithExit,						#isMetaSide : false					},					#name : #block,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #BlockWithExit,						#isMetaSide : false					},					#name : #exitBlock,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BlockWithExit class\r\tinstanceVariableNames: \'\''				},				#name : #'BlockWithExit class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BlockWithExit,					#isMetaSide : false				},				#parent : @8,				#content : 'A BlockWithExit is .\r\rInstance Variables\r\tblock:\t\t<Object>\r\texitBlock:\t\t<Object>\r\rblock\r\t- xxxxx\r\rexitBlock\r\t- xxxxx\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'A BlockWithExit is .\r\rInstance Variables\r\tblock:\t\t<Object>\r\texitBlock:\t\t<Object>\r\rblock\r\t- xxxxx\r\rexitBlock\r\t- xxxxx\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ],		#time : DateAndTime [ '2024-01-14T12:46:02.645029+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #BlockWithExit\r\tinstanceVariableNames: \'block exitBlock\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'DeutschByte\''			},			#name : #BlockWithExit,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #BlockWithExit,						#isMetaSide : false					},					#name : #block,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #BlockWithExit,						#isMetaSide : false					},					#name : #exitBlock,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BlockWithExit class\r\tinstanceVariableNames: \'\''				},				#name : #'BlockWithExit class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BlockWithExit,					#isMetaSide : false				},				#parent : @8,				#content : 'A BlockWithExit is .\r\rInstance Variables\r\tblock:\t\t<Object>\r\texitBlock:\t\t<Object>\r\rblock\r\t- xxxxx\r\rexitBlock\r\t- xxxxx\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #DeutschByte,			#package : #DeutschByte,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ],		#time : DateAndTime [ '2024-01-14T12:46:02.722833+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BlockClosure,				#isMetaSide : false			},			#name : #withExit,			#protocol : #'*DeutschByte',			#sourceCode : 'withExit\r\t^ BlockWithExit with: self',			#stamp : 'jjddpp 10/7/2012 22:22',			#package : #DeutschByte		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ],		#time : DateAndTime [ '2024-01-14T12:46:02.724697+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Symbol,				#isMetaSide : false			},			#name : #'bindTo:in:',			#protocol : #'*DeutschByte',			#sourceCode : 'bindTo: value in: aBlock \r\t^ Binding of: self to: value in: aBlock \r\t',			#stamp : 'jjddpp 10/7/2012 22:16',			#package : #DeutschByte		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ],		#time : DateAndTime [ '2024-01-14T12:46:02.726575+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Symbol,				#isMetaSide : false			},			#name : #binding,			#protocol : #'*DeutschByte',			#sourceCode : 'binding\r\t| context |\r\tcontext := thisContext.\r\t[ context = nil ] whileFalse:\r\t\t[   ((context receiver isMemberOf: Binding)\r\t\t\t\tand: [ context selector = #of:to:in:\r\t\t\t\t\tand: [context receiver key = self]])\r\t\t\t\tifTrue: [^ context receiver value]\r\t\t\t\tifFalse: [context := context sender]\r\t\t].\r\tself error: \'No binding for \', self asString.',			#stamp : 'jjddpp 10/7/2012 22:16',			#package : #DeutschByte		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ],		#time : DateAndTime [ '2024-01-14T12:46:02.727651+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Binding class',				#isMetaSide : true			},			#name : #exampleSuccessful,			#protocol : #testing,			#sourceCode : 'exampleSuccessful\r\t"Binding exampleSuccessful"\r\r\t#testingDynamicBinding bindTo: \'This is a test\' in: \r\t\t[ Transcript show: (#testingDynamicBinding binding) asString; cr. ] .',			#stamp : 'jjddpp 10/7/2012 22:36',			#package : #DeutschByte		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ],		#time : DateAndTime [ '2024-01-14T12:46:02.728761+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Binding class',				#isMetaSide : true			},			#name : #exampleUnsuccessful,			#protocol : #testing,			#sourceCode : 'exampleUnsuccessful\r\t"Binding exampleUnsuccessful"\r\r\t#testingDynamicBinding bindTo: \'This is a test\' in: \r\t[ Transcript show: (#testingDynamikBinding binding) asString; cr. ] .',			#stamp : 'jjddpp 10/7/2012 22:36',			#package : #DeutschByte		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ],		#time : DateAndTime [ '2024-01-14T12:46:02.729582+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Binding class',				#isMetaSide : true			},			#name : #'of:to:in:',			#protocol : #'instance creation',			#sourceCode : 'of: aSymbol to: aValue in: aBlock\r\t^ self new of: aSymbol to: aValue in: aBlock ',			#stamp : 'jjddpp 10/7/2012 22:13',			#package : #DeutschByte		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ],		#time : DateAndTime [ '2024-01-14T12:46:02.730404+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binding,				#isMetaSide : false			},			#name : #'of:to:in:',			#protocol : #initialize-release,			#sourceCode : 'of: aSymbol to: aValue in: aBlock\r\tkey := aSymbol.\r\tvalue := aValue.\r\t^ aBlock value',			#stamp : 'jjddpp 10/7/2012 22:13',			#package : #DeutschByte		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ],		#time : DateAndTime [ '2024-01-14T12:46:02.731289+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'BlockWithExit class',				#isMetaSide : true			},			#name : #example,			#protocol : #testing,			#sourceCode : 'example\r\t"BlockWithExit example"\r\r\t| theLoop coll |\r\tcoll := OrderedCollection new.\r\t1000 timesRepeat: [ coll add: 1000 atRandom ].\r\ttheLoop := [coll do: [:each | each traceCr.\r\t\t\t\t\t\t\t  \t\t\t  (each < 100) ifTrue: [theLoop exit]]] withExit.\r\ttheLoop value.\r',			#stamp : 'jjddpp 9/30/2020 18:46',			#package : #DeutschByte		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ],		#time : DateAndTime [ '2024-01-14T12:46:02.732209+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'BlockWithExit class',				#isMetaSide : true			},			#name : #'with:',			#protocol : #'instance creation',			#sourceCode : 'with: aBlock\r\t^ self new with: aBlock ',			#stamp : 'jjddpp 10/7/2012 22:20',			#package : #DeutschByte		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ],		#time : DateAndTime [ '2024-01-14T12:46:02.733054+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BlockWithExit,				#isMetaSide : false			},			#name : #exit,			#protocol : #control,			#sourceCode : 'exit\r\texitBlock value',			#stamp : 'jjddpp 10/7/2012 22:19',			#package : #DeutschByte		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ],		#time : DateAndTime [ '2024-01-14T12:46:02.73388+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BlockWithExit,				#isMetaSide : false			},			#name : #value,			#protocol : #control,			#sourceCode : 'value\r\texitBlock := [^ nil].\r\t^ block value.\r',			#stamp : 'jjddpp 10/7/2012 22:19',			#package : #DeutschByte		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ],		#time : DateAndTime [ '2024-01-14T12:46:02.735136+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BlockWithExit,				#isMetaSide : false			},			#name : #'with:',			#protocol : #initialize-release,			#sourceCode : 'with: aBlock\r\tblock := aBlock ',			#stamp : 'jjddpp 10/7/2012 22:19',			#package : #DeutschByte		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:05.233587+01:00' ],		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'DevilsAndAngels-jjddpp.5'		]	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ],		#time : DateAndTime [ '2024-01-14T12:46:05.316455+01:00' ],		#trigger : @3	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Tardis\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #Tardis,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Tardis class\r\tinstanceVariableNames: \'past future\''				},				#name : #'Tardis class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Tardis class',							#isMetaSide : true						},						#name : #past,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Tardis class',							#isMetaSide : true						},						#name : #future,						#parent : @12					}				],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Tardis,					#isMetaSide : false				},				#parent : @7,				#content : 'A HeavenHell is .\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'A HeavenHell is .\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '20' ],		#self : OmReference [ '21' ],		#time : DateAndTime [ '2024-01-14T12:46:05.317602+01:00' ],		#trigger : OmReference [ '19' ]	},	#content : EpCategoryAddition {		#classCategoryName : #DevilsAndAngels,		#affectedPackageName : #DevilsAndAngels	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '21' ],		#self : OmReference [ '22' ],		#time : DateAndTime [ '2024-01-14T12:46:05.387975+01:00' ],		#trigger : OmReference [ '19' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Tardis\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'DevilsAndAngels\''			},			#name : #Tardis,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Tardis class\r\tinstanceVariableNames: \'past future\''				},				#name : #'Tardis class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Tardis class',							#isMetaSide : true						},						#name : #past,						#parent : @13					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Tardis class',							#isMetaSide : true						},						#name : #future,						#parent : @13					}				],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Tardis,					#isMetaSide : false				},				#parent : @8,				#content : 'A HeavenHell is .\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #DevilsAndAngels,			#package : #DevilsAndAngels,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '22' ],		#self : OmReference [ '23' ],		#time : DateAndTime [ '2024-01-14T12:46:05.404811+01:00' ],		#trigger : OmReference [ '19' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #TestAlgorithms\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #TestAlgorithms,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TestAlgorithms class\r\tinstanceVariableNames: \'aux\''				},				#name : #'TestAlgorithms class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'TestAlgorithms class',							#isMetaSide : true						},						#name : #aux,						#parent : @13					}				],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TestAlgorithms,					#isMetaSide : false				},				#parent : @8,				#content : 'A TestAlgorithms is .\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'A TestAlgorithms is .\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '23' ],		#self : OmReference [ '24' ],		#time : DateAndTime [ '2024-01-14T12:46:05.40663+01:00' ],		#trigger : OmReference [ '19' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #TestAlgorithms\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'DevilsAndAngels\''			},			#name : #TestAlgorithms,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TestAlgorithms class\r\tinstanceVariableNames: \'aux\''				},				#name : #'TestAlgorithms class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'TestAlgorithms class',							#isMetaSide : true						},						#name : #aux,						#parent : @13					}				],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TestAlgorithms,					#isMetaSide : false				},				#parent : @8,				#content : 'A TestAlgorithms is .\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #DevilsAndAngels,			#package : #DevilsAndAngels,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '24' ],		#self : OmReference [ '25' ],		#time : DateAndTime [ '2024-01-14T12:46:05.411043+01:00' ],		#trigger : OmReference [ '19' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Stack',				#traitCompositionSource : '{}',				#definitionSource : 'Stack subclass: #TimeLordsStack\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #TimeLordsStack,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TimeLordsStack class\r\tinstanceVariableNames: \'\''				},				#name : #'TimeLordsStack class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TimeLordsStack,					#isMetaSide : false				},				#parent : @8,				#content : 'A HeavenlyStack is .\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'A HeavenlyStack is .\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '25' ],		#self : OmReference [ '26' ],		#time : DateAndTime [ '2024-01-14T12:46:05.413966+01:00' ],		#trigger : OmReference [ '19' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Stack',				#traitCompositionSource : '{}',				#definitionSource : 'Stack subclass: #TimeLordsStack\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'DevilsAndAngels\''			},			#name : #TimeLordsStack,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TimeLordsStack class\r\tinstanceVariableNames: \'\''				},				#name : #'TimeLordsStack class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TimeLordsStack,					#isMetaSide : false				},				#parent : @8,				#content : 'A HeavenlyStack is .\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #DevilsAndAngels,			#package : #DevilsAndAngels,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '26' ],		#self : OmReference [ '27' ],		#time : DateAndTime [ '2024-01-14T12:46:05.449812+01:00' ],		#trigger : OmReference [ '19' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Tardis class',				#isMetaSide : true			},			#name : #'angelPloraner:',			#protocol : #control-handling,			#sourceCode : 'angelPloraner: anObject \r\r\t^ Continuation callcc: [ :k | \t\r\t\t     self future push: k. \r\t\t     (self past pop) value: anObject  ]. ',			#stamp : 'jjddpp 11/23/2014 16:50',			#package : #DevilsAndAngels		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '27' ],		#self : OmReference [ '28' ],		#time : DateAndTime [ '2024-01-14T12:46:05.451497+01:00' ],		#trigger : OmReference [ '19' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Tardis class',				#isMetaSide : true			},			#name : #'doctor:',			#protocol : #control-handling,			#sourceCode : 'doctor: anObject \r\r\t^ (self future pop) value: anObject ',			#stamp : 'jjddpp 11/23/2014 16:49',			#package : #DevilsAndAngels		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '28' ],		#self : OmReference [ '29' ],		#time : DateAndTime [ '2024-01-14T12:46:05.45296+01:00' ],		#trigger : OmReference [ '19' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Tardis class',				#isMetaSide : true			},			#name : #'fita:',			#protocol : #control-handling,			#sourceCode : 'fita: anObject \t\r\r\t^ Continuation callcc: [ :k | self past push: k.  ^ anObject  ]. \r',			#stamp : 'jjddpp 11/23/2014 16:49',			#package : #DevilsAndAngels		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '29' ],		#self : OmReference [ '30' ],		#time : DateAndTime [ '2024-01-14T12:46:05.453995+01:00' ],		#trigger : OmReference [ '19' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Tardis class',				#isMetaSide : true			},			#name : #future,			#protocol : #accessing,			#sourceCode : 'future\r\t^ future',			#stamp : 'jjddpp 11/20/2014 16:55',			#package : #DevilsAndAngels		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '30' ],		#self : OmReference [ '31' ],		#time : DateAndTime [ '2024-01-14T12:46:05.45486+01:00' ],		#trigger : OmReference [ '19' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Tardis class',				#isMetaSide : true			},			#name : #'future:',			#protocol : #accessing,			#sourceCode : 'future: anObject\r\tfuture := anObject.',			#stamp : 'jjddpp 11/20/2014 17:19',			#package : #DevilsAndAngels		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '31' ],		#self : OmReference [ '32' ],		#time : DateAndTime [ '2024-01-14T12:46:05.455736+01:00' ],		#trigger : OmReference [ '19' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Tardis class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #'initialize - release',			#sourceCode : 'initialize\r\tsuper initialize.\r\tself reset.\r\t',			#stamp : 'jjddpp 11/20/2014 16:54',			#package : #DevilsAndAngels		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '32' ],		#self : OmReference [ '33' ],		#time : DateAndTime [ '2024-01-14T12:46:05.456569+01:00' ],		#trigger : OmReference [ '19' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Tardis class',				#isMetaSide : true			},			#name : #past,			#protocol : #accessing,			#sourceCode : 'past \r\t^ past',			#stamp : 'jjddpp 11/20/2014 16:55',			#package : #DevilsAndAngels		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '33' ],		#self : OmReference [ '34' ],		#time : DateAndTime [ '2024-01-14T12:46:05.457395+01:00' ],		#trigger : OmReference [ '19' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Tardis class',				#isMetaSide : true			},			#name : #'past:',			#protocol : #accessing,			#sourceCode : 'past: anObject\r\tpast := anObject.',			#stamp : 'jjddpp 11/20/2014 17:18',			#package : #DevilsAndAngels		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '34' ],		#self : OmReference [ '35' ],		#time : DateAndTime [ '2024-01-14T12:46:05.458235+01:00' ],		#trigger : OmReference [ '19' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Tardis class',				#isMetaSide : true			},			#name : #reset,			#protocol : #'initialize - release',			#sourceCode : 'reset\r\tself past: TimeLordsStack new.\r\tself future: TimeLordsStack new.',			#stamp : 'jjddpp 11/23/2014 16:48',			#package : #DevilsAndAngels		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '35' ],		#self : OmReference [ '36' ],		#time : DateAndTime [ '2024-01-14T12:46:05.459218+01:00' ],		#trigger : OmReference [ '19' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TestAlgorithms class',				#isMetaSide : true			},			#name : #TardisExample,			#protocol : #Algorithms,			#sourceCode : 'TardisExample\r\tTardis initialize.\r\t(self auxWith: $a and: ( (self auxWith: $b and:  (Tardis fita: 3)) = 4 ) )\r\t\tifTrue: [  \tTranscript show: \'aqui!\'; cr.\r\t\t\t\t\tself auxWith: $c and: (Tardis doctor: \'tot va be\') .  ]\r\t\tifFalse: [ \r\t\t\t(self auxWith: $d and: ( (self auxWith: $e and:  (Tardis fita: 4)) = 5 ) )\r\t\t\t\tifTrue: [ self auxWith: $f and: (Tardis doctor: (self auxWith: $g and:  (Tardis angelPloraner: 4))) ]\r\t\t\t\tifFalse: [ Transcript show: \'hem arribat fins aqui!\'; cr. \r\t\t\t\t\t\t  self auxWith: $h and: (Tardis angelPloraner: 5).\t] ]',			#stamp : 'jjddpp 11/23/2014 16:51',			#package : #DevilsAndAngels		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '36' ],		#self : OmReference [ '37' ],		#time : DateAndTime [ '2024-01-14T12:46:05.461818+01:00' ],		#trigger : OmReference [ '19' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TestAlgorithms class',				#isMetaSide : true			},			#name : #'auxParenthesis:and:and:',			#protocol : #private,			#sourceCode : 'auxParenthesis: n and: p and: con \r\t|  tmpStack |\r\ttmpStack := con deepCopy.\r\tn = 0 ifTrue: [ con isEmpty ifTrue: [ 1 to: p - 1 do: [ : i | Transcript show: (aux at: i) asString  ]. \r\t\t\t\t\t\t\t\t\t\tTranscript cr.  ]\r\t\t\t\t\t\t\tifFalse: [ \t| nn |\r\t\t\t\t\t\t\t\t\t\taux at: p put: \')\'.\r\t\t\t\t\t\t\t\t\t\tnn := tmpStack pop.\r\t\t\t\t\t\t\t\t\t\tself auxParenthesis: nn and: (p + 1)  and: tmpStack.  ]  ]\r\t\tifFalse: [ \taux at: p put: \'(\'.\r\t\t\t\t\t 0 to: n - 1 do: [ : i |\r\t\t\t\t\t\t\t\t\ttmpStack push: (n - i - 1).\r\t\t\t\t\t\t\t\t\tself auxParenthesis: i and: p + 1 and: tmpStack.\r\t\t\t\t\t\t\t\t\ttmpStack pop.  ] ] \r\t\t\t\t\t\t\t',			#stamp : 'jjddpp 11/20/2014 16:24',			#package : #DevilsAndAngels		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '37' ],		#self : OmReference [ '38' ],		#time : DateAndTime [ '2024-01-14T12:46:05.462736+01:00' ],		#trigger : OmReference [ '19' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TestAlgorithms class',				#isMetaSide : true			},			#name : #'auxWith:and:',			#protocol : #private,			#sourceCode : 'auxWith: anObject and: anotherObject\r\tTranscript show: \'==> \', anObject asString , \' : \', anotherObject asString; cr.\r\t^ anotherObject\r\t',			#stamp : 'jjddpp 11/23/2014 16:43',			#package : #DevilsAndAngels		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '38' ],		#self : OmReference [ '39' ],		#time : DateAndTime [ '2024-01-14T12:46:05.463579+01:00' ],		#trigger : OmReference [ '19' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TestAlgorithms class',				#isMetaSide : true			},			#name : #'parenthesis:and:and:',			#protocol : #Algorithms,			#sourceCode : 'parenthesis: n and: p and: con \r\taux := Array new: (n * 2).\r\tself auxParenthesis: n and: p and: con.\r\t',			#stamp : 'jjddpp 11/20/2014 16:07',			#package : #DevilsAndAngels		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '39' ],		#self : OmReference [ '40' ],		#time : DateAndTime [ '2024-01-14T12:46:05.464567+01:00' ],		#trigger : OmReference [ '19' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TimeLordsStack,				#isMetaSide : false			},			#name : #pop,			#protocol : #removing,			#sourceCode : 'pop\r\t"Returns the first element and remove it from the stack.\r\tThere will always be an identity function in the bottom of the stack"\r\r\tself isEmpty ifTrue: [ ^ [ :x | x ] ].\r\t^self removeFirst\r\t',			#stamp : 'jjddpp 10/28/2014 17:10',			#package : #DevilsAndAngels		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:08.128727+01:00' ],		#prior : OmReference [ '40' ],		#self : OmReference [ '41' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'ProblemesCAP2023-jjddpp.2'		]	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '41' ],		#self : OmReference [ '42' ],		#time : DateAndTime [ '2024-01-14T12:46:08.227359+01:00' ],		#trigger : @3	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #CuaAmbPrioritat\r\tinstanceVariableNames: \'vector\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #CuaAmbPrioritat,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CuaAmbPrioritat,						#isMetaSide : false					},					#name : #vector,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CuaAmbPrioritat class\r\tinstanceVariableNames: \'\''				},				#name : #'CuaAmbPrioritat class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CuaAmbPrioritat,					#isMetaSide : false				},				#parent : @7,				#content : 'A CuaAmbPrioritat is xxx\r\rInstance Variables\r\tvector:\t\t<Object>\r\rvector\r\t- xxxxx\r',				#stamp : 'jjddpp 9/30/2016 14:38'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'A CuaAmbPrioritat is xxx\r\rInstance Variables\r\tvector:\t\t<Object>\r\rvector\r\t- xxxxx\r',		#newStamp : 'jjddpp 9/30/2016 14:38'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '42' ],		#self : OmReference [ '43' ],		#time : DateAndTime [ '2024-01-14T12:46:08.228463+01:00' ],		#trigger : OmReference [ '41' ]	},	#content : EpCategoryAddition {		#classCategoryName : #ProblemesCAP2023,		#affectedPackageName : #ProblemesCAP2023	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '43' ],		#self : OmReference [ '44' ],		#time : DateAndTime [ '2024-01-14T12:46:08.304701+01:00' ],		#trigger : OmReference [ '41' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #CuaAmbPrioritat\r\tinstanceVariableNames: \'vector\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'ProblemesCAP2023\''			},			#name : #CuaAmbPrioritat,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CuaAmbPrioritat,						#isMetaSide : false					},					#name : #vector,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CuaAmbPrioritat class\r\tinstanceVariableNames: \'\''				},				#name : #'CuaAmbPrioritat class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CuaAmbPrioritat,					#isMetaSide : false				},				#parent : @8,				#content : 'A CuaAmbPrioritat is xxx\r\rInstance Variables\r\tvector:\t\t<Object>\r\rvector\r\t- xxxxx\r',				#stamp : 'jjddpp 9/30/2016 14:38'			},			#classVariables : OrderedCollection [ ],			#category : #ProblemesCAP2023,			#package : #ProblemesCAP2023,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '44' ],		#self : OmReference [ '45' ],		#time : DateAndTime [ '2024-01-14T12:46:08.32324+01:00' ],		#trigger : OmReference [ '41' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Pila\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #Pila,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Pila class\r\tinstanceVariableNames: \'\''				},				#name : #'Pila class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Pila,					#isMetaSide : false				},				#parent : @8,				#content : 'Please c',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Please c',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '45' ],		#self : OmReference [ '46' ],		#time : DateAndTime [ '2024-01-14T12:46:08.32529+01:00' ],		#trigger : OmReference [ '41' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Pila\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'ProblemesCAP2023\''			},			#name : #Pila,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Pila class\r\tinstanceVariableNames: \'\''				},				#name : #'Pila class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Pila,					#isMetaSide : false				},				#parent : @8,				#content : 'Please c',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #ProblemesCAP2023,			#package : #ProblemesCAP2023,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '46' ],		#self : OmReference [ '47' ],		#time : DateAndTime [ '2024-01-14T12:46:08.331852+01:00' ],		#trigger : OmReference [ '41' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Sequencia\r\tinstanceVariableNames: \'seq\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #Sequencia,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Sequencia,						#isMetaSide : false					},					#name : #seq,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Sequencia class\r\tinstanceVariableNames: \'\''				},				#name : #'Sequencia class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Sequencia,					#isMetaSide : false				},				#parent : @8,				#content : 'Please ',				#stamp : 'jjddpp 10/3/2019 09:29'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Please ',		#newStamp : 'jjddpp 10/3/2019 09:29'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '47' ],		#self : OmReference [ '48' ],		#time : DateAndTime [ '2024-01-14T12:46:08.33371+01:00' ],		#trigger : OmReference [ '41' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Sequencia\r\tinstanceVariableNames: \'seq\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'ProblemesCAP2023\''			},			#name : #Sequencia,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Sequencia,						#isMetaSide : false					},					#name : #seq,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Sequencia class\r\tinstanceVariableNames: \'\''				},				#name : #'Sequencia class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Sequencia,					#isMetaSide : false				},				#parent : @8,				#content : 'Please ',				#stamp : 'jjddpp 10/3/2019 09:29'			},			#classVariables : OrderedCollection [ ],			#category : #ProblemesCAP2023,			#package : #ProblemesCAP2023,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '48' ],		#self : OmReference [ '49' ],		#time : DateAndTime [ '2024-01-14T12:46:08.376211+01:00' ],		#trigger : OmReference [ '41' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #String,				#isMetaSide : false			},			#name : #checkContents,			#protocol : #'*ProblemesCAP2023',			#sourceCode : 'checkContents\r\t| allowed |\r\tallowed := #($A $T $C $G).\r\tself do: [ :each | (allowed includes: each) ifFalse: [ ^ false] ].\r\t^ true',			#stamp : 'jjddpp 10/3/2019 09:37',			#package : #ProblemesCAP2023		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '49' ],		#self : OmReference [ '50' ],		#time : DateAndTime [ '2024-01-14T12:46:08.37826+01:00' ],		#trigger : OmReference [ '41' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Character,				#isMetaSide : false			},			#name : #'check:',			#protocol : #'*ProblemesCAP2023',			#sourceCode : 'check: aChar\r\t| at cg |\r\tat := (self = $A and: [ aChar = $T ]) or: [ self = $T and: [ aChar = $A ] ].\r\tcg := (self = $C and: [ aChar = $G ]) or: [ self = $G and: [ aChar = $C ] ].\r\t^ at or: [ cg ]\r\t',			#stamp : 'jjddpp 10/3/2019 09:41',			#package : #ProblemesCAP2023		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '50' ],		#self : OmReference [ '51' ],		#time : DateAndTime [ '2024-01-14T12:46:08.379423+01:00' ],		#trigger : OmReference [ '41' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CuaAmbPrioritat,				#isMetaSide : false			},			#name : #'afegir:',			#protocol : #'public interface',			#sourceCode : 'afegir: anElement\r\r\tvector addLast: anElement.\r\tself surar: (self mida)',			#stamp : 'jjddpp 9/19/2018 17:43',			#package : #ProblemesCAP2023		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '51' ],		#self : OmReference [ '52' ],		#time : DateAndTime [ '2024-01-14T12:46:08.380802+01:00' ],		#trigger : OmReference [ '41' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CuaAmbPrioritat,				#isMetaSide : false			},			#name : #'afegirTots:',			#protocol : #'public interface',			#sourceCode : 'afegirTots: aCollection\r\t"Suposarem que aCollection té elements del tipus adeqüat"\r\taCollection do: [ :each | self afegir: each ]\r\t',			#stamp : 'jjddpp 9/19/2019 11:21',			#package : #ProblemesCAP2023		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '52' ],		#self : OmReference [ '53' ],		#time : DateAndTime [ '2024-01-14T12:46:08.381747+01:00' ],		#trigger : OmReference [ '41' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CuaAmbPrioritat,				#isMetaSide : false			},			#name : #buida,			#protocol : #'public interface',			#sourceCode : 'buida\r\t^ self mida = 0',			#stamp : 'jjddpp 9/19/2018 17:44',			#package : #ProblemesCAP2023		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '53' ],		#self : OmReference [ '54' ],		#time : DateAndTime [ '2024-01-14T12:46:08.382689+01:00' ],		#trigger : OmReference [ '41' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CuaAmbPrioritat,				#isMetaSide : false			},			#name : #'enfonsar:',			#protocol : #private,			#sourceCode : 'enfonsar: aNumber\r\t| n c |\r\tn := self mida.\r\tc := aNumber * 2.\r\t(c <= n) ifTrue: [ \r\t\t\t\t((c + 1 <= n) and: [ (vector at: (c+1)) < (vector at: c) ]) ifTrue: [ c := c + 1 ].\r\t\t\t\t(vector at: aNumber) > (vector at: c)  ifTrue: [ \r\t\t\t\t\t\t\tvector swap: aNumber with: c.\r\t\t\t\t\t\t\tself enfonsar: c  ] ]\r',			#stamp : 'jjddpp 9/19/2018 19:34',			#package : #ProblemesCAP2023		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '54' ],		#self : OmReference [ '55' ],		#time : DateAndTime [ '2024-01-14T12:46:08.385433+01:00' ],		#trigger : OmReference [ '41' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CuaAmbPrioritat,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\t\r\tvector := OrderedCollection new.',			#stamp : 'jjddpp 9/19/2019 11:13',			#package : #ProblemesCAP2023		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '55' ],		#self : OmReference [ '56' ],		#time : DateAndTime [ '2024-01-14T12:46:08.386393+01:00' ],		#trigger : OmReference [ '41' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CuaAmbPrioritat,				#isMetaSide : false			},			#name : #mida,			#protocol : #'public interface',			#sourceCode : 'mida\r\t^ vector size',			#stamp : 'jjddpp 9/30/2016 15:05',			#package : #ProblemesCAP2023		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '56' ],		#self : OmReference [ '57' ],		#time : DateAndTime [ '2024-01-14T12:46:08.387207+01:00' ],		#trigger : OmReference [ '41' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CuaAmbPrioritat,				#isMetaSide : false			},			#name : #minim,			#protocol : #'public interface',			#sourceCode : 'minim\r\t^ vector at: 1.',			#stamp : 'jjddpp 9/30/2016 14:45',			#package : #ProblemesCAP2023		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '57' ],		#self : OmReference [ '58' ],		#time : DateAndTime [ '2024-01-14T12:46:08.388096+01:00' ],		#trigger : OmReference [ '41' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CuaAmbPrioritat,				#isMetaSide : false			},			#name : #'surar:',			#protocol : #private,			#sourceCode : 'surar: aNumber\r\t(aNumber ~= 1 and: [(vector at: (aNumber // 2)) > (vector at: aNumber) ])\r\t\tifTrue: [  vector swap: aNumber with: (aNumber // 2).\r\t\t\t\t\tself surar: (aNumber // 2)\t]',			#stamp : 'jjddpp 9/19/2018 19:35',			#package : #ProblemesCAP2023		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '58' ],		#self : OmReference [ '59' ],		#time : DateAndTime [ '2024-01-14T12:46:08.388959+01:00' ],		#trigger : OmReference [ '41' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CuaAmbPrioritat,				#isMetaSide : false			},			#name : #treureMin,			#protocol : #'public interface',			#sourceCode : 'treureMin\r\t| x s |\r\ts := self mida.\r\tx := vector at: 1.\r\tvector at: 1 put: (vector at: s).\r\tvector removeLast.\r\tself enfonsar: 1.\r\t^ x ',			#stamp : 'jjddpp 9/19/2018 17:45',			#package : #ProblemesCAP2023		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '59' ],		#self : OmReference [ '60' ],		#time : DateAndTime [ '2024-01-14T12:46:08.389961+01:00' ],		#trigger : OmReference [ '41' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Pila class',				#isMetaSide : true			},			#name : #creaPila,			#protocol : #'as yet unclassified',			#sourceCode : 'creaPila\r\t| pila index |\r\tpila := OrderedCollection new.\r\tindex := 0.\r\t^ { \r\t[ pila := OrderedCollection new. index := 0. ] .\r\t[ index > 0 ifTrue: [ index := index - 1. pila removeLast ] \r\t\t\t\t\tifFalse: [ Object error: \'Pila Buida\' ] ] .\r\t[ index > 0 ifTrue: [ pila last ]  ifFalse: [ Object error: \'Pila Buida\' ] ] .\r\t[ :elem | index := index + 1. pila add: elem. ] .\r\t[ index ] .\r\t[ index = 0 ] .\r\t }',			#stamp : 'jjddpp 11/11/2022 14:56',			#package : #ProblemesCAP2023		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '60' ],		#self : OmReference [ '61' ],		#time : DateAndTime [ '2024-01-14T12:46:08.39095+01:00' ],		#trigger : OmReference [ '41' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Sequencia class',				#isMetaSide : true			},			#name : #'with:',			#protocol : #'instance creation',			#sourceCode : 'with: aString\r\taString asUppercase checkContents ifFalse: [ self error: \'Seqüència mal formada\'  ].\r\t^ self new with: aString asUppercase',			#stamp : 'jjddpp 10/3/2019 09:55',			#package : #ProblemesCAP2023		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '61' ],		#self : OmReference [ '62' ],		#time : DateAndTime [ '2024-01-14T12:46:08.391866+01:00' ],		#trigger : OmReference [ '41' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Sequencia,				#isMetaSide : false			},			#name : #'benFormada:',			#protocol : #'as yet unclassified',			#sourceCode : 'benFormada: aSeq\r\t| mida tmpseq1 tmpseq2 |\r\tmida := (self seq size) min: (aSeq seq size).\r\ttmpseq1 := self seq truncateTo: mida.\r\ttmpseq2 := aSeq seq truncateTo: mida.\r\ttmpseq1 with: tmpseq2 do: [ :c1 :c2 | (c1 check: c2) ifFalse: [ ^false ] ].\r\t^ true ',			#stamp : 'jjddpp 10/3/2019 09:53',			#package : #ProblemesCAP2023		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '62' ],		#self : OmReference [ '63' ],		#time : DateAndTime [ '2024-01-14T12:46:08.39273+01:00' ],		#trigger : OmReference [ '41' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Sequencia,				#isMetaSide : false			},			#name : #seq,			#protocol : #accessing,			#sourceCode : 'seq\r\t^ seq',			#stamp : 'jjddpp 10/3/2019 09:46',			#package : #ProblemesCAP2023		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '63' ],		#self : OmReference [ '64' ],		#time : DateAndTime [ '2024-01-14T12:46:08.395193+01:00' ],		#trigger : OmReference [ '41' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Sequencia,				#isMetaSide : false			},			#name : #'with:',			#protocol : #'instance creation',			#sourceCode : 'with: aString\r\tseq := aString\r\t',			#stamp : 'jjddpp 10/3/2019 10:20',			#package : #ProblemesCAP2023		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.341011+01:00' ],		#prior : OmReference [ '64' ],		#self : OmReference [ '65' ]	},	#content : EpCategoryAddition {		#classCategoryName : #Examples-SnakesAndLadders,		#affectedPackageName : #Examples-SnakesAndLadders	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.407704+01:00' ],		#prior : OmReference [ '65' ],		#self : OmReference [ '66' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #SnakesAndLadders\r\tinstanceVariableNames: \'players squares turn die over\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #SnakesAndLadders,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLadders,						#isMetaSide : false					},					#name : #players,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLadders,						#isMetaSide : false					},					#name : #squares,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLadders,						#isMetaSide : false					},					#name : #turn,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLadders,						#isMetaSide : false					},					#name : #die,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLadders,						#isMetaSide : false					},					#name : #over,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SnakesAndLadders class\r\tinstanceVariableNames: \'\''				},				#name : #'SnakesAndLadders class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SnakesAndLadders,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.411187+01:00' ],		#prior : OmReference [ '66' ],		#self : OmReference [ '67' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #SnakesAndLadders\r\tinstanceVariableNames: \'players squares turn die over\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #SnakesAndLadders,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLadders,						#isMetaSide : false					},					#name : #players,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLadders,						#isMetaSide : false					},					#name : #squares,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLadders,						#isMetaSide : false					},					#name : #turn,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLadders,						#isMetaSide : false					},					#name : #die,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLadders,						#isMetaSide : false					},					#name : #over,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SnakesAndLadders class\r\tinstanceVariableNames: \'\''				},				#name : #'SnakesAndLadders class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SnakesAndLadders,					#isMetaSide : false				},				#parent : @7,				#content : 'SnakesAndLadders example playToEnd\r\rA simple board game in which players roll a die to move from the starting square to the end. A square may contain a snake (moves you back) or a ladder (moves you up). If youland on a square already occupied, you go back to the start. If you move past the end, you reverse direction the remaining number of moves.\r\rSee http://en.wikipedia.org/wiki/Snakes_and_ladders for the rules of the game\r\rSnakesAndLadders has the following responsibilities:\r- enable scripting of an initial configuration of squares and players\r- keep track of the rules of the game\r- keep track whose turn it is to play\r- initiate a move\r- play a game to the end\r- report on moves and intermediate game states\r- stop when the game is over\r\rTypical usage (see the example):\r- Instantiate a new SnakesAndLadders\r- Add squares, snakes and ladders to build the game board \r- Join players\r- Play single moves or PlayToEnd',				#stamp : 'on 3/14/2006 19:05'			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'SnakesAndLadders example playToEnd\r\rA simple board game in which players roll a die to move from the starting square to the end. A square may contain a snake (moves you back) or a ladder (moves you up). If youland on a square already occupied, you go back to the start. If you move past the end, you reverse direction the remaining number of moves.\r\rSee http://en.wikipedia.org/wiki/Snakes_and_ladders for the rules of the game\r\rSnakesAndLadders has the following responsibilities:\r- enable scripting of an initial configuration of squares and players\r- keep track of the rules of the game\r- keep track whose turn it is to play\r- initiate a move\r- play a game to the end\r- report on moves and intermediate game states\r- stop when the game is over\r\rTypical usage (see the example):\r- Instantiate a new SnakesAndLadders\r- Add squares, snakes and ladders to build the game board \r- Join players\r- Play single moves or PlayToEnd',		#newStamp : 'on 3/14/2006 19:05'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.417552+01:00' ],		#prior : OmReference [ '67' ],		#self : OmReference [ '68' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #'add:',			#protocol : #initialize-release,			#sourceCode : 'add: aSquare \r\tsquares add: aSquare.\r\taSquare setPosition: squares size board: self',			#stamp : 'on 3/18/2006 15:13',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.421907+01:00' ],		#prior : OmReference [ '68' ],		#self : OmReference [ '69' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialize-release,			#sourceCode : 'initialize\r\tsuper initialize.\r\tdie := Die new.\r\tsquares := OrderedCollection new.\r\tplayers := OrderedCollection new.\r\tturn := 1.\r\tover := false.',			#stamp : 'on 3/20/2006 10:16',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.428566+01:00' ],		#prior : OmReference [ '69' ],		#self : OmReference [ '70' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #invariant,			#protocol : #initialize-release,			#sourceCode : 'invariant\r\t"Should also check that snakes and ladders lead to ordinary squares, and do not bounce\r\tpast the beginning or end of the board."\r\t^ squares size > 1\r\t\tand: [players size > 1\r\t\tand: [turn >= 1\r\t\tand: [turn <= players size]]]',			#stamp : 'jjddpp 9/4/2012 12:23',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.431467+01:00' ],		#prior : OmReference [ '70' ],		#self : OmReference [ '71' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #'join:',			#protocol : #initialize-release,			#sourceCode : 'join: aPlayer\r\tplayers add: aPlayer.\r\taPlayer moveTo: self firstSquare.\r',			#stamp : 'on 3/18/2006 12:10',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.434788+01:00' ],		#prior : OmReference [ '71' ],		#self : OmReference [ '72' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #reset,			#protocol : #initialize-release,			#sourceCode : 'reset\r\tdie := Die new.\r\tturn := 1.\r\tover := false.\r\tplayers do: [:each | each moveTo: self firstSquare ].\r\tself assert: self invariant.',			#stamp : 'on 3/16/2006 11:30',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.437247+01:00' ],		#prior : OmReference [ '72' ],		#self : OmReference [ '73' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #'at:',			#protocol : #testing,			#sourceCode : 'at: position\r\t^ squares at: position',			#stamp : 'on 3/14/2006 16:30',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.439232+01:00' ],		#prior : OmReference [ '73' ],		#self : OmReference [ '74' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #currentPlayer,			#protocol : #testing,			#sourceCode : 'currentPlayer\r\t^ players at: turn',			#stamp : 'on 3/14/2006 16:54',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.441084+01:00' ],		#prior : OmReference [ '74' ],		#self : OmReference [ '75' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #firstSquare,			#protocol : #testing,			#sourceCode : 'firstSquare\r\t^ squares first',			#stamp : 'on 3/14/2006 16:43',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.442861+01:00' ],		#prior : OmReference [ '75' ],		#self : OmReference [ '76' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #isNotOver,			#protocol : #testing,			#sourceCode : 'isNotOver\r\t^ self isOver not',			#stamp : 'on 3/18/2006 15:04',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.447401+01:00' ],		#prior : OmReference [ '76' ],		#self : OmReference [ '77' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #isOver,			#protocol : #testing,			#sourceCode : 'isOver\r\t^ over',			#stamp : 'on 3/18/2006 15:04',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.449271+01:00' ],		#prior : OmReference [ '77' ],		#self : OmReference [ '78' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #lastPosition,			#protocol : #testing,			#sourceCode : 'lastPosition\r\t^ squares size',			#stamp : 'on 3/14/2006 16:59',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.451062+01:00' ],		#prior : OmReference [ '78' ],		#self : OmReference [ '79' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #turn,			#protocol : #testing,			#sourceCode : 'turn\r\t^ turn',			#stamp : 'on 3/14/2006 16:22',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.453233+01:00' ],		#prior : OmReference [ '79' ],		#self : OmReference [ '80' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #checkResult,			#protocol : #playing,			#sourceCode : 'checkResult\r\t^ self currentPlayer position = self lastPosition\r\t\tifTrue: [\r\t\t\tover := true.\r\t\t\t\' -- \', self currentPlayer asString, \' wins!\'\r\t\t\t]\r\t\tifFalse: [ \'\' ]',			#stamp : 'on 3/14/2006 17:10',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.455661+01:00' ],		#prior : OmReference [ '80' ],		#self : OmReference [ '81' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #playOneMove,			#protocol : #playing,			#sourceCode : 'playOneMove\r\t| result |\r\tself assert: self invariant.\r\t^ self isOver \r\t\tifTrue: [\'The game is over!\']\r\t\tifFalse: \r\t\t\t[result := (self currentPlayer moveWith: die) , self checkResult.\r\t\t\tself upDateTurn.\r\t\t\tresult]',			#stamp : 'on 5/17/2006 16:49',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.458137+01:00' ],		#prior : OmReference [ '81' ],		#self : OmReference [ '82' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #playToEnd,			#protocol : #playing,			#sourceCode : 'playToEnd\r\t"SnakesAndLadders example playToEnd"\r\tTranscript open.\r\tTranscript\r\t\tshow: self asString;\r\t\tcr;\r\t\tcr.\r\t[self isNotOver] whileTrue: \r\t\t\t[Transcript\r\t\t\t\tshow: self playOneMove asString;\r\t\t\t\tcr.\r\t\t\tTranscript\r\t\t\t\tshow: self asString;\r\t\t\t\tcr;\r\t\t\t\tcr]',			#stamp : 'jjddpp 9/9/2012 19:21',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.459986+01:00' ],		#prior : OmReference [ '82' ],		#self : OmReference [ '83' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #upDateTurn,			#protocol : #playing,			#sourceCode : 'upDateTurn\r\tturn := 1 + (turn\\\\players size).',			#stamp : 'on 3/14/2006 16:21',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.462875+01:00' ],		#prior : OmReference [ '83' ],		#self : OmReference [ '84' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #players,			#protocol : #accessors,			#sourceCode : 'players\r\t"needed for testing"\r\t^ players',			#stamp : 'on 3/15/2006 15:01',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.464809+01:00' ],		#prior : OmReference [ '84' ],		#self : OmReference [ '85' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #'setDie:',			#protocol : #accessors,			#sourceCode : 'setDie: aDie\r\t"For testing only. Can play the game with a loaded die."\r\tdie := aDie.',			#stamp : 'on 3/15/2006 13:29',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.46723+01:00' ],		#prior : OmReference [ '85' ],		#self : OmReference [ '86' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\tsquares do: [:each | each printOn: aStream].',			#stamp : 'jjddpp 9/4/2012 11:57',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.474446+01:00' ],		#prior : OmReference [ '86' ],		#self : OmReference [ '87' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'SnakesAndLadders class',				#isMetaSide : true			},			#name : #example,			#protocol : #documentation,			#sourceCode : 'example\r\t"self example playToEnd"\r\r\t^ (self new)\r\t\tadd: FirstSquare new;\r\t\tadd: (LadderSquare forward: 4);\r\t\tadd: BoardSquare new;\r\t\tadd: BoardSquare new;\r\t\tadd: BoardSquare new;\r\t\tadd: BoardSquare new;\r\t\tadd: (LadderSquare forward: 2);\r\t\tadd: BoardSquare new;\r\t\tadd: BoardSquare new;\r\t\tadd: BoardSquare new;\r\t\tadd: (SnakeSquare back: 6);\r\t\tadd: BoardSquare new;\r\t\tjoin: (GamePlayer named: \'Jack\');\r\t\tjoin: (GamePlayer named: \'Jill\');\r\t\tyourself',			#stamp : 'on 10/28/2007 13:51',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.477348+01:00' ],		#prior : OmReference [ '87' ],		#self : OmReference [ '88' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'SnakesAndLadders class',				#isMetaSide : true			},			#name : #example2,			#protocol : #documentation,			#sourceCode : 'example2\r\t"self example2 playToEnd"\r\r\t^ (self new)\r\t\tadd: FirstSquare new;\r\t\tadd: BoardSquare new;\r\t\tadd: (LadderSquare forward: 4);\r\t\tadd: BoardSquare new;\r\t\tadd: BoardSquare new;\r\t\tadd: (SnakeSquare back: 2);\r\t\tadd: BoardSquare new;\r\t\tadd: (LadderSquare forward: 3);\r\t\tadd: BoardSquare new;\r\t\tadd: BoardSquare new;\r\t\tadd: (SnakeSquare back: 4);\r\t\tadd: BoardSquare new;\r\t\tadd: BoardSquare new;\r\t\tjoin: (GamePlayer named: \'Jack\');\r\t\tjoin: (GamePlayer named: \'Jill\');\r\t\tyourself',			#stamp : 'on 10/28/2007 13:51',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.48312+01:00' ],		#prior : OmReference [ '88' ],		#self : OmReference [ '89' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Die\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #Die,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Die class\r\tinstanceVariableNames: \'\''				},				#name : #'Die class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Die,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.485216+01:00' ],		#prior : OmReference [ '89' ],		#self : OmReference [ '90' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Die\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #Die,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Die class\r\tinstanceVariableNames: \'\''				},				#name : #'Die class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Die,					#isMetaSide : false				},				#parent : @7,				#content : 'Responsibilities:\r- Yields a random number from 1 to 6 ;-)',				#stamp : 'on 3/14/2006 19:06'			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Responsibilities:\r- Yields a random number from 1 to 6 ;-)',		#newStamp : 'on 3/14/2006 19:06'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.486696+01:00' ],		#prior : OmReference [ '90' ],		#self : OmReference [ '91' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Die,				#isMetaSide : false			},			#name : #roll,			#protocol : #playing,			#sourceCode : 'roll\r\t^ (1 to: 6) atRandom',			#stamp : 'on 3/14/2006 15:41',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.491544+01:00' ],		#prior : OmReference [ '91' ],		#self : OmReference [ '92' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #GamePlayer\r\tinstanceVariableNames: \'name square\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #GamePlayer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #GamePlayer,						#isMetaSide : false					},					#name : #name,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #GamePlayer,						#isMetaSide : false					},					#name : #square,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'GamePlayer class\r\tinstanceVariableNames: \'\''				},				#name : #'GamePlayer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #GamePlayer,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.493322+01:00' ],		#prior : OmReference [ '92' ],		#self : OmReference [ '93' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #GamePlayer\r\tinstanceVariableNames: \'name square\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #GamePlayer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #GamePlayer,						#isMetaSide : false					},					#name : #name,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #GamePlayer,						#isMetaSide : false					},					#name : #square,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'GamePlayer class\r\tinstanceVariableNames: \'\''				},				#name : #'GamePlayer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #GamePlayer,					#isMetaSide : false				},				#parent : @7,				#content : 'Responsibilities:\r- Keep track of the square you are on\r- Roll the die\r- Attempt to move the resulting number of squares',				#stamp : 'on 3/14/2006 19:07'			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Responsibilities:\r- Keep track of the square you are on\r- Roll the die\r- Attempt to move the resulting number of squares',		#newStamp : 'on 3/14/2006 19:07'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.494993+01:00' ],		#prior : OmReference [ '93' ],		#self : OmReference [ '94' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GamePlayer,				#isMetaSide : false			},			#name : #invariant,			#protocol : #initialize-release,			#sourceCode : 'invariant\r\t^ square notNil\r\t\tand: [ name notNil ]',			#stamp : 'on 3/18/2006 12:08',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.497019+01:00' ],		#prior : OmReference [ '94' ],		#self : OmReference [ '95' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GamePlayer,				#isMetaSide : false			},			#name : #'setName:',			#protocol : #initialize-release,			#sourceCode : 'setName: aName\r\tname := aName.',			#stamp : 'on 3/18/2006 12:49',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.499033+01:00' ],		#prior : OmReference [ '95' ],		#self : OmReference [ '96' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GamePlayer,				#isMetaSide : false			},			#name : #leaveCurrentSquare,			#protocol : #private,			#sourceCode : 'leaveCurrentSquare\r\tsquare notNil ifTrue: [ square remove: self ].',			#stamp : 'on 3/14/2006 15:53',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.502414+01:00' ],		#prior : OmReference [ '96' ],		#self : OmReference [ '97' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GamePlayer,				#isMetaSide : false			},			#name : #'moveTo:',			#protocol : #playing,			#sourceCode : 'moveTo: aSquare\r\tself leaveCurrentSquare.\r\tsquare := aSquare landHere: self.\r',			#stamp : 'on 3/18/2006 15:21',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.504896+01:00' ],		#prior : OmReference [ '97' ],		#self : OmReference [ '98' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GamePlayer,				#isMetaSide : false			},			#name : #'moveWith:',			#protocol : #playing,			#sourceCode : 'moveWith: aDie\r\t| roll destination |\r\tself assert: self invariant.\r\troll := aDie roll.\r\tdestination := square forwardBy: roll.\r\tself moveTo: destination.\r\t^ name, \' rolls \', roll asString, \' and lands at \', square asString',			#stamp : 'on 3/23/2006 09:04',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.506922+01:00' ],		#prior : OmReference [ '98' ],		#self : OmReference [ '99' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GamePlayer,				#isMetaSide : false			},			#name : #name,			#protocol : #testing,			#sourceCode : 'name\r\t^ name',			#stamp : 'on 3/15/2006 14:57',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.508824+01:00' ],		#prior : OmReference [ '99' ],		#self : OmReference [ '100' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GamePlayer,				#isMetaSide : false			},			#name : #position,			#protocol : #testing,			#sourceCode : 'position\r\t^ square position',			#stamp : 'on 3/14/2006 17:03',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.510756+01:00' ],		#prior : OmReference [ '100' ],		#self : OmReference [ '101' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GamePlayer,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\taStream nextPutAll: name',			#stamp : 'on 3/14/2006 15:32',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.516181+01:00' ],		#prior : OmReference [ '101' ],		#self : OmReference [ '102' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'GamePlayer class',				#isMetaSide : true			},			#name : #'named:',			#protocol : #'instance creation',			#sourceCode : 'named: aName\r\t^ self new setName: aName',			#stamp : 'on 3/18/2006 12:48',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.522232+01:00' ],		#prior : OmReference [ '102' ],		#self : OmReference [ '103' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #BoardSquare\r\tinstanceVariableNames: \'position player board\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #BoardSquare,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #BoardSquare,						#isMetaSide : false					},					#name : #position,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #BoardSquare,						#isMetaSide : false					},					#name : #player,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #BoardSquare,						#isMetaSide : false					},					#name : #board,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BoardSquare class\r\tinstanceVariableNames: \'\''				},				#name : #'BoardSquare class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BoardSquare,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.524124+01:00' ],		#prior : OmReference [ '103' ],		#self : OmReference [ '104' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #BoardSquare\r\tinstanceVariableNames: \'position player board\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #BoardSquare,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #BoardSquare,						#isMetaSide : false					},					#name : #position,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #BoardSquare,						#isMetaSide : false					},					#name : #player,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #BoardSquare,						#isMetaSide : false					},					#name : #board,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BoardSquare class\r\tinstanceVariableNames: \'\''				},				#name : #'BoardSquare class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BoardSquare,					#isMetaSide : false				},				#parent : @7,				#content : 'Responsibilities:\r- Remember position in the board\r- Keep track of any players on this square\r- Send on any players passing through\r- Displays itself with its position and any player who might be on it, e.g., [7 Jack]',				#stamp : 'on 3/14/2006 19:27'			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Responsibilities:\r- Remember position in the board\r- Keep track of any players on this square\r- Send on any players passing through\r- Displays itself with its position and any player who might be on it, e.g., [7 Jack]',		#newStamp : 'on 3/14/2006 19:27'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.526244+01:00' ],		#prior : OmReference [ '104' ],		#self : OmReference [ '105' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BoardSquare,				#isMetaSide : false			},			#name : #'backwardBy:',			#protocol : #playing,			#sourceCode : 'backwardBy: squares \r\t^ squares = 0 \r\t\tifTrue: [self destination]\r\t\tifFalse: \r\t\t\t[self isFirstSquare \r\t\t\t\tifTrue: [self nextSquare forwardBy: squares - 1]\r\t\t\t\tifFalse: [self previousSquare backwardBy: squares - 1]]',			#stamp : 'on 3/15/2006 15:26',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.528399+01:00' ],		#prior : OmReference [ '105' ],		#self : OmReference [ '106' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BoardSquare,				#isMetaSide : false			},			#name : #destination,			#protocol : #playing,			#sourceCode : 'destination\r\t^ self',			#stamp : 'on 3/15/2006 15:26',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.530643+01:00' ],		#prior : OmReference [ '106' ],		#self : OmReference [ '107' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BoardSquare,				#isMetaSide : false			},			#name : #'forwardBy:',			#protocol : #playing,			#sourceCode : 'forwardBy: squares\r\tself assert: self invariant.\r\t^ squares = 0 \r\t\tifTrue: [self destination]\r\t\tifFalse: \r\t\t\t[self isLastSquare \r\t\t\t\tifFalse: [self nextSquare forwardBy: squares - 1]\r\t\t\t\tifTrue: [self previousSquare backwardBy: squares - 1]]',			#stamp : 'on 3/18/2006 11:43',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.532706+01:00' ],		#prior : OmReference [ '107' ],		#self : OmReference [ '108' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BoardSquare,				#isMetaSide : false			},			#name : #'landHere:',			#protocol : #playing,			#sourceCode : 'landHere: aPlayer\r\t^ self isOccupied\r\t\tifTrue: [ board firstSquare landHere: aPlayer ]\r\t\tifFalse: [ player := aPlayer. self ]',			#stamp : 'on 3/15/2006 15:43',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.534668+01:00' ],		#prior : OmReference [ '108' ],		#self : OmReference [ '109' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BoardSquare,				#isMetaSide : false			},			#name : #nextSquare,			#protocol : #playing,			#sourceCode : 'nextSquare\r\tself assert: self isLastSquare not.\r\t^ board at: position + 1',			#stamp : 'on 3/14/2006 16:32',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.536685+01:00' ],		#prior : OmReference [ '109' ],		#self : OmReference [ '110' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BoardSquare,				#isMetaSide : false			},			#name : #previousSquare,			#protocol : #playing,			#sourceCode : 'previousSquare\r\tself assert: self isFirstSquare not.\r\t^ board at: position - 1',			#stamp : 'on 3/14/2006 16:32',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.540236+01:00' ],		#prior : OmReference [ '110' ],		#self : OmReference [ '111' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BoardSquare,				#isMetaSide : false			},			#name : #'remove:',			#protocol : #playing,			#sourceCode : 'remove: aPlayer\r\tself assert: player = aPlayer.\r\tplayer := nil.',			#stamp : 'on 3/14/2006 16:14',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.542425+01:00' ],		#prior : OmReference [ '111' ],		#self : OmReference [ '112' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BoardSquare,				#isMetaSide : false			},			#name : #contents,			#protocol : #printing,			#sourceCode : 'contents\r\t^ self isOccupied\r\t\tifTrue: [ \' \', player asString ]\r\t\tifFalse: [ \'\' ]',			#stamp : 'on 3/14/2006 17:18',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.544459+01:00' ],		#prior : OmReference [ '112' ],		#self : OmReference [ '113' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BoardSquare,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\taStream nextPutAll: \'[\', position printString, self contents, \']\'.',			#stamp : 'on 3/14/2006 16:08',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.546505+01:00' ],		#prior : OmReference [ '113' ],		#self : OmReference [ '114' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BoardSquare,				#isMetaSide : false			},			#name : #invariant,			#protocol : #initialize-release,			#sourceCode : 'invariant\r\t^ board notNil\r\t\tand: [ position notNil\r\t\tand: [ position >= 0 \r\t\tand: [ position <= board lastPosition]]]',			#stamp : 'jjddpp 9/4/2012 12:23',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.548218+01:00' ],		#prior : OmReference [ '114' ],		#self : OmReference [ '115' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BoardSquare,				#isMetaSide : false			},			#name : #'setPosition:board:',			#protocol : #initialize-release,			#sourceCode : 'setPosition: aNumber board: aBoard \r\tposition := aNumber.\r\tboard := aBoard',			#stamp : 'on 3/18/2006 15:13',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.549808+01:00' ],		#prior : OmReference [ '115' ],		#self : OmReference [ '116' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BoardSquare,				#isMetaSide : false			},			#name : #isFirstSquare,			#protocol : #testing,			#sourceCode : 'isFirstSquare\r\t^ position = 1',			#stamp : 'on 3/14/2006 16:12',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.552856+01:00' ],		#prior : OmReference [ '116' ],		#self : OmReference [ '117' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BoardSquare,				#isMetaSide : false			},			#name : #isLastSquare,			#protocol : #testing,			#sourceCode : 'isLastSquare\r\t^ position = board lastPosition',			#stamp : 'on 3/20/2006 10:17',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.554652+01:00' ],		#prior : OmReference [ '117' ],		#self : OmReference [ '118' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BoardSquare,				#isMetaSide : false			},			#name : #isOccupied,			#protocol : #testing,			#sourceCode : 'isOccupied\r\t^ player notNil',			#stamp : 'on 3/14/2006 16:40',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.5565+01:00' ],		#prior : OmReference [ '118' ],		#self : OmReference [ '119' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BoardSquare,				#isMetaSide : false			},			#name : #position,			#protocol : #testing,			#sourceCode : 'position\r\t^ position',			#stamp : 'on 3/14/2006 17:03',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.56119+01:00' ],		#prior : OmReference [ '119' ],		#self : OmReference [ '120' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'BoardSquare',				#traitCompositionSource : '{}',				#definitionSource : 'BoardSquare subclass: #LadderSquare\r\tinstanceVariableNames: \'forward\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #LadderSquare,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LadderSquare,						#isMetaSide : false					},					#name : #forward,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LadderSquare class\r\tinstanceVariableNames: \'\''				},				#name : #'LadderSquare class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LadderSquare,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.56292+01:00' ],		#prior : OmReference [ '120' ],		#self : OmReference [ '121' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'BoardSquare',				#traitCompositionSource : '{}',				#definitionSource : 'BoardSquare subclass: #LadderSquare\r\tinstanceVariableNames: \'forward\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #LadderSquare,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LadderSquare,						#isMetaSide : false					},					#name : #forward,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LadderSquare class\r\tinstanceVariableNames: \'\''				},				#name : #'LadderSquare class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LadderSquare,					#isMetaSide : false				},				#parent : @7,				#content : 'Responsibilities:\r- If a player lands here, send him or her up the ladder (forward # squares)\r- Displays itself as a square with a positive offset, e.g., [6]3+>',				#stamp : 'on 3/17/2006 10:36'			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Responsibilities:\r- If a player lands here, send him or her up the ladder (forward # squares)\r- Displays itself as a square with a positive offset, e.g., [6]3+>',		#newStamp : 'on 3/17/2006 10:36'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.564653+01:00' ],		#prior : OmReference [ '121' ],		#self : OmReference [ '122' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LadderSquare,				#isMetaSide : false			},			#name : #destination,			#protocol : #playing,			#sourceCode : 'destination\r\t^ self forwardBy: forward',			#stamp : 'on 3/15/2006 15:26',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.567061+01:00' ],		#prior : OmReference [ '122' ],		#self : OmReference [ '123' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LadderSquare,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\tsuper printOn: aStream.\r\taStream nextPutAll: forward asString, \'+>\'.',			#stamp : 'on 3/16/2006 14:35',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.568975+01:00' ],		#prior : OmReference [ '123' ],		#self : OmReference [ '124' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LadderSquare,				#isMetaSide : false			},			#name : #'setForward:',			#protocol : #initialize-release,			#sourceCode : 'setForward: aNumber\r\tforward := aNumber.',			#stamp : 'on 3/18/2006 12:49',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.575754+01:00' ],		#prior : OmReference [ '124' ],		#self : OmReference [ '125' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'LadderSquare class',				#isMetaSide : true			},			#name : #'forward:',			#protocol : #'instance creation',			#sourceCode : 'forward: number\r\t^ self new setForward: number',			#stamp : 'on 3/18/2006 12:50',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.580609+01:00' ],		#prior : OmReference [ '125' ],		#self : OmReference [ '126' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'BoardSquare',				#traitCompositionSource : '{}',				#definitionSource : 'BoardSquare subclass: #FirstSquare\r\tinstanceVariableNames: \'players\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #FirstSquare,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #FirstSquare,						#isMetaSide : false					},					#name : #players,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'FirstSquare class\r\tinstanceVariableNames: \'\''				},				#name : #'FirstSquare class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #FirstSquare,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.582303+01:00' ],		#prior : OmReference [ '126' ],		#self : OmReference [ '127' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'BoardSquare',				#traitCompositionSource : '{}',				#definitionSource : 'BoardSquare subclass: #FirstSquare\r\tinstanceVariableNames: \'players\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #FirstSquare,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #FirstSquare,						#isMetaSide : false					},					#name : #players,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'FirstSquare class\r\tinstanceVariableNames: \'\''				},				#name : #'FirstSquare class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #FirstSquare,					#isMetaSide : false				},				#parent : @7,				#content : 'Responsibilities:\r- Allows multiple players to be added or removed [normal squares can only hold a single player]',				#stamp : 'on 3/14/2006 19:06'			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Responsibilities:\r- Allows multiple players to be added or removed [normal squares can only hold a single player]',		#newStamp : 'on 3/14/2006 19:06'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.584518+01:00' ],		#prior : OmReference [ '127' ],		#self : OmReference [ '128' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FirstSquare,				#isMetaSide : false			},			#name : #contents,			#protocol : #printing,			#sourceCode : 'contents\r\t^ players inject: \'\' into:\r\t\t\t[ :list :each | list , \' \', each asString ]',			#stamp : 'on 3/14/2006 15:35',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.58696+01:00' ],		#prior : OmReference [ '128' ],		#self : OmReference [ '129' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FirstSquare,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialize-release,			#sourceCode : 'initialize\r\tplayers := OrderedCollection new.',			#stamp : 'on 3/14/2006 15:30',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.588991+01:00' ],		#prior : OmReference [ '129' ],		#self : OmReference [ '130' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FirstSquare,				#isMetaSide : false			},			#name : #'landHere:',			#protocol : #initialize-release,			#sourceCode : 'landHere: aPlayer\r\tplayers add: aPlayer.',			#stamp : 'on 3/15/2006 15:29',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.590798+01:00' ],		#prior : OmReference [ '130' ],		#self : OmReference [ '131' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FirstSquare,				#isMetaSide : false			},			#name : #isOccupied,			#protocol : #testing,			#sourceCode : 'isOccupied\r\t^ players size > 0',			#stamp : 'on 3/18/2006 11:10',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.594391+01:00' ],		#prior : OmReference [ '131' ],		#self : OmReference [ '132' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FirstSquare,				#isMetaSide : false			},			#name : #'remove:',			#protocol : #playing,			#sourceCode : 'remove: aPlayer\r\tself assert: (players includes: aPlayer).\r\tplayers remove: aPlayer.',			#stamp : 'on 3/14/2006 16:15',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.599223+01:00' ],		#prior : OmReference [ '132' ],		#self : OmReference [ '133' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #MetaclassHierarchyTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #MetaclassHierarchyTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MetaclassHierarchyTest class\r\tinstanceVariableNames: \'\''				},				#name : #'MetaclassHierarchyTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MetaclassHierarchyTest,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.600942+01:00' ],		#prior : OmReference [ '133' ],		#self : OmReference [ '134' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #MetaclassHierarchyTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #MetaclassHierarchyTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MetaclassHierarchyTest class\r\tinstanceVariableNames: \'\''				},				#name : #'MetaclassHierarchyTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MetaclassHierarchyTest,					#isMetaSide : false				},				#parent : @7,				#content : 'Demonstrate the relationship between classes and metaclasses',				#stamp : 'on 3/19/2006 11:33'			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Demonstrate the relationship between classes and metaclasses',		#newStamp : 'on 3/19/2006 11:33'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.603855+01:00' ],		#prior : OmReference [ '134' ],		#self : OmReference [ '135' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MetaclassHierarchyTest,				#isMetaSide : false			},			#name : #testHierarchy,			#protocol : #running,			#sourceCode : 'testHierarchy\r\t"The class hierarchy"\r\tself assert: SnakeSquare superclass = BoardSquare.\r\tself assert: BoardSquare superclass = Object.\r\tself assert: Object superclass superclass = nil.\r\t"The parallel metaclass hierarchy"\r\tself assert: SnakeSquare class name = \'SnakeSquare class\'.\r\tself assert: SnakeSquare class superclass = BoardSquare class.\r\tself assert: BoardSquare class superclass = Object class.\r\tself assert: Object class superclass superclass = Class.\r\tself assert: Class superclass = ClassDescription.\r\tself assert: ClassDescription superclass = Behavior.\r\tself assert: Behavior superclass = Object.\r\t"The Metaclass hierarchy"\r\tself assert: SnakeSquare class class = Metaclass.\r\tself assert: BoardSquare class class = Metaclass.\r\tself assert: Object class class = Metaclass.\r\tself assert: Class class class = Metaclass.\r\tself assert: ClassDescription class class = Metaclass.\r\tself assert: Behavior class class = Metaclass.\r\tself assert: Metaclass superclass = ClassDescription.\r\t"The fixpoint"\r\tself assert: Metaclass class class = Metaclass',			#stamp : 'on 10/28/2007 15:49',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.609913+01:00' ],		#prior : OmReference [ '135' ],		#self : OmReference [ '136' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Die',				#traitCompositionSource : '{}',				#definitionSource : 'Die subclass: #LoadedDie\r\tinstanceVariableNames: \'roll\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #LoadedDie,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LoadedDie,						#isMetaSide : false					},					#name : #roll,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LoadedDie class\r\tinstanceVariableNames: \'\''				},				#name : #'LoadedDie class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LoadedDie,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.611702+01:00' ],		#prior : OmReference [ '136' ],		#self : OmReference [ '137' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Die',				#traitCompositionSource : '{}',				#definitionSource : 'Die subclass: #LoadedDie\r\tinstanceVariableNames: \'roll\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #LoadedDie,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LoadedDie,						#isMetaSide : false					},					#name : #roll,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LoadedDie class\r\tinstanceVariableNames: \'\''				},				#name : #'LoadedDie class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LoadedDie,					#isMetaSide : false				},				#parent : @7,				#content : 'For testing purposes. When rolled, a loaded die returns a fixed value.',				#stamp : 'on 3/17/2006 10:50'			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'For testing purposes. When rolled, a loaded die returns a fixed value.',		#newStamp : 'on 3/17/2006 10:50'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.613419+01:00' ],		#prior : OmReference [ '137' ],		#self : OmReference [ '138' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LoadedDie,				#isMetaSide : false			},			#name : #roll,			#protocol : #playing,			#sourceCode : 'roll\r\tself assert: roll notNil.\r\t^ roll',			#stamp : 'on 3/18/2006 15:24',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.617315+01:00' ],		#prior : OmReference [ '138' ],		#self : OmReference [ '139' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LoadedDie,				#isMetaSide : false			},			#name : #'roll:',			#protocol : #playing,			#sourceCode : 'roll: aNumber\r\tself assert: ((1 to: 6) includes: aNumber).\r\troll := aNumber.',			#stamp : 'on 3/18/2006 15:25',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.622564+01:00' ],		#prior : OmReference [ '139' ],		#self : OmReference [ '140' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'BoardSquare',				#traitCompositionSource : '{}',				#definitionSource : 'BoardSquare subclass: #SnakeSquare\r\tinstanceVariableNames: \'back\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #SnakeSquare,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeSquare,						#isMetaSide : false					},					#name : #back,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SnakeSquare class\r\tinstanceVariableNames: \'\''				},				#name : #'SnakeSquare class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SnakeSquare,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.624356+01:00' ],		#prior : OmReference [ '140' ],		#self : OmReference [ '141' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'BoardSquare',				#traitCompositionSource : '{}',				#definitionSource : 'BoardSquare subclass: #SnakeSquare\r\tinstanceVariableNames: \'back\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #SnakeSquare,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeSquare,						#isMetaSide : false					},					#name : #back,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SnakeSquare class\r\tinstanceVariableNames: \'\''				},				#name : #'SnakeSquare class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SnakeSquare,					#isMetaSide : false				},				#parent : @7,				#content : 'Responsibilities:\r- If a player lands here, send him or her backwards (back # squares)\r- Displays itself as a square with a negative offset, e.g., <-3[5]',				#stamp : 'on 3/20/2006 09:14'			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Responsibilities:\r- If a player lands here, send him or her backwards (back # squares)\r- Displays itself as a square with a negative offset, e.g., <-3[5]',		#newStamp : 'on 3/20/2006 09:14'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.626073+01:00' ],		#prior : OmReference [ '141' ],		#self : OmReference [ '142' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeSquare,				#isMetaSide : false			},			#name : #destination,			#protocol : #playing,			#sourceCode : 'destination\r\t^ self backwardBy: back',			#stamp : 'on 3/15/2006 15:26',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.628665+01:00' ],		#prior : OmReference [ '142' ],		#self : OmReference [ '143' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeSquare,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\taStream nextPutAll: \'<-\', back asString.\r\tsuper printOn: aStream.',			#stamp : 'on 3/16/2006 14:35',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.630661+01:00' ],		#prior : OmReference [ '143' ],		#self : OmReference [ '144' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeSquare,				#isMetaSide : false			},			#name : #'setBack:',			#protocol : #initialize-release,			#sourceCode : 'setBack: aNumber\r\tback := aNumber.',			#stamp : 'on 3/18/2006 12:50',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.634203+01:00' ],		#prior : OmReference [ '144' ],		#self : OmReference [ '145' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'SnakeSquare class',				#isMetaSide : true			},			#name : #'back:',			#protocol : #'instance creation',			#sourceCode : 'back: number\r\t^ self new setBack: number',			#stamp : 'on 3/18/2006 12:50',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.641079+01:00' ],		#prior : OmReference [ '145' ],		#self : OmReference [ '146' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #SnakesAndLaddersTest\r\tinstanceVariableNames: \'eg loadedDie jack jill\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #SnakesAndLaddersTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLaddersTest,						#isMetaSide : false					},					#name : #eg,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLaddersTest,						#isMetaSide : false					},					#name : #loadedDie,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLaddersTest,						#isMetaSide : false					},					#name : #jack,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLaddersTest,						#isMetaSide : false					},					#name : #jill,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SnakesAndLaddersTest class\r\tinstanceVariableNames: \'\''				},				#name : #'SnakesAndLaddersTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SnakesAndLaddersTest,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.642755+01:00' ],		#prior : OmReference [ '146' ],		#self : OmReference [ '147' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #SnakesAndLaddersTest\r\tinstanceVariableNames: \'eg loadedDie jack jill\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #SnakesAndLaddersTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLaddersTest,						#isMetaSide : false					},					#name : #eg,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLaddersTest,						#isMetaSide : false					},					#name : #loadedDie,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLaddersTest,						#isMetaSide : false					},					#name : #jack,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLaddersTest,						#isMetaSide : false					},					#name : #jill,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SnakesAndLaddersTest class\r\tinstanceVariableNames: \'\''				},				#name : #'SnakesAndLaddersTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SnakesAndLaddersTest,					#isMetaSide : false				},				#parent : @7,				#content : 'Play a rigged game and check the results.',				#stamp : 'on 3/15/2006 13:24'			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Play a rigged game and check the results.',		#newStamp : 'on 3/15/2006 13:24'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.644201+01:00' ],		#prior : OmReference [ '147' ],		#self : OmReference [ '148' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLaddersTest,				#isMetaSide : false			},			#name : #example,			#protocol : #running,			#sourceCode : 'example\r\t^ SnakesAndLadders example',			#stamp : 'on 3/16/2006 09:58',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.64648+01:00' ],		#prior : OmReference [ '148' ],		#self : OmReference [ '149' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLaddersTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\teg := self example.\r\tloadedDie := LoadedDie new.\r\teg setDie: loadedDie.\r\tjack := eg players first.\r\tjill := eg players last.',			#stamp : 'on 3/16/2006 09:58',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.649681+01:00' ],		#prior : OmReference [ '149' ],		#self : OmReference [ '150' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLaddersTest,				#isMetaSide : false			},			#name : #testExample,			#protocol : #running,			#sourceCode : 'testExample\r\tself assert: eg currentPlayer = jack.\r\tloadedDie roll: 1.\r\teg playOneMove.\r\tself assert: jack position = 6.\r\tself assert: eg currentPlayer = jill.\r\tloadedDie roll: 5.\r\teg playOneMove.\r\tself assert: jill position = 1.\r\tself assert: eg currentPlayer = jack.\r\tloadedDie roll: 5.\r\teg playOneMove.\r\tself assert: jack position = 5.\r\tself assert: eg currentPlayer = jill.\r\tloadedDie roll: 4.\r\teg playOneMove.\r\tself assert: jill position = 1.\r\tself assert: eg currentPlayer = jack.\r\tloadedDie roll: 6.\r\teg playOneMove.\r\tself assert: jack position = 5.\r\tself assert: eg currentPlayer = jill.\r\tloadedDie roll: 6.\r\teg playOneMove.\r\tself assert: jill position = 9.\r\tself assert: eg currentPlayer = jack.\r\tloadedDie roll: 5.\r\teg playOneMove.\r\tself assert: jack position = 10.\r\tself assert: eg currentPlayer = jill.\r\tloadedDie roll: 5.\r\teg playOneMove.\r\tself assert: jill position = 1.\r\tself assert: eg currentPlayer = jack.\r\tloadedDie roll: 2.\r\teg playOneMove.\r\tself assert: jack position = 12.\r\tself assert: eg isOver',			#stamp : 'on 3/23/2006 09:06',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.652414+01:00' ],		#prior : OmReference [ '150' ],		#self : OmReference [ '151' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLaddersTest,				#isMetaSide : false			},			#name : #testStartPosition,			#protocol : #running,			#sourceCode : 'testStartPosition\r\tself assert: eg lastPosition = 12.\r\tself assert: eg isNotOver.\r\tself assert: eg currentPlayer = jack.\r\tself assert: eg firstSquare isFirstSquare.\r\tself assert: eg firstSquare isLastSquare not.\r\tself assert: eg firstSquare position = 1.\r\tself assert: eg firstSquare isOccupied.\r\tself assert: (eg at: eg lastPosition) isFirstSquare not.\r\tself assert: (eg at: eg lastPosition) isLastSquare.\r\tself assert: (eg at: eg lastPosition) position = 12.\r\tself assert: (eg at: eg lastPosition) isOccupied not.\r\tself assert: jack name = \'Jack\'.\r\tself assert: jill name = \'Jill\'.\r\tself assert: jack position = 1.\r\tself assert: jill position = 1',			#stamp : 'on 3/18/2006 15:01',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.658543+01:00' ],		#prior : OmReference [ '151' ],		#self : OmReference [ '152' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'SnakesAndLaddersTest',				#traitCompositionSource : '{}',				#definitionSource : 'SnakesAndLaddersTest subclass: #SnakesAndLaddersTest2\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #SnakesAndLaddersTest2,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SnakesAndLaddersTest2 class\r\tinstanceVariableNames: \'\''				},				#name : #'SnakesAndLaddersTest2 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SnakesAndLaddersTest2,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.660293+01:00' ],		#prior : OmReference [ '152' ],		#self : OmReference [ '153' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'SnakesAndLaddersTest',				#traitCompositionSource : '{}',				#definitionSource : 'SnakesAndLaddersTest subclass: #SnakesAndLaddersTest2\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #SnakesAndLaddersTest2,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SnakesAndLaddersTest2 class\r\tinstanceVariableNames: \'\''				},				#name : #'SnakesAndLaddersTest2 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SnakesAndLaddersTest2,					#isMetaSide : false				},				#parent : @7,				#content : 'Some tests for a second example.',				#stamp : 'on 3/17/2006 10:50'			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Some tests for a second example.',		#newStamp : 'on 3/17/2006 10:50'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.661748+01:00' ],		#prior : OmReference [ '153' ],		#self : OmReference [ '154' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLaddersTest2,				#isMetaSide : false			},			#name : #example,			#protocol : #running,			#sourceCode : 'example\r\t^ SnakesAndLadders example2',			#stamp : 'on 3/16/2006 09:59',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T12:46:48.665248+01:00' ],		#prior : OmReference [ '154' ],		#self : OmReference [ '155' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLaddersTest2,				#isMetaSide : false			},			#name : #testExample,			#protocol : #running,			#sourceCode : 'testExample\r\tself assert: jack name = \'Jack\'.\r\tself assert: jill name = \'Jill\'.\r\tself assert: jack position = 1.\r\tself assert: jill position = 1.\r\tself assert: eg currentPlayer = jack.\r\tloadedDie roll: 1.\r\teg playOneMove.\r\tself assert: jack position = 2.\r\tself assert: eg currentPlayer = jill.\r\tloadedDie roll: 2.\r\teg playOneMove.\r\tself assert: jill position = 7.\r\tself assert: eg currentPlayer = jack.\r\tloadedDie roll: 3.\r\teg playOneMove.\r\tself assert: jack position = 5.\r\tself assert: eg currentPlayer = jill.\r\tloadedDie roll: 1.\r\teg playOneMove.\r\tself assert: jill position = 7.\r\tself assert: eg currentPlayer = jack.\r\tloadedDie roll: 2.\r\teg playOneMove.\r\tself assert: jack position = 1.\r\tself assert: eg currentPlayer = jill.\r\tloadedDie roll: 5.\r\teg playOneMove.\r\tself assert: jill position = 12.\r\tself assert: eg currentPlayer = jack.\r\tloadedDie roll: 6.\r\teg playOneMove.\r\tself assert: jack position = 7.\r\tself assert: eg currentPlayer = jill.\r\tloadedDie roll: 1.\r\teg playOneMove.\r\tself assert: jill position = 13.\r\tself assert: eg isOver',			#stamp : 'on 3/18/2006 15:04',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T14:00:07.9311+01:00' ],		#prior : OmReference [ '155' ],		#self : OmReference [ '156' ]	},	#content : EpMonticelloVersionSave {		#versionName : 'Coroutines-CAP2016-17-jjddpp.8',		#repositoryDescription : '/home/marc/UPC/CAP/Pharo_Parcial/pharo-local/package-cache'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T14:00:07.99423+01:00' ],		#prior : OmReference [ '156' ],		#self : OmReference [ '157' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'Coroutines-CAP2016-17-jjddpp.8'		]	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '157' ],		#self : OmReference [ '158' ],		#time : DateAndTime [ '2024-01-14T14:00:08.054538+01:00' ],		#trigger : @3	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object variableSubclass: #Coroutine\r\tinstanceVariableNames: \'savedContinuation firstTime resumer theBlock\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #Coroutine,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Coroutine,						#isMetaSide : false					},					#name : #savedContinuation,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Coroutine,						#isMetaSide : false					},					#name : #firstTime,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Coroutine,						#isMetaSide : false					},					#name : #resumer,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Coroutine,						#isMetaSide : false					},					#name : #theBlock,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Coroutine class\r\tinstanceVariableNames: \'\''				},				#name : #'Coroutine class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Coroutine,					#isMetaSide : false				},				#parent : @7,				#content : 'After Section 17.6 "Coroutines: Continuations in Action" (p.567) of the book "Scheme and the Art of Programming", by George Springer and Daniel P. Friedman, MIT Press 1989 (ISBN 0-262-19288-8)\r[ http://cs.unm.edu/~williams/cs357/springer-friedman.pdf ]\r\r',				#stamp : 'jjddpp 11/9/2016 20:07'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'After Section 17.6 "Coroutines: Continuations in Action" (p.567) of the book "Scheme and the Art of Programming", by George Springer and Daniel P. Friedman, MIT Press 1989 (ISBN 0-262-19288-8)\r[ http://cs.unm.edu/~williams/cs357/springer-friedman.pdf ]\r\r',		#newStamp : 'jjddpp 11/9/2016 20:07'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '158' ],		#self : OmReference [ '159' ],		#time : DateAndTime [ '2024-01-14T14:00:08.055676+01:00' ],		#trigger : OmReference [ '157' ]	},	#content : EpCategoryAddition {		#classCategoryName : #Coroutines-CAP2016-17,		#affectedPackageName : #Coroutines-CAP2016-17	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '159' ],		#self : OmReference [ '160' ],		#time : DateAndTime [ '2024-01-14T14:00:08.084867+01:00' ],		#trigger : OmReference [ '157' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object variableSubclass: #Coroutine\r\tinstanceVariableNames: \'savedContinuation firstTime resumer theBlock\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Coroutines-CAP2016-17\''			},			#name : #Coroutine,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Coroutine,						#isMetaSide : false					},					#name : #savedContinuation,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Coroutine,						#isMetaSide : false					},					#name : #firstTime,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Coroutine,						#isMetaSide : false					},					#name : #resumer,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Coroutine,						#isMetaSide : false					},					#name : #theBlock,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Coroutine class\r\tinstanceVariableNames: \'\''				},				#name : #'Coroutine class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Coroutine,					#isMetaSide : false				},				#parent : @8,				#content : 'After Section 17.6 "Coroutines: Continuations in Action" (p.567) of the book "Scheme and the Art of Programming", by George Springer and Daniel P. Friedman, MIT Press 1989 (ISBN 0-262-19288-8)\r[ http://cs.unm.edu/~williams/cs357/springer-friedman.pdf ]\r\r',				#stamp : 'jjddpp 11/9/2016 20:07'			},			#classVariables : OrderedCollection [ ],			#category : #Coroutines-CAP2016-17,			#package : #Coroutines-CAP2016-17,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '160' ],		#self : OmReference [ '161' ],		#time : DateAndTime [ '2024-01-14T14:00:08.090177+01:00' ],		#trigger : OmReference [ '157' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object variableSubclass: #StableMarriages\r\tinstanceVariableNames: \'main men women numberOfCouples result\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #StableMarriages,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StableMarriages,						#isMetaSide : false					},					#name : #main,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StableMarriages,						#isMetaSide : false					},					#name : #men,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StableMarriages,						#isMetaSide : false					},					#name : #women,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StableMarriages,						#isMetaSide : false					},					#name : #numberOfCouples,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StableMarriages,						#isMetaSide : false					},					#name : #result,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'StableMarriages class\r\tinstanceVariableNames: \'\''				},				#name : #'StableMarriages class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #StableMarriages,					#isMetaSide : false				},				#parent : @8,				#content : 'Solving the Stable Marriages problem with coroutines, according to: "Stable Marriages by Coroutines"\rLloyd Allison\rInformation Processing Letters 16 (1983), 61-65 \r',				#stamp : 'jjddpp 11/16/2016 11:00'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Solving the Stable Marriages problem with coroutines, according to: "Stable Marriages by Coroutines"\rLloyd Allison\rInformation Processing Letters 16 (1983), 61-65 \r',		#newStamp : 'jjddpp 11/16/2016 11:00'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '161' ],		#self : OmReference [ '162' ],		#time : DateAndTime [ '2024-01-14T14:00:08.091429+01:00' ],		#trigger : OmReference [ '157' ]	},	#content : EpCategoryAddition {		#classCategoryName : #Coroutines-CAP2016-17-StableMarriages,		#affectedPackageName : #Coroutines-CAP2016-17	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '162' ],		#self : OmReference [ '163' ],		#time : DateAndTime [ '2024-01-14T14:00:08.093155+01:00' ],		#trigger : OmReference [ '157' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object variableSubclass: #StableMarriages\r\tinstanceVariableNames: \'main men women numberOfCouples result\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Coroutines-CAP2016-17-StableMarriages\''			},			#name : #StableMarriages,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StableMarriages,						#isMetaSide : false					},					#name : #main,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StableMarriages,						#isMetaSide : false					},					#name : #men,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StableMarriages,						#isMetaSide : false					},					#name : #women,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StableMarriages,						#isMetaSide : false					},					#name : #numberOfCouples,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StableMarriages,						#isMetaSide : false					},					#name : #result,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'StableMarriages class\r\tinstanceVariableNames: \'\''				},				#name : #'StableMarriages class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #StableMarriages,					#isMetaSide : false				},				#parent : @8,				#content : 'Solving the Stable Marriages problem with coroutines, according to: "Stable Marriages by Coroutines"\rLloyd Allison\rInformation Processing Letters 16 (1983), 61-65 \r',				#stamp : 'jjddpp 11/16/2016 11:00'			},			#classVariables : OrderedCollection [ ],			#category : #Coroutines-CAP2016-17-StableMarriages,			#package : #Coroutines-CAP2016-17,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '163' ],		#self : OmReference [ '164' ],		#time : DateAndTime [ '2024-01-14T14:00:08.137605+01:00' ],		#trigger : OmReference [ '157' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Continuation class',				#isMetaSide : true			},			#name : #'callcc:',			#protocol : #'*Coroutines-CAP2016-17',			#sourceCode : 'callcc: aBlock\r\t^ self currentDo: aBlock ',			#stamp : 'jjddpp 11/10/2016 10:37',			#package : #Coroutines-CAP2016-17		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '164' ],		#self : OmReference [ '165' ],		#time : DateAndTime [ '2024-01-14T14:00:08.139058+01:00' ],		#trigger : OmReference [ '157' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Coroutine class',				#isMetaSide : true			},			#name : #example1,			#protocol : #examples,			#sourceCode : 'example1\r\t"Coroutine example1"\r\t| a b c |\r\ta := Coroutine maker: [ :resume :value |\r\t\t\t\tTranscript show: \'This is A\'; cr.\r\t\t\t\tTranscript show: \'Came from \', (resume value: b value: \'A\'); cr. \r\t\t\t\tTranscript show: \'Back in A\'; cr.\r\t\t\t\tTranscript show: \'Came from \', (resume value: c value: \'A\'); cr.  ].\r\tb := Coroutine maker: [ :resume :value |\r\t\t\t\tTranscript show: \'       This is B\'; cr.\r\t\t\t\tTranscript show: \'       Came from \', (resume value: c value: \'B\'); cr. \r\t\t\t\tTranscript show: \'       Back in B\'; cr.\r\t\t\t\tTranscript show: \'       Came from \', (resume value: a value: \'B\'); cr.  ].\r\tc := Coroutine maker: [ :resume :value |\r\t\t\t\tTranscript show: \'              This is C\'; cr.\r\t\t\t\tTranscript show: \'              Came from \', (resume value: a value: \'C\'); cr. \r\t\t\t\tTranscript show: \'              Back in C\'; cr.\r\t\t\t\tTranscript show: \'              Came from \', (resume value: b value: \'C\'); cr.  ].\r\ta value: \'*\'.\r',			#stamp : 'jjddpp 11/13/2016 12:08',			#package : #Coroutines-CAP2016-17		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '165' ],		#self : OmReference [ '166' ],		#time : DateAndTime [ '2024-01-14T14:00:08.140306+01:00' ],		#trigger : OmReference [ '157' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Coroutine class',				#isMetaSide : true			},			#name : #'maker:',			#protocol : #'instance creation',			#sourceCode : 'maker: aBlock\r\t"Usage: Coroutine maker: [ :resume :value | . . . ] "\r\t\r\t^ self new makeCoroutineWith: aBlock',			#stamp : 'jjddpp 11/10/2016 10:19',			#package : #Coroutines-CAP2016-17		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '166' ],		#self : OmReference [ '167' ],		#time : DateAndTime [ '2024-01-14T14:00:08.141399+01:00' ],		#trigger : OmReference [ '157' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Coroutine,				#isMetaSide : false			},			#name : #initialize,			#protocol : #'instance creation',			#sourceCode : 'initialize\r\r\tfirstTime := true.\r\tsavedContinuation := nil.\r\tresumer := [ :nextCoroutine :value | \r\t\t\t\t\t\tContinuation callcc: [ :cc | \tsavedContinuation := cc.\r\t\t\t\t\t\t\t\t\t\t\t\t\t      nextCoroutine value: value  ]  ].\r',			#stamp : 'jjddpp 11/16/2016 23:29',			#package : #Coroutines-CAP2016-17		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '167' ],		#self : OmReference [ '168' ],		#time : DateAndTime [ '2024-01-14T14:00:08.14238+01:00' ],		#trigger : OmReference [ '157' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Coroutine,				#isMetaSide : false			},			#name : #'makeCoroutineWith:',			#protocol : #'instance creation',			#sourceCode : 'makeCoroutineWith: aBlock \r\r\ttheBlock := aBlock.',			#stamp : 'jjddpp 11/10/2016 10:15',			#package : #Coroutines-CAP2016-17		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '168' ],		#self : OmReference [ '169' ],		#time : DateAndTime [ '2024-01-14T14:00:08.143244+01:00' ],		#trigger : OmReference [ '157' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Coroutine,				#isMetaSide : false			},			#name : #'value:',			#protocol : #evaluation,			#sourceCode : 'value: aValue\r\r\tfirstTime \tifTrue: [ firstTime := false.\r\t\t\t\t\t\t theBlock value: resumer value: aValue ]\r\t\t \t   \tifFalse: [ savedContinuation value: aValue  ]\r\t\t\t',			#stamp : 'jjddpp 11/10/2016 10:18',			#package : #Coroutines-CAP2016-17		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '169' ],		#self : OmReference [ '170' ],		#time : DateAndTime [ '2024-01-14T14:00:08.144173+01:00' ],		#trigger : OmReference [ '157' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'StableMarriages class',				#isMetaSide : true			},			#name : #'withRandomPreferences:',			#protocol : #'instance creation',			#sourceCode : 'withRandomPreferences: anInteger\r\t"StableMarriages withRandomPreferences: anInteger"\r\t^ (self new) numberOfCouples: anInteger; \r\t\t\t\trandomInitialization.\r\t\t\t\t',			#stamp : 'jjddpp 11/17/2016 00:25',			#package : #Coroutines-CAP2016-17		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '170' ],		#self : OmReference [ '171' ],		#time : DateAndTime [ '2024-01-14T14:00:08.146683+01:00' ],		#trigger : OmReference [ '157' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #StableMarriages,				#isMetaSide : false			},			#name : #'numberOfCouples:',			#protocol : #accessing,			#sourceCode : 'numberOfCouples: anInteger\r\tnumberOfCouples := anInteger\r\t',			#stamp : 'jjddpp 11/15/2016 11:00',			#package : #Coroutines-CAP2016-17		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '171' ],		#self : OmReference [ '172' ],		#time : DateAndTime [ '2024-01-14T14:00:08.148046+01:00' ],		#trigger : OmReference [ '157' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #StableMarriages,				#isMetaSide : false			},			#name : #randomInitialization,			#protocol : #initialization,			#sourceCode : 'randomInitialization\r\t"men and women preferences are initialized at random"\r\t\r\tresult := Array new: numberOfCouples.\r\r\tmen := Array new: numberOfCouples.\r\twomen := Array new: numberOfCouples.\r\r\tnumberOfCouples notNil \r\t\tifTrue: [\r\t\t\tmain := Coroutine maker: [ :resume :value | \r\t\t\t\t\t\t\t\t\t\t\t1 to: numberOfCouples do: [ :i | resume value: (men at: i) value: nil ]]. \r\t\t\t1 to: numberOfCouples do: [ :index | \r\t\t\t\t\tmen at: index put: (Coroutine maker: [ :resume :value | \r\t\t\t\t\t\t\t\t\t\t\t\t\t| prefs |\r\t\t\t\t\t\t\t\t\t\t\t\t\tprefs := (1 to: numberOfCouples) asArray shuffled.\r\t\t\t\t\t\t\t\t\t\t\t\t\t1 to: numberOfCouples do: [ :i | resume value: (women at: (prefs at: i)) value: index] ]).\r\t\t\t\t\twomen at: index put:  (Coroutine maker: [ :resume :value | \r\t\t\t\t\t\t\t\t\t\t\t\t\t| prefs newProposal jilt |\r\t\t\t\t\t\t\t\t\t\t\t\t\tprefs := (1 to: numberOfCouples) asArray shuffled.\r\t\t\t\t\t\t\t\t\t\t\t\t\tresult at: index put: value.\r\t\t\t\t\t\t\t\t\t\t\t\t\tnewProposal := resume value: main value: nil.\r\t\t\t\t\t\t\t\t\t\t\t\t\t[ true ] whileTrue: [\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(prefs at: newProposal) < (prefs at: (result at: index)) \r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ \tjilt := result at: index.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \tresult at: index put: newProposal.\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewProposal := resume value: (men at: jilt) value: nil ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ newProposal := resume value: (men at: newProposal) value: nil ]]])]]',			#stamp : 'jjddpp 11/17/2016 07:43',			#package : #Coroutines-CAP2016-17		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '172' ],		#self : OmReference [ '173' ],		#time : DateAndTime [ '2024-01-14T14:00:08.149057+01:00' ],		#trigger : OmReference [ '157' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #StableMarriages,				#isMetaSide : false			},			#name : #value,			#protocol : #computation,			#sourceCode : 'value\r\r\tmain value: nil.\r\t^ result',			#stamp : 'jjddpp 11/17/2016 00:25',			#package : #Coroutines-CAP2016-17		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T14:00:15.264368+01:00' ],		#prior : OmReference [ '173' ],		#self : OmReference [ '174' ]	},	#content : EpMonticelloVersionSave {		#versionName : 'Practica2018-19-jjddpp.2',		#repositoryDescription : '/home/marc/UPC/CAP/Pharo_Parcial/pharo-local/package-cache'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T14:00:15.332744+01:00' ],		#prior : OmReference [ '174' ],		#self : OmReference [ '175' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'Practica2018-19-jjddpp.2'		]	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '175' ],		#self : OmReference [ '176' ],		#time : DateAndTime [ '2024-01-14T14:00:15.406316+01:00' ],		#trigger : @3	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #TestsPractica\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #TestsPractica,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TestsPractica class\r\tinstanceVariableNames: \'\''				},				#name : #'TestsPractica class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TestsPractica,					#isMetaSide : false				},				#parent : @7,				#content : 'Please comment me ',				#stamp : 'jjddpp 11/6/2018 15:41'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Please comment me ',		#newStamp : 'jjddpp 11/6/2018 15:41'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '176' ],		#self : OmReference [ '177' ],		#time : DateAndTime [ '2024-01-14T14:00:15.407788+01:00' ],		#trigger : OmReference [ '175' ]	},	#content : EpCategoryAddition {		#classCategoryName : #Practica2018-19-tests,		#affectedPackageName : #Practica2018-19	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '177' ],		#self : OmReference [ '178' ],		#time : DateAndTime [ '2024-01-14T14:00:15.443836+01:00' ],		#trigger : OmReference [ '175' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #TestsPractica\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Practica2018-19-tests\''			},			#name : #TestsPractica,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TestsPractica class\r\tinstanceVariableNames: \'\''				},				#name : #'TestsPractica class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TestsPractica,					#isMetaSide : false				},				#parent : @8,				#content : 'Please comment me ',				#stamp : 'jjddpp 11/6/2018 15:41'			},			#classVariables : OrderedCollection [ ],			#category : #Practica2018-19-tests,			#package : #Practica2018-19,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '178' ],		#self : OmReference [ '179' ],		#time : DateAndTime [ '2024-01-14T14:00:15.46362+01:00' ],		#trigger : OmReference [ '175' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #PROG\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #PROG,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PROG class\r\tinstanceVariableNames: \'\''				},				#name : #'PROG class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PROG,					#isMetaSide : false				},				#parent : @8,				#content : 'aVarCollection elements are like #(#s v), with s a symbol and v a value, or #s, only a symbol\r aLabelledBlocksCollection elements are like (#label block)\r a block can have expressions like\r\t a) #s binding\r\t b) #label binding value\r\t c) #RETURN binding value: v\r\t d) #s changeBinding: v\r No symbol #RETURN is allowed among the labels nor the variable symbols\r No #changeBinding message should be sent to any #label ',				#stamp : 'jjddpp 11/7/2018 10:51'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'aVarCollection elements are like #(#s v), with s a symbol and v a value, or #s, only a symbol\r aLabelledBlocksCollection elements are like (#label block)\r a block can have expressions like\r\t a) #s binding\r\t b) #label binding value\r\t c) #RETURN binding value: v\r\t d) #s changeBinding: v\r No symbol #RETURN is allowed among the labels nor the variable symbols\r No #changeBinding message should be sent to any #label ',		#newStamp : 'jjddpp 11/7/2018 10:51'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '179' ],		#self : OmReference [ '180' ],		#time : DateAndTime [ '2024-01-14T14:00:15.464512+01:00' ],		#trigger : OmReference [ '175' ]	},	#content : EpCategoryAddition {		#classCategoryName : #Practica2018-19,		#affectedPackageName : #Practica2018-19	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '180' ],		#self : OmReference [ '181' ],		#time : DateAndTime [ '2024-01-14T14:00:15.466297+01:00' ],		#trigger : OmReference [ '175' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #PROG\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Practica2018-19\''			},			#name : #PROG,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PROG class\r\tinstanceVariableNames: \'\''				},				#name : #'PROG class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PROG,					#isMetaSide : false				},				#parent : @8,				#content : 'aVarCollection elements are like #(#s v), with s a symbol and v a value, or #s, only a symbol\r aLabelledBlocksCollection elements are like (#label block)\r a block can have expressions like\r\t a) #s binding\r\t b) #label binding value\r\t c) #RETURN binding value: v\r\t d) #s changeBinding: v\r No symbol #RETURN is allowed among the labels nor the variable symbols\r No #changeBinding message should be sent to any #label ',				#stamp : 'jjddpp 11/7/2018 10:51'			},			#classVariables : OrderedCollection [ ],			#category : #Practica2018-19,			#package : #Practica2018-19,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '181' ],		#self : OmReference [ '182' ],		#time : DateAndTime [ '2024-01-14T14:00:15.514002+01:00' ],		#trigger : OmReference [ '175' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TestsPractica,				#isMetaSide : false			},			#name : #testEmpty,			#protocol : #tests,			#sourceCode : 'testEmpty\r\t\r\tself assert: nil == (PROG withInit: { } do: {\t}).',			#stamp : 'jjddpp 11/7/2018 10:34',			#package : #Practica2018-19		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '182' ],		#self : OmReference [ '183' ],		#time : DateAndTime [ '2024-01-14T14:00:15.516469+01:00' ],		#trigger : OmReference [ '175' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TestsPractica,				#isMetaSide : false			},			#name : #testIncrement,			#protocol : #tests,			#sourceCode : 'testIncrement\r\t| out |\r\tout := \tPROG withInit: { #n } do:\r\t\t\t\t\t{\t\r\t\t\t\t\t\t{ #label1 . [ #n changeBinding: 0 ] } .\r\t\t\t\t\t\t{ #label2 . [ #n changeBinding: (#n binding + 1) ] } .\r\t\t\t\t\t\t{ #label3 . [ #n changeBinding: (#n binding + 1) ] } .\r\t\t\t\t\t\t{ #label4 . [ #n changeBinding: (#n binding + 1) ] } .\r\t\t\t\t\t\t{ #label5 . [ #n changeBinding: (#n binding + 1) ] } .\r\t\t\t\t\t\t{ #label6 . [ #n changeBinding: (#n binding + 1) ] } .\r\t\t\t\t\t\t{ #label7 . [ #RETURN binding value: #n binding  ] } .\r\t \t\t\t\t}.\r\tself assert: out == 5.',			#stamp : 'jjddpp 1/6/2019 21:06',			#package : #Practica2018-19		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '183' ],		#self : OmReference [ '184' ],		#time : DateAndTime [ '2024-01-14T14:00:15.517849+01:00' ],		#trigger : OmReference [ '175' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TestsPractica,				#isMetaSide : false			},			#name : #testIncrementNoReturn,			#protocol : #tests,			#sourceCode : 'testIncrementNoReturn\r\t| out |\r\tout := \tPROG withInit: { #n } do:\r\t\t\t\t\t{\t\r\t\t\t\t\t\t{ #label1 . [ #n changeBinding: 0 ] } .\r\t\t\t\t\t\t{ #label2 . [ #n changeBinding: (#n binding + 1) ] } .\r\t\t\t\t\t\t{ #label3 . [ #n changeBinding: (#n binding + 1) ] } .\r\t\t\t\t\t\t{ #label4 . [ #n changeBinding: (#n binding + 1) ] } .\r\t\t\t\t\t\t{ #label5 . [ #n changeBinding: (#n binding + 1) ] } .\r\t\t\t\t\t\t{ #label6 . [ #n changeBinding: (#n binding + 1) ] } .\r\t \t\t\t\t}.\r\tself assert: out equals: nil.',			#stamp : 'jjddpp 11/7/2018 10:36',			#package : #Practica2018-19		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '184' ],		#self : OmReference [ '185' ],		#time : DateAndTime [ '2024-01-14T14:00:15.519096+01:00' ],		#trigger : OmReference [ '175' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TestsPractica,				#isMetaSide : false			},			#name : #testSimple,			#protocol : #tests,			#sourceCode : 'testSimple\r\t| n coll |\r\tPROG withInit: { }  do:\r\t\t{    { #label1 . [ n := 10. coll := OrderedCollection new ] } .\r\t\t\t{ #label2 . [ n == 0 ifTrue: [ #RETURN binding value: coll ]  ] } .\r\t\t\t{ #label3 . [ coll add: n ] } .\r\t\t\t{ #label4 . [ n := n-1 ] } .\r\t\t\t{ #label5 . [ #label2 binding value ] }\r\t \t}.\r\tself assert: coll asArray equals: (10 to: 1 by: -1) asArray',			#stamp : 'jjddpp 12/30/2018 09:03',			#package : #Practica2018-19		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '185' ],		#self : OmReference [ '186' ],		#time : DateAndTime [ '2024-01-14T14:00:15.520099+01:00' ],		#trigger : OmReference [ '175' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TestsPractica,				#isMetaSide : false			},			#name : #testSimpleWithVars,			#protocol : #tests,			#sourceCode : 'testSimpleWithVars\r\t| coll |\r\tcoll :=\tPROG withInit: { { #n . 10 } . { #coll . OrderedCollection new } }  do:\r\t\t\t\t\t{\t{ #label2 . [ #n binding == 0 ifTrue: [ #RETURN binding value: #coll binding ]  ] } .\r\t\t\t\t\t\t{ #label3 . [ #coll changeBinding: ((#coll binding) add: #n binding; yourself) ] } .\r\t\t\t\t\t\t{ #label4 . [ #n changeBinding: (#n binding - 1) ] } .\r\t\t\t\t\t\t{ #label5 . [ #label2 binding value ] }\r\t \t\t\t\t}.\r\tself assert: coll asArray equals: (10 to: 1 by: -1) asArray\r\t',			#stamp : 'jjddpp 11/7/2018 10:31',			#package : #Practica2018-19		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '186' ],		#self : OmReference [ '187' ],		#time : DateAndTime [ '2024-01-14T14:00:15.521218+01:00' ],		#trigger : OmReference [ '175' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TestsPractica,				#isMetaSide : false			},			#name : #testSimpleWithVars2,			#protocol : #tests,			#sourceCode : 'testSimpleWithVars2\r\t| coll |\r\tcoll :=\tPROG withInit: { { #n . 10 } . #s . { #coll . OrderedCollection new } }  do:\r\t\t\t\t\t{\t{ #label2 . [ #n binding == 0 ifTrue: [ #s changeBinding: #coll binding. \r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   #RETURN binding value: #s binding ]  ] } .\r\t\t\t\t\t\t{ #label3 . [ #coll changeBinding: ((#coll binding) add: #n binding; yourself) ] } .\r\t\t\t\t\t\t{ #label4 . [ #n changeBinding: (#n binding - 1) ] } .\r\t\t\t\t\t\t{ #label5 . [ #label2 binding value ] }\r\t \t\t\t\t}.\r\tself assert: coll asArray equals: (10 to: 1 by: -1) asArray',			#stamp : 'jjddpp 12/30/2018 09:03',			#package : #Practica2018-19		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '187' ],		#self : OmReference [ '188' ],		#time : DateAndTime [ '2024-01-14T14:00:15.522754+01:00' ],		#trigger : OmReference [ '175' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BlockClosure,				#isMetaSide : false			},			#name : #'asLabelledBlock:',			#protocol : #'*Practica2018-19',			#sourceCode : 'asLabelledBlock: aLabelledBlocksCollection\r\t| retblock nxt |\r\taLabelledBlocksCollection isEmpty \r\t\tifTrue: [\r\t\t\tretblock := [ self value. #RETURN binding value: nil ]]\r\t\tifFalse: [ \r\t\t\tnxt := aLabelledBlocksCollection first.\r\t\t\tretblock := [ self value. (nxt at: 1) binding value ] ].\r\t^ retblock\r\t\t',			#stamp : 'jjddpp 11/6/2018 12:52',			#package : #Practica2018-19		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '188' ],		#self : OmReference [ '189' ],		#time : DateAndTime [ '2024-01-14T14:00:15.526841+01:00' ],		#trigger : OmReference [ '175' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Symbol,				#isMetaSide : false			},			#name : #'changeBinding:',			#protocol : #'*Practica2018-19',			#sourceCode : 'changeBinding: aValue\r\t| context |\r\tcontext := thisContext.\r\t[ context = nil ] whileFalse:\r\t\t[   ((context receiver isMemberOf: Binding)\r\t\t\t\tand: [ context selector = #of:to:in:\r\t\t\t\t\tand: [context receiver key = self]])\r\t\t\t\tifTrue: [ (context receiver) value: aValue. ^ aValue ]\r\t\t\t\tifFalse: [context := context sender]\r\t\t].\r\tself error: \'No binding for \', self asString.',			#stamp : 'jjddpp 10/28/2020 10:08',			#package : #Practica2018-19		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '189' ],		#self : OmReference [ '190' ],		#time : DateAndTime [ '2024-01-14T14:00:15.527964+01:00' ],		#trigger : OmReference [ '175' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PROG class',				#isMetaSide : true			},			#name : #'buildBlockWith:and:and:',			#protocol : #private,			#sourceCode : 'buildBlockWith: aVarCollection and: aLabelledBlocksCollection and: start\r\t| retblock element tempBlock rest |\r\taLabelledBlocksCollection isEmpty\r\t\tifTrue:  [ retblock := [ start binding value ] ]\r\t\tifFalse: [ \r\t\t\t\taVarCollection isNotEmpty \r\t\t\t\tifTrue: [ \r\t\t\t\t\telement := aVarCollection first.\r\t\t\t\t\telement isSymbol ifTrue: [ element := Array with: element with: nil ].\r\t\t\t\t\trest := aVarCollection allButFirst.\r\t\t\t\t\ttempBlock := self \tbuildBlockWith: rest \r\t\t\t\t\t\t\t\t\t\t\tand: aLabelledBlocksCollection \r\t\t\t\t\t\t\t\t\t\t\tand: start. \r\t\t\t\t\tretblock := [ (element at: 1) bindTo: (element at: 2) in: tempBlock ] ]\r\t\t\t\tifFalse:[ \r\t\t\t\t\telement := aLabelledBlocksCollection first.\r\t\t\t\t\trest := aLabelledBlocksCollection allButFirst.\r\t\t\t\t\ttempBlock := self \tbuildBlockWith: aVarCollection\r\t\t\t\t\t\t\t\t\t\t\tand: rest \r\t\t\t\t\t\t\t\t\t\t\tand: start.\r\t\t\t\t\tretblock := [ (element at: 1) bindTo: ((element at: 2) asLabelledBlock: rest) in: tempBlock ]]].\t\t\t\t\t\t\r\t^ retblock \r',			#stamp : 'jjddpp 12/30/2018 09:02',			#package : #Practica2018-19		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '190' ],		#self : OmReference [ '191' ],		#time : DateAndTime [ '2024-01-14T14:00:15.529201+01:00' ],		#trigger : OmReference [ '175' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'PROG class',				#isMetaSide : true			},			#name : #'withInit:do:',			#protocol : #evaluation,			#sourceCode : 'withInit: aVarCollection do: aLabelledBlocksCollection\r\t\r\t ^ aLabelledBlocksCollection isNotEmpty \r\t\t\tifTrue: [ Continuation callcc: [ :ret | \r\t\t\t\t\t\t\t| bll |\r\t\t\t\t\t\t\tbll := (self buildBlockWith: aVarCollection \r\t\t\t\t\t\t\t\t\t\t\tand: aLabelledBlocksCollection\r\t\t\t\t\t\t\t\t\t\t\tand: ((aLabelledBlocksCollection first) at: 1)).\r\t\t\t\t\t\t\t#RETURN bindTo: [ :val | ret value: val ] in: bll ]]\r\t\t\tifFalse: [ nil ]\t\t\t\t\t\t\r\t\t\t\t\t',			#stamp : 'jjddpp 1/9/2019 19:28',			#package : #Practica2018-19		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T14:01:02.020682+01:00' ],		#prior : OmReference [ '191' ],		#self : OmReference [ '192' ]	},	#content : EpCategoryAddition {		#classCategoryName : #Practica-CAP-2020,		#affectedPackageName : #Practica-CAP-2020	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T14:01:02.05369+01:00' ],		#prior : OmReference [ '192' ],		#self : OmReference [ '193' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #NQueens\r\tinstanceVariableNames: \'n state\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Practica-CAP-2020\''			},			#name : #NQueens,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NQueens,						#isMetaSide : false					},					#name : #n,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NQueens,						#isMetaSide : false					},					#name : #state,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NQueens class\r\tinstanceVariableNames: \'\''				},				#name : #'NQueens class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NQueens,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Practica-CAP-2020,			#package : #Practica-CAP-2020,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T14:01:02.056895+01:00' ],		#prior : OmReference [ '193' ],		#self : OmReference [ '194' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #NQueens\r\tinstanceVariableNames: \'n state\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Practica-CAP-2020\''			},			#name : #NQueens,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NQueens,						#isMetaSide : false					},					#name : #n,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NQueens,						#isMetaSide : false					},					#name : #state,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NQueens class\r\tinstanceVariableNames: \'\''				},				#name : #'NQueens class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NQueens,					#isMetaSide : false				},				#parent : @7,				#content : 'Exemple de l\'ús de BT per resoldre el problema de les N-reines.\r\rEs crea una instància amb \'NQueens with: N\', i amb aquest objecte pots resoldre el problema de les N reines per un tauler NxN\r\rAtributs:\r\tn -> guarda la mida del tauler (el tauler és n x n).\r\tstate -> guarda la posició de les reines\r\t\r\'solve\' troba una solució\r\r\'solveAll\' les troba totes\r\r\'valid\' mira si l\'estat del tauler és vàlid o no',				#stamp : 'jjddpp 11/18/2020 07:54'			},			#classVariables : OrderedCollection [ ],			#category : #Practica-CAP-2020,			#package : #Practica-CAP-2020,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Exemple de l\'ús de BT per resoldre el problema de les N-reines.\r\rEs crea una instància amb \'NQueens with: N\', i amb aquest objecte pots resoldre el problema de les N reines per un tauler NxN\r\rAtributs:\r\tn -> guarda la mida del tauler (el tauler és n x n).\r\tstate -> guarda la posició de les reines\r\t\r\'solve\' troba una solució\r\r\'solveAll\' les troba totes\r\r\'valid\' mira si l\'estat del tauler és vàlid o no',		#newStamp : 'jjddpp 11/18/2020 07:54'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T14:01:02.065513+01:00' ],		#prior : OmReference [ '194' ],		#self : OmReference [ '195' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NQueens,				#isMetaSide : false			},			#name : #valid,			#protocol : #auxiliar,			#sourceCode : 'valid\r\t"Indicates if the current configuration with n queens is legal"\r\r\t| chk |\r\t\r\t1 to: n do: [ :i |\r\t\t(i+1) to: n do: [ :j |\r\t\t\t\tchk := (((state at: i) = (state at: j)) or: \r\t\t\t\t\t\t[((state at: i) - i) = ((state at: j) - j)]) or: \r\t\t\t\t\t\t[((state at: i) + i) = ((state at: j) + j)].\r\t\t\t\tchk ifTrue: [ ^ false ]\r\t\t\t ] ].\r\t^ true\r',			#stamp : 'jjddpp 11/18/2020 08:07',			#package : #Practica-CAP-2020		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T14:01:02.070322+01:00' ],		#prior : OmReference [ '195' ],		#self : OmReference [ '196' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NQueens,				#isMetaSide : false			},			#name : #'valid:',			#protocol : #auxiliar,			#sourceCode : 'valid: aNumber\r\t"Indicates if the configuration with queens 1..aNumber is legal\r\tknowing that the configuration with queens 1..aNumber − 1 is."\r\t\r\t| i chk |\r\t\r\ti := aNumber.\r\t1 to: (i-1) do: [ :k |\r\t\t\tchk := (((state at: k) = (state at: i)) or: \r\t\t\t\t\t[((state at: k) - k) = ((state at: i) - i)]) or: \r\t\t\t\t\t[((state at: k) + k) = ((state at: i) + i)].\r\t\t\tchk ifTrue: [ ^ false ]\r\t\t ].\r\t^ true\r\t',			#stamp : 'jjddpp 11/18/2020 08:07',			#package : #Practica-CAP-2020		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T14:01:02.073346+01:00' ],		#prior : OmReference [ '196' ],		#self : OmReference [ '197' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NQueens,				#isMetaSide : false			},			#name : #'with:',			#protocol : #initialization,			#sourceCode : 'with: aNumber\r\tn := aNumber.\r\tstate := (1 to: n) asArray.',			#stamp : 'jjddpp 11/10/2020 18:22',			#package : #Practica-CAP-2020		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T14:01:02.07907+01:00' ],		#prior : OmReference [ '197' ],		#self : OmReference [ '198' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NQueens,				#isMetaSide : false			},			#name : #efficientSolveAll,			#protocol : #Core,			#sourceCode : 'efficientSolveAll\r\r\t^ Continuation callcc: [ :cc |\r\r\t\t\t| bt range solutions |\r\t\r\t\t\tsolutions := OrderedCollection new.\r\t\t\tbt := BT with: [ cc value: solutions ].\r\t\t\trange := (1 to: n) asArray.\r\t\t\r\t\t\t1 to: n do: [ :i |\r\t\t\t\tstate at: i put: (bt try: range).\r\t\t\t\tbt assert: (self valid: i)].\r\t\r\t\t\tsolutions add: state shallowCopy.\r\t\r\t\t\tbt next.   ]\r\t\t',			#stamp : 'jjddpp 11/18/2020 08:11',			#package : #Practica-CAP-2020		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T14:01:02.082087+01:00' ],		#prior : OmReference [ '198' ],		#self : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NQueens,				#isMetaSide : false			},			#name : #solve,			#protocol : #Core,			#sourceCode : 'solve\r\t| bt range |\r\t\r\tbt := BT new.\r\trange := (1 to: n) asArray.\r\t\r\t1 to: n do: [ :i |\r\t\tstate at: i put: (bt try: range) ].\r\t\r\tbt assert: (self valid).\r\t\r\t^ state \r\t\r\r\t\r',			#stamp : 'jjddpp 11/18/2020 07:56',			#package : #Practica-CAP-2020		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T14:01:02.085202+01:00' ],		#prior : OmReference [ '199' ],		#self : OmReference [ '200' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NQueens,				#isMetaSide : false			},			#name : #solveAll,			#protocol : #Core,			#sourceCode : 'solveAll\r\r\t^ Continuation callcc: [ :cc |\r\r\t\t\t| bt range solutions |\r\t\r\t\t\tsolutions := OrderedCollection new.\r\t\t\tbt := BT with: [ cc value: solutions ].\r\t\t\trange := (1 to: n) asArray.\r\t\t\r\t\t\t1 to: n do: [ :i |\r\t\t\t\tstate at: i put: (bt try: range) ].\r\t\r\t\t\tbt assert: (self valid).\r\t\r\t\t\tsolutions add: state shallowCopy.\r\t\r\t\t\tbt next.   ]\r\t\t',			#stamp : 'jjddpp 11/18/2020 07:57',			#package : #Practica-CAP-2020		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T14:01:02.089743+01:00' ],		#prior : OmReference [ '200' ],		#self : OmReference [ '201' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NQueens,				#isMetaSide : false			},			#name : #efficientSolve,			#protocol : #Core,			#sourceCode : 'efficientSolve\r\r\t| bt range |\r\t\r\tbt := BT new.\r\trange := (1 to: n) asArray.\r\t\r\t1 to: n do: [ :i |\r\t\tstate at: i put: (bt try: range).\r\t\tbt assert: (self valid: i)].\r\t\r\t^ state \r\t\r\r\t\r',			#stamp : 'jjddpp 11/18/2020 08:08',			#package : #Practica-CAP-2020		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T14:01:02.094501+01:00' ],		#prior : OmReference [ '201' ],		#self : OmReference [ '202' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'NQueens class',				#isMetaSide : true			},			#name : #'with:',			#protocol : #'instance creation',			#sourceCode : 'with: n\r\t^self new with: n',			#stamp : 'jjddpp 11/10/2020 17:59',			#package : #Practica-CAP-2020		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T14:01:43.396498+01:00' ],		#prior : OmReference [ '202' ],		#self : OmReference [ '203' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #BT\r\tinstanceVariableNames: \'continuationQueue\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Practica-CAP-2020\''			},			#name : #BT,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #BT,						#isMetaSide : false					},					#name : #continuationQueue,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BT class\r\tinstanceVariableNames: \'\''				},				#name : #'BT class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BT,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Practica-CAP-2020,			#package : #Practica-CAP-2020,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T14:01:43.40354+01:00' ],		#prior : OmReference [ '203' ],		#self : OmReference [ '204' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #BT\r\tinstanceVariableNames: \'continuationQueue\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Practica-CAP-2020\''			},			#name : #BT,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #BT,						#isMetaSide : false					},					#name : #continuationQueue,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BT class\r\tinstanceVariableNames: \'\''				},				#name : #'BT class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BT,					#isMetaSide : false				},				#parent : @7,				#content : 'Classe que implementa els mecanismes per fer BackTracking tradicional, dins la pràctica de GRAU-CAP 2020-21.\r\rTeniu diversos exemples del seu ús  a l\'enunciat i a la classe NQueens',				#stamp : 'jjddpp 11/18/2020 07:50'			},			#classVariables : OrderedCollection [ ],			#category : #Practica-CAP-2020,			#package : #Practica-CAP-2020,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Classe que implementa els mecanismes per fer BackTracking tradicional, dins la pràctica de GRAU-CAP 2020-21.\r\rTeniu diversos exemples del seu ús  a l\'enunciat i a la classe NQueens',		#newStamp : 'jjddpp 11/18/2020 07:50'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T14:01:43.409606+01:00' ],		#prior : OmReference [ '204' ],		#self : OmReference [ '205' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BT,				#isMetaSide : false			},			#name : #'with:',			#protocol : #core,			#sourceCode : 'with: finalBlock\r\r\t"continuationQueue := OrderedCollection with: [AMBError new signal: \'AMB tree exhausted\']."\r\tcontinuationQueue := OrderedCollection with: finalBlock.',			#stamp : 'jjddpp 11/18/2020 07:42',			#package : #Practica-CAP-2020		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T14:01:43.417145+01:00' ],		#prior : OmReference [ '205' ],		#self : OmReference [ '206' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BT,				#isMetaSide : false			},			#name : #'try:',			#protocol : #core,			#sourceCode : 'try: aCollection\r\t| prev | \r\tprev := continuationQueue removeFirst.\r\t^ Continuation callcc: [:c | \r\t\t\taCollection do: [:alt |\tContinuation callcc: [:calt | \r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontinuationQueue addLast:  [ calt value: #nil ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tc value: alt]].\r\t\t\t^ prev value  ]',			#stamp : 'jjddpp 11/18/2020 07:42',			#package : #Practica-CAP-2020		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T14:01:43.421327+01:00' ],		#prior : OmReference [ '206' ],		#self : OmReference [ '207' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BT,				#isMetaSide : false			},			#name : #next,			#protocol : #core,			#sourceCode : 'next\r\r\t^ self try: #()',			#stamp : 'jjddpp 11/18/2020 07:42',			#package : #Practica-CAP-2020		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T14:01:43.428081+01:00' ],		#prior : OmReference [ '207' ],		#self : OmReference [ '208' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BT,				#isMetaSide : false			},			#name : #initialize,			#protocol : #core,			#sourceCode : 'initialize\r\r\t"continuationQueue := OrderedCollection with: [AMBError new signal: \'AMB tree exhausted\']."\r\tcontinuationQueue := OrderedCollection with: [ nil ].',			#stamp : 'jjddpp 11/18/2020 07:42',			#package : #Practica-CAP-2020		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T14:01:43.433705+01:00' ],		#prior : OmReference [ '208' ],		#self : OmReference [ '209' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BT,				#isMetaSide : false			},			#name : #'assert:',			#protocol : #core,			#sourceCode : 'assert: aBoolean\r\r\taBoolean ifFalse: [self next]',			#stamp : 'jjddpp 11/18/2020 07:42',			#package : #Practica-CAP-2020		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T14:01:43.441128+01:00' ],		#prior : OmReference [ '209' ],		#self : OmReference [ '210' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'BT class',				#isMetaSide : true			},			#name : #'with:',			#protocol : #'instance creation',			#sourceCode : 'with: finalBlock\r\t^ (self new) with: finalBlock',			#stamp : 'jjddpp 11/18/2020 07:42',			#package : #Practica-CAP-2020		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T14:01:44.483108+01:00' ],		#prior : OmReference [ '210' ],		#self : OmReference [ '211' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #BT\r\tinstanceVariableNames: \'continuationQueue\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Practica-CAP-2020\''			},			#name : #BT,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #BT,						#isMetaSide : false					},					#name : #continuationQueue,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BT class\r\tinstanceVariableNames: \'\''				},				#name : #'BT class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BT,					#isMetaSide : false				},				#parent : @7,				#content : 'Classe que implementa els mecanismes per fer BackTracking tradicional, dins la pràctica de GRAU-CAP 2020-21.\r\rCal completar el mètode  \'try:\'\r\rTeniu diversos exemples del seu ús  a l\'enunciat',				#stamp : 'jjddpp 11/18/2020 20:28'			},			#classVariables : OrderedCollection [ ],			#category : #Practica-CAP-2020,			#package : #Practica-CAP-2020,			#sharedPools : OrderedCollection [ ]		},		#oldComment : 'Classe que implementa els mecanismes per fer BackTracking tradicional, dins la pràctica de GRAU-CAP 2020-21.\r\rTeniu diversos exemples del seu ús  a l\'enunciat i a la classe NQueens',		#newComment : 'Classe que implementa els mecanismes per fer BackTracking tradicional, dins la pràctica de GRAU-CAP 2020-21.\r\rCal completar el mètode  \'try:\'\r\rTeniu diversos exemples del seu ús  a l\'enunciat',		#oldStamp : 'jjddpp 11/18/2020 07:50',		#newStamp : 'jjddpp 11/18/2020 20:28'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T14:01:44.487295+01:00' ],		#prior : OmReference [ '211' ],		#self : OmReference [ '212' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BT,				#isMetaSide : false			},			#name : #'try:',			#protocol : #core,			#sourceCode : 'try: aCollection\r\t| prev | \r\tprev := continuationQueue removeFirst.\r\t^ Continuation callcc: [:c | \r\t\t\taCollection do: [:alt |\tContinuation callcc: [:calt | \r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontinuationQueue addLast:  [ calt value: #nil ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tc value: alt]].\r\t\t\t^ prev value  ]',			#stamp : 'jjddpp 11/18/2020 07:42',			#package : #Practica-CAP-2020		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BT,				#isMetaSide : false			},			#name : #'try:',			#protocol : #core,			#sourceCode : 'try: aCollection\r\r',			#stamp : 'jjddpp 11/18/2020 20:12',			#package : #Practica-CAP-2020		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T14:01:44.490871+01:00' ],		#prior : OmReference [ '212' ],		#self : OmReference [ '213' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BT,				#isMetaSide : false			},			#name : #'with:',			#protocol : #core,			#sourceCode : 'with: finalBlock\r\r\t"continuationQueue := OrderedCollection with: [AMBError new signal: \'AMB tree exhausted\']."\r\tcontinuationQueue := OrderedCollection with: finalBlock.',			#stamp : 'jjddpp 11/18/2020 07:42',			#package : #Practica-CAP-2020		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BT,				#isMetaSide : false			},			#name : #'with:',			#protocol : #core,			#sourceCode : 'with: finalBlock\r\r\tcontinuationQueue := OrderedCollection with: finalBlock.',			#stamp : 'jjddpp 11/18/2020 08:28',			#package : #Practica-CAP-2020		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T14:01:44.500107+01:00' ],		#prior : OmReference [ '213' ],		#self : OmReference [ '214' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BT,				#isMetaSide : false			},			#name : #initialize,			#protocol : #core,			#sourceCode : 'initialize\r\r\t"continuationQueue := OrderedCollection with: [AMBError new signal: \'AMB tree exhausted\']."\r\tcontinuationQueue := OrderedCollection with: [ nil ].',			#stamp : 'jjddpp 11/18/2020 07:42',			#package : #Practica-CAP-2020		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BT,				#isMetaSide : false			},			#name : #initialize,			#protocol : #core,			#sourceCode : 'initialize\r\r\tcontinuationQueue := OrderedCollection with: [ nil ].',			#stamp : 'jjddpp 11/18/2020 08:28',			#package : #Practica-CAP-2020		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T14:01:59.37737+01:00' ],		#prior : OmReference [ '214' ],		#self : OmReference [ '215' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #BT\r\tinstanceVariableNames: \'continuationQueue\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Practica-CAP-2020\''			},			#name : #BT,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #BT,						#isMetaSide : false					},					#name : #continuationQueue,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BT class\r\tinstanceVariableNames: \'\''				},				#name : #'BT class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BT,					#isMetaSide : false				},				#parent : @7,				#content : 'Classe que implementa els mecanismes per fer BackTracking tradicional, dins la pràctica de GRAU-CAP 2020-21.\r\rTeniu diversos exemples del seu ús  a l\'enunciat i a la classe NQueens',				#stamp : 'jjddpp 11/18/2020 07:50'			},			#classVariables : OrderedCollection [ ],			#category : #Practica-CAP-2020,			#package : #Practica-CAP-2020,			#sharedPools : OrderedCollection [ ]		},		#oldComment : 'Classe que implementa els mecanismes per fer BackTracking tradicional, dins la pràctica de GRAU-CAP 2020-21.\r\rCal completar el mètode  \'try:\'\r\rTeniu diversos exemples del seu ús  a l\'enunciat',		#newComment : 'Classe que implementa els mecanismes per fer BackTracking tradicional, dins la pràctica de GRAU-CAP 2020-21.\r\rTeniu diversos exemples del seu ús  a l\'enunciat i a la classe NQueens',		#oldStamp : 'jjddpp 11/18/2020 20:28',		#newStamp : 'jjddpp 11/18/2020 07:50'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T14:01:59.38307+01:00' ],		#prior : OmReference [ '215' ],		#self : OmReference [ '216' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BT,				#isMetaSide : false			},			#name : #'with:',			#protocol : #core,			#sourceCode : 'with: finalBlock\r\r\tcontinuationQueue := OrderedCollection with: finalBlock.',			#stamp : 'jjddpp 11/18/2020 08:28',			#package : #Practica-CAP-2020		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BT,				#isMetaSide : false			},			#name : #'with:',			#protocol : #core,			#sourceCode : 'with: finalBlock\r\r\t"continuationQueue := OrderedCollection with: [AMBError new signal: \'AMB tree exhausted\']."\r\tcontinuationQueue := OrderedCollection with: finalBlock.',			#stamp : 'jjddpp 11/18/2020 07:42',			#package : #Practica-CAP-2020		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T14:01:59.388633+01:00' ],		#prior : OmReference [ '216' ],		#self : OmReference [ '217' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BT,				#isMetaSide : false			},			#name : #'try:',			#protocol : #core,			#sourceCode : 'try: aCollection\r\r',			#stamp : 'jjddpp 11/18/2020 20:12',			#package : #Practica-CAP-2020		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BT,				#isMetaSide : false			},			#name : #'try:',			#protocol : #core,			#sourceCode : 'try: aCollection\r\t| prev | \r\tprev := continuationQueue removeFirst.\r\t^ Continuation callcc: [:c | \r\t\t\taCollection do: [:alt |\tContinuation callcc: [:calt | \r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontinuationQueue addLast:  [ calt value: #nil ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tc value: alt]].\r\t\t\t^ prev value  ]',			#stamp : 'jjddpp 11/18/2020 07:42',			#package : #Practica-CAP-2020		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T14:01:59.395293+01:00' ],		#prior : OmReference [ '217' ],		#self : OmReference [ '218' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BT,				#isMetaSide : false			},			#name : #initialize,			#protocol : #core,			#sourceCode : 'initialize\r\r\tcontinuationQueue := OrderedCollection with: [ nil ].',			#stamp : 'jjddpp 11/18/2020 08:28',			#package : #Practica-CAP-2020		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BT,				#isMetaSide : false			},			#name : #initialize,			#protocol : #core,			#sourceCode : 'initialize\r\r\t"continuationQueue := OrderedCollection with: [AMBError new signal: \'AMB tree exhausted\']."\r\tcontinuationQueue := OrderedCollection with: [ nil ].',			#stamp : 'jjddpp 11/18/2020 07:42',			#package : #Practica-CAP-2020		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T14:02:00.4935+01:00' ],		#prior : OmReference [ '218' ],		#self : OmReference [ '219' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #BT\r\tinstanceVariableNames: \'continuationQueue\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Practica-CAP-2020\''			},			#name : #BT,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #BT,						#isMetaSide : false					},					#name : #continuationQueue,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BT class\r\tinstanceVariableNames: \'\''				},				#name : #'BT class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BT,					#isMetaSide : false				},				#parent : @7,				#content : 'Classe que implementa els mecanismes per fer BackTracking tradicional, dins la pràctica de GRAU-CAP 2020-21.\r\rCal completar el mètode  \'try:\'\r\rTeniu diversos exemples del seu ús  a l\'enunciat',				#stamp : 'jjddpp 11/18/2020 20:28'			},			#classVariables : OrderedCollection [ ],			#category : #Practica-CAP-2020,			#package : #Practica-CAP-2020,			#sharedPools : OrderedCollection [ ]		},		#oldComment : 'Classe que implementa els mecanismes per fer BackTracking tradicional, dins la pràctica de GRAU-CAP 2020-21.\r\rTeniu diversos exemples del seu ús  a l\'enunciat i a la classe NQueens',		#newComment : 'Classe que implementa els mecanismes per fer BackTracking tradicional, dins la pràctica de GRAU-CAP 2020-21.\r\rCal completar el mètode  \'try:\'\r\rTeniu diversos exemples del seu ús  a l\'enunciat',		#oldStamp : 'jjddpp 11/18/2020 07:50',		#newStamp : 'jjddpp 11/18/2020 20:28'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T14:02:00.49777+01:00' ],		#prior : OmReference [ '219' ],		#self : OmReference [ '220' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BT,				#isMetaSide : false			},			#name : #'try:',			#protocol : #core,			#sourceCode : 'try: aCollection\r\t| prev | \r\tprev := continuationQueue removeFirst.\r\t^ Continuation callcc: [:c | \r\t\t\taCollection do: [:alt |\tContinuation callcc: [:calt | \r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontinuationQueue addLast:  [ calt value: #nil ].\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tc value: alt]].\r\t\t\t^ prev value  ]',			#stamp : 'jjddpp 11/18/2020 07:42',			#package : #Practica-CAP-2020		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BT,				#isMetaSide : false			},			#name : #'try:',			#protocol : #core,			#sourceCode : 'try: aCollection\r\r',			#stamp : 'jjddpp 11/18/2020 20:12',			#package : #Practica-CAP-2020		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T14:02:00.501853+01:00' ],		#prior : OmReference [ '220' ],		#self : OmReference [ '221' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BT,				#isMetaSide : false			},			#name : #'with:',			#protocol : #core,			#sourceCode : 'with: finalBlock\r\r\t"continuationQueue := OrderedCollection with: [AMBError new signal: \'AMB tree exhausted\']."\r\tcontinuationQueue := OrderedCollection with: finalBlock.',			#stamp : 'jjddpp 11/18/2020 07:42',			#package : #Practica-CAP-2020		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BT,				#isMetaSide : false			},			#name : #'with:',			#protocol : #core,			#sourceCode : 'with: finalBlock\r\r\tcontinuationQueue := OrderedCollection with: finalBlock.',			#stamp : 'jjddpp 11/18/2020 08:28',			#package : #Practica-CAP-2020		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T14:02:00.511117+01:00' ],		#prior : OmReference [ '221' ],		#self : OmReference [ '222' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BT,				#isMetaSide : false			},			#name : #initialize,			#protocol : #core,			#sourceCode : 'initialize\r\r\t"continuationQueue := OrderedCollection with: [AMBError new signal: \'AMB tree exhausted\']."\r\tcontinuationQueue := OrderedCollection with: [ nil ].',			#stamp : 'jjddpp 11/18/2020 07:42',			#package : #Practica-CAP-2020		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BT,				#isMetaSide : false			},			#name : #initialize,			#protocol : #core,			#sourceCode : 'initialize\r\r\tcontinuationQueue := OrderedCollection with: [ nil ].',			#stamp : 'jjddpp 11/18/2020 08:28',			#package : #Practica-CAP-2020		}	}}