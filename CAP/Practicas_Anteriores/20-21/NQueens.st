'From Pharo6.0 of 13 May 2016 [Latest update: #60547] on 18 November 2020 at 8:25:35.918594 am'!Object subclass: #NQueens	instanceVariableNames: 'n state'	classVariableNames: ''	poolDictionaries: ''	category: 'Practica-CAP-2020'!!NQueens commentStamp: 'jjddpp 11/18/2020 07:54' prior: 0!Exemple de l'ús de BT per resoldre el problema de les N-reines.Es crea una instància amb 'NQueens with: N', i amb aquest objecte pots resoldre el problema de les N reines per un tauler NxNAtributs:	n -> guarda la mida del tauler (el tauler és n x n).	state -> guarda la posició de les reines	'solve' troba una solució'solveAll' les troba totes'valid' mira si l'estat del tauler és vàlid o no!!NQueens methodsFor: 'auxiliar' stamp: 'jjddpp 11/18/2020 08:07'!valid	"Indicates if the current configuration with n queens is legal"	| chk |		1 to: n do: [ :i |		(i+1) to: n do: [ :j |				chk := (((state at: i) = (state at: j)) or: 						[((state at: i) - i) = ((state at: j) - j)]) or: 						[((state at: i) + i) = ((state at: j) + j)].				chk ifTrue: [ ^ false ]			 ] ].	^ true! !!NQueens methodsFor: 'auxiliar' stamp: 'jjddpp 11/18/2020 08:07'!valid: aNumber	"Indicates if the configuration with queens 1..aNumber is legal	knowing that the configuration with queens 1..aNumber − 1 is."		| i chk |		i := aNumber.	1 to: (i-1) do: [ :k |			chk := (((state at: k) = (state at: i)) or: 					[((state at: k) - k) = ((state at: i) - i)]) or: 					[((state at: k) + k) = ((state at: i) + i)].			chk ifTrue: [ ^ false ]		 ].	^ true	! !!NQueens methodsFor: 'initialization' stamp: 'jjddpp 11/10/2020 18:22'!with: aNumber	n := aNumber.	state := (1 to: n) asArray.! !!NQueens methodsFor: 'Core' stamp: 'jjddpp 11/18/2020 08:11'!efficientSolveAll	^ Continuation callcc: [ :cc |			| bt range solutions |				solutions := OrderedCollection new.			bt := BT with: [ cc value: solutions ].			range := (1 to: n) asArray.					1 to: n do: [ :i |				state at: i put: (bt try: range).				bt assert: (self valid: i)].				solutions add: state shallowCopy.				bt next.   ]		! !!NQueens methodsFor: 'Core' stamp: 'jjddpp 11/18/2020 07:56'!solve	| bt range |		bt := BT new.	range := (1 to: n) asArray.		1 to: n do: [ :i |		state at: i put: (bt try: range) ].		bt assert: (self valid).		^ state 		! !!NQueens methodsFor: 'Core' stamp: 'jjddpp 11/18/2020 07:57'!solveAll	^ Continuation callcc: [ :cc |			| bt range solutions |				solutions := OrderedCollection new.			bt := BT with: [ cc value: solutions ].			range := (1 to: n) asArray.					1 to: n do: [ :i |				state at: i put: (bt try: range) ].				bt assert: (self valid).				solutions add: state shallowCopy.				bt next.   ]		! !!NQueens methodsFor: 'Core' stamp: 'jjddpp 11/18/2020 08:08'!efficientSolve	| bt range |		bt := BT new.	range := (1 to: n) asArray.		1 to: n do: [ :i |		state at: i put: (bt try: range).		bt assert: (self valid: i)].		^ state 		! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!NQueens class	instanceVariableNames: ''!!NQueens class methodsFor: 'instance creation' stamp: 'jjddpp 11/10/2020 17:59'!with: n	^self new with: n! !