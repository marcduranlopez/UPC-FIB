OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:38:02.333742+01:00' ],		#prior : OmReference [ 'Pharo.f0szdbm6wbnd8zof9pges9df3', '49' ],		#self : OmReference [ '1' ]	},	#content : EpMonticelloVersionSave {		#versionName : 'ProblemesCAP2023-jjddpp.2',		#repositoryDescription : '/home/marc/UPC/CAP/Pharo_Parcial/pharo-local/package-cache'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:38:02.452782+01:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'ProblemesCAP2023-jjddpp.2'		]	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ],		#time : DateAndTime [ '2024-01-14T00:38:02.501898+01:00' ],		#trigger : @3	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #CuaAmbPrioritat\r\tinstanceVariableNames: \'vector\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #CuaAmbPrioritat,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CuaAmbPrioritat,						#isMetaSide : false					},					#name : #vector,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CuaAmbPrioritat class\r\tinstanceVariableNames: \'\''				},				#name : #'CuaAmbPrioritat class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CuaAmbPrioritat,					#isMetaSide : false				},				#parent : @7,				#content : 'A CuaAmbPrioritat is xxx\r\rInstance Variables\r\tvector:\t\t<Object>\r\rvector\r\t- xxxxx\r',				#stamp : 'jjddpp 9/30/2016 14:38'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'A CuaAmbPrioritat is xxx\r\rInstance Variables\r\tvector:\t\t<Object>\r\rvector\r\t- xxxxx\r',		#newStamp : 'jjddpp 9/30/2016 14:38'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ],		#time : DateAndTime [ '2024-01-14T00:38:02.503184+01:00' ],		#trigger : OmReference [ '2' ]	},	#content : EpCategoryAddition {		#classCategoryName : #ProblemesCAP2023,		#affectedPackageName : #ProblemesCAP2023	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ],		#time : DateAndTime [ '2024-01-14T00:38:02.544609+01:00' ],		#trigger : OmReference [ '2' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #CuaAmbPrioritat\r\tinstanceVariableNames: \'vector\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'ProblemesCAP2023\''			},			#name : #CuaAmbPrioritat,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CuaAmbPrioritat,						#isMetaSide : false					},					#name : #vector,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CuaAmbPrioritat class\r\tinstanceVariableNames: \'\''				},				#name : #'CuaAmbPrioritat class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CuaAmbPrioritat,					#isMetaSide : false				},				#parent : @8,				#content : 'A CuaAmbPrioritat is xxx\r\rInstance Variables\r\tvector:\t\t<Object>\r\rvector\r\t- xxxxx\r',				#stamp : 'jjddpp 9/30/2016 14:38'			},			#classVariables : OrderedCollection [ ],			#category : #ProblemesCAP2023,			#package : #ProblemesCAP2023,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ],		#time : DateAndTime [ '2024-01-14T00:38:02.568869+01:00' ],		#trigger : OmReference [ '2' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Pila\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #Pila,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Pila class\r\tinstanceVariableNames: \'\''				},				#name : #'Pila class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Pila,					#isMetaSide : false				},				#parent : @8,				#content : 'Please c',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Please c',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ],		#time : DateAndTime [ '2024-01-14T00:38:02.570181+01:00' ],		#trigger : OmReference [ '2' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Pila\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'ProblemesCAP2023\''			},			#name : #Pila,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Pila class\r\tinstanceVariableNames: \'\''				},				#name : #'Pila class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Pila,					#isMetaSide : false				},				#parent : @8,				#content : 'Please c',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #ProblemesCAP2023,			#package : #ProblemesCAP2023,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ],		#time : DateAndTime [ '2024-01-14T00:38:02.575859+01:00' ],		#trigger : OmReference [ '2' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Sequencia\r\tinstanceVariableNames: \'seq\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #Sequencia,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Sequencia,						#isMetaSide : false					},					#name : #seq,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Sequencia class\r\tinstanceVariableNames: \'\''				},				#name : #'Sequencia class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Sequencia,					#isMetaSide : false				},				#parent : @8,				#content : 'Please ',				#stamp : 'jjddpp 10/3/2019 09:29'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Please ',		#newStamp : 'jjddpp 10/3/2019 09:29'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ],		#time : DateAndTime [ '2024-01-14T00:38:02.577036+01:00' ],		#trigger : OmReference [ '2' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Sequencia\r\tinstanceVariableNames: \'seq\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'ProblemesCAP2023\''			},			#name : #Sequencia,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Sequencia,						#isMetaSide : false					},					#name : #seq,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Sequencia class\r\tinstanceVariableNames: \'\''				},				#name : #'Sequencia class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Sequencia,					#isMetaSide : false				},				#parent : @8,				#content : 'Please ',				#stamp : 'jjddpp 10/3/2019 09:29'			},			#classVariables : OrderedCollection [ ],			#category : #ProblemesCAP2023,			#package : #ProblemesCAP2023,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ],		#time : DateAndTime [ '2024-01-14T00:38:02.624374+01:00' ],		#trigger : OmReference [ '2' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #String,				#isMetaSide : false			},			#name : #checkContents,			#protocol : #'*ProblemesCAP2023',			#sourceCode : 'checkContents\r\t| allowed |\r\tallowed := #($A $T $C $G).\r\tself do: [ :each | (allowed includes: each) ifFalse: [ ^ false] ].\r\t^ true',			#stamp : 'jjddpp 10/3/2019 09:37',			#package : #ProblemesCAP2023		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ],		#time : DateAndTime [ '2024-01-14T00:38:02.625775+01:00' ],		#trigger : OmReference [ '2' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Character,				#isMetaSide : false			},			#name : #'check:',			#protocol : #'*ProblemesCAP2023',			#sourceCode : 'check: aChar\r\t| at cg |\r\tat := (self = $A and: [ aChar = $T ]) or: [ self = $T and: [ aChar = $A ] ].\r\tcg := (self = $C and: [ aChar = $G ]) or: [ self = $G and: [ aChar = $C ] ].\r\t^ at or: [ cg ]\r\t',			#stamp : 'jjddpp 10/3/2019 09:41',			#package : #ProblemesCAP2023		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ],		#time : DateAndTime [ '2024-01-14T00:38:02.626489+01:00' ],		#trigger : OmReference [ '2' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CuaAmbPrioritat,				#isMetaSide : false			},			#name : #'afegir:',			#protocol : #'public interface',			#sourceCode : 'afegir: anElement\r\r\tvector addLast: anElement.\r\tself surar: (self mida)',			#stamp : 'jjddpp 9/19/2018 17:43',			#package : #ProblemesCAP2023		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ],		#time : DateAndTime [ '2024-01-14T00:38:02.627347+01:00' ],		#trigger : OmReference [ '2' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CuaAmbPrioritat,				#isMetaSide : false			},			#name : #'afegirTots:',			#protocol : #'public interface',			#sourceCode : 'afegirTots: aCollection\r\t"Suposarem que aCollection té elements del tipus adeqüat"\r\taCollection do: [ :each | self afegir: each ]\r\t',			#stamp : 'jjddpp 9/19/2019 11:21',			#package : #ProblemesCAP2023		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ],		#time : DateAndTime [ '2024-01-14T00:38:02.627917+01:00' ],		#trigger : OmReference [ '2' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CuaAmbPrioritat,				#isMetaSide : false			},			#name : #buida,			#protocol : #'public interface',			#sourceCode : 'buida\r\t^ self mida = 0',			#stamp : 'jjddpp 9/19/2018 17:44',			#package : #ProblemesCAP2023		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ],		#time : DateAndTime [ '2024-01-14T00:38:02.628602+01:00' ],		#trigger : OmReference [ '2' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CuaAmbPrioritat,				#isMetaSide : false			},			#name : #'enfonsar:',			#protocol : #private,			#sourceCode : 'enfonsar: aNumber\r\t| n c |\r\tn := self mida.\r\tc := aNumber * 2.\r\t(c <= n) ifTrue: [ \r\t\t\t\t((c + 1 <= n) and: [ (vector at: (c+1)) < (vector at: c) ]) ifTrue: [ c := c + 1 ].\r\t\t\t\t(vector at: aNumber) > (vector at: c)  ifTrue: [ \r\t\t\t\t\t\t\tvector swap: aNumber with: c.\r\t\t\t\t\t\t\tself enfonsar: c  ] ]\r',			#stamp : 'jjddpp 9/19/2018 19:34',			#package : #ProblemesCAP2023		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ],		#time : DateAndTime [ '2024-01-14T00:38:02.629124+01:00' ],		#trigger : OmReference [ '2' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CuaAmbPrioritat,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\t\r\tvector := OrderedCollection new.',			#stamp : 'jjddpp 9/19/2019 11:13',			#package : #ProblemesCAP2023		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ],		#time : DateAndTime [ '2024-01-14T00:38:02.629727+01:00' ],		#trigger : OmReference [ '2' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CuaAmbPrioritat,				#isMetaSide : false			},			#name : #mida,			#protocol : #'public interface',			#sourceCode : 'mida\r\t^ vector size',			#stamp : 'jjddpp 9/30/2016 15:05',			#package : #ProblemesCAP2023		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ],		#time : DateAndTime [ '2024-01-14T00:38:02.63065+01:00' ],		#trigger : OmReference [ '2' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CuaAmbPrioritat,				#isMetaSide : false			},			#name : #minim,			#protocol : #'public interface',			#sourceCode : 'minim\r\t^ vector at: 1.',			#stamp : 'jjddpp 9/30/2016 14:45',			#package : #ProblemesCAP2023		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ],		#time : DateAndTime [ '2024-01-14T00:38:02.631318+01:00' ],		#trigger : OmReference [ '2' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CuaAmbPrioritat,				#isMetaSide : false			},			#name : #'surar:',			#protocol : #private,			#sourceCode : 'surar: aNumber\r\t(aNumber ~= 1 and: [(vector at: (aNumber // 2)) > (vector at: aNumber) ])\r\t\tifTrue: [  vector swap: aNumber with: (aNumber // 2).\r\t\t\t\t\tself surar: (aNumber // 2)\t]',			#stamp : 'jjddpp 9/19/2018 19:35',			#package : #ProblemesCAP2023		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ],		#time : DateAndTime [ '2024-01-14T00:38:02.631954+01:00' ],		#trigger : OmReference [ '2' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CuaAmbPrioritat,				#isMetaSide : false			},			#name : #treureMin,			#protocol : #'public interface',			#sourceCode : 'treureMin\r\t| x s |\r\ts := self mida.\r\tx := vector at: 1.\r\tvector at: 1 put: (vector at: s).\r\tvector removeLast.\r\tself enfonsar: 1.\r\t^ x ',			#stamp : 'jjddpp 9/19/2018 17:45',			#package : #ProblemesCAP2023		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '20' ],		#self : OmReference [ '21' ],		#time : DateAndTime [ '2024-01-14T00:38:02.632665+01:00' ],		#trigger : OmReference [ '2' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Pila class',				#isMetaSide : true			},			#name : #creaPila,			#protocol : #'as yet unclassified',			#sourceCode : 'creaPila\r\t| pila index |\r\tpila := OrderedCollection new.\r\tindex := 0.\r\t^ { \r\t[ pila := OrderedCollection new. index := 0. ] .\r\t[ index > 0 ifTrue: [ index := index - 1. pila removeLast ] \r\t\t\t\t\tifFalse: [ Object error: \'Pila Buida\' ] ] .\r\t[ index > 0 ifTrue: [ pila last ]  ifFalse: [ Object error: \'Pila Buida\' ] ] .\r\t[ :elem | index := index + 1. pila add: elem. ] .\r\t[ index ] .\r\t[ index = 0 ] .\r\t }',			#stamp : 'jjddpp 11/11/2022 14:56',			#package : #ProblemesCAP2023		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '21' ],		#self : OmReference [ '22' ],		#time : DateAndTime [ '2024-01-14T00:38:02.633268+01:00' ],		#trigger : OmReference [ '2' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Sequencia class',				#isMetaSide : true			},			#name : #'with:',			#protocol : #'instance creation',			#sourceCode : 'with: aString\r\taString asUppercase checkContents ifFalse: [ self error: \'Seqüència mal formada\'  ].\r\t^ self new with: aString asUppercase',			#stamp : 'jjddpp 10/3/2019 09:55',			#package : #ProblemesCAP2023		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '22' ],		#self : OmReference [ '23' ],		#time : DateAndTime [ '2024-01-14T00:38:02.633835+01:00' ],		#trigger : OmReference [ '2' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Sequencia,				#isMetaSide : false			},			#name : #'benFormada:',			#protocol : #'as yet unclassified',			#sourceCode : 'benFormada: aSeq\r\t| mida tmpseq1 tmpseq2 |\r\tmida := (self seq size) min: (aSeq seq size).\r\ttmpseq1 := self seq truncateTo: mida.\r\ttmpseq2 := aSeq seq truncateTo: mida.\r\ttmpseq1 with: tmpseq2 do: [ :c1 :c2 | (c1 check: c2) ifFalse: [ ^false ] ].\r\t^ true ',			#stamp : 'jjddpp 10/3/2019 09:53',			#package : #ProblemesCAP2023		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '23' ],		#self : OmReference [ '24' ],		#time : DateAndTime [ '2024-01-14T00:38:02.634321+01:00' ],		#trigger : OmReference [ '2' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Sequencia,				#isMetaSide : false			},			#name : #seq,			#protocol : #accessing,			#sourceCode : 'seq\r\t^ seq',			#stamp : 'jjddpp 10/3/2019 09:46',			#package : #ProblemesCAP2023		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '24' ],		#self : OmReference [ '25' ],		#time : DateAndTime [ '2024-01-14T00:38:02.634839+01:00' ],		#trigger : OmReference [ '2' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Sequencia,				#isMetaSide : false			},			#name : #'with:',			#protocol : #'instance creation',			#sourceCode : 'with: aString\r\tseq := aString\r\t',			#stamp : 'jjddpp 10/3/2019 10:20',			#package : #ProblemesCAP2023		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:39:37.787616+01:00' ],		#prior : OmReference [ '25' ],		#self : OmReference [ '26' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'DevilsAndAngels-jjddpp.5'		]	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '26' ],		#self : OmReference [ '27' ],		#time : DateAndTime [ '2024-01-14T00:39:37.82945+01:00' ],		#trigger : @3	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Tardis\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #Tardis,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Tardis class\r\tinstanceVariableNames: \'past future\''				},				#name : #'Tardis class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Tardis class',							#isMetaSide : true						},						#name : #past,						#parent : @12					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Tardis class',							#isMetaSide : true						},						#name : #future,						#parent : @12					}				],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Tardis,					#isMetaSide : false				},				#parent : @7,				#content : 'A HeavenHell is .\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'A HeavenHell is .\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '27' ],		#self : OmReference [ '28' ],		#time : DateAndTime [ '2024-01-14T00:39:37.830094+01:00' ],		#trigger : OmReference [ '26' ]	},	#content : EpCategoryAddition {		#classCategoryName : #DevilsAndAngels,		#affectedPackageName : #DevilsAndAngels	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '28' ],		#self : OmReference [ '29' ],		#time : DateAndTime [ '2024-01-14T00:39:37.853278+01:00' ],		#trigger : OmReference [ '26' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Tardis\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'DevilsAndAngels\''			},			#name : #Tardis,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Tardis class\r\tinstanceVariableNames: \'past future\''				},				#name : #'Tardis class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Tardis class',							#isMetaSide : true						},						#name : #past,						#parent : @13					},					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'Tardis class',							#isMetaSide : true						},						#name : #future,						#parent : @13					}				],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Tardis,					#isMetaSide : false				},				#parent : @8,				#content : 'A HeavenHell is .\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #DevilsAndAngels,			#package : #DevilsAndAngels,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '29' ],		#self : OmReference [ '30' ],		#time : DateAndTime [ '2024-01-14T00:39:37.858304+01:00' ],		#trigger : OmReference [ '26' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #TestAlgorithms\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #TestAlgorithms,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TestAlgorithms class\r\tinstanceVariableNames: \'aux\''				},				#name : #'TestAlgorithms class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'TestAlgorithms class',							#isMetaSide : true						},						#name : #aux,						#parent : @13					}				],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TestAlgorithms,					#isMetaSide : false				},				#parent : @8,				#content : 'A TestAlgorithms is .\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'A TestAlgorithms is .\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '30' ],		#self : OmReference [ '31' ],		#time : DateAndTime [ '2024-01-14T00:39:37.85962+01:00' ],		#trigger : OmReference [ '26' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #TestAlgorithms\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'DevilsAndAngels\''			},			#name : #TestAlgorithms,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TestAlgorithms class\r\tinstanceVariableNames: \'aux\''				},				#name : #'TestAlgorithms class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'TestAlgorithms class',							#isMetaSide : true						},						#name : #aux,						#parent : @13					}				],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TestAlgorithms,					#isMetaSide : false				},				#parent : @8,				#content : 'A TestAlgorithms is .\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #DevilsAndAngels,			#package : #DevilsAndAngels,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '31' ],		#self : OmReference [ '32' ],		#time : DateAndTime [ '2024-01-14T00:39:37.86356+01:00' ],		#trigger : OmReference [ '26' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Stack',				#traitCompositionSource : '{}',				#definitionSource : 'Stack subclass: #TimeLordsStack\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #TimeLordsStack,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TimeLordsStack class\r\tinstanceVariableNames: \'\''				},				#name : #'TimeLordsStack class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TimeLordsStack,					#isMetaSide : false				},				#parent : @8,				#content : 'A HeavenlyStack is .\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'A HeavenlyStack is .\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '32' ],		#self : OmReference [ '33' ],		#time : DateAndTime [ '2024-01-14T00:39:37.865454+01:00' ],		#trigger : OmReference [ '26' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Stack',				#traitCompositionSource : '{}',				#definitionSource : 'Stack subclass: #TimeLordsStack\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'DevilsAndAngels\''			},			#name : #TimeLordsStack,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TimeLordsStack class\r\tinstanceVariableNames: \'\''				},				#name : #'TimeLordsStack class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TimeLordsStack,					#isMetaSide : false				},				#parent : @8,				#content : 'A HeavenlyStack is .\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #DevilsAndAngels,			#package : #DevilsAndAngels,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '33' ],		#self : OmReference [ '34' ],		#time : DateAndTime [ '2024-01-14T00:39:37.892013+01:00' ],		#trigger : OmReference [ '26' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Tardis class',				#isMetaSide : true			},			#name : #'angelPloraner:',			#protocol : #control-handling,			#sourceCode : 'angelPloraner: anObject \r\r\t^ Continuation callcc: [ :k | \t\r\t\t     self future push: k. \r\t\t     (self past pop) value: anObject  ]. ',			#stamp : 'jjddpp 11/23/2014 16:50',			#package : #DevilsAndAngels		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '34' ],		#self : OmReference [ '35' ],		#time : DateAndTime [ '2024-01-14T00:39:37.893388+01:00' ],		#trigger : OmReference [ '26' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Tardis class',				#isMetaSide : true			},			#name : #'doctor:',			#protocol : #control-handling,			#sourceCode : 'doctor: anObject \r\r\t^ (self future pop) value: anObject ',			#stamp : 'jjddpp 11/23/2014 16:49',			#package : #DevilsAndAngels		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '35' ],		#self : OmReference [ '36' ],		#time : DateAndTime [ '2024-01-14T00:39:37.894093+01:00' ],		#trigger : OmReference [ '26' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Tardis class',				#isMetaSide : true			},			#name : #'fita:',			#protocol : #control-handling,			#sourceCode : 'fita: anObject \t\r\r\t^ Continuation callcc: [ :k | self past push: k.  ^ anObject  ]. \r',			#stamp : 'jjddpp 11/23/2014 16:49',			#package : #DevilsAndAngels		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '36' ],		#self : OmReference [ '37' ],		#time : DateAndTime [ '2024-01-14T00:39:37.894689+01:00' ],		#trigger : OmReference [ '26' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Tardis class',				#isMetaSide : true			},			#name : #future,			#protocol : #accessing,			#sourceCode : 'future\r\t^ future',			#stamp : 'jjddpp 11/20/2014 16:55',			#package : #DevilsAndAngels		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '37' ],		#self : OmReference [ '38' ],		#time : DateAndTime [ '2024-01-14T00:39:37.895226+01:00' ],		#trigger : OmReference [ '26' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Tardis class',				#isMetaSide : true			},			#name : #'future:',			#protocol : #accessing,			#sourceCode : 'future: anObject\r\tfuture := anObject.',			#stamp : 'jjddpp 11/20/2014 17:19',			#package : #DevilsAndAngels		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '38' ],		#self : OmReference [ '39' ],		#time : DateAndTime [ '2024-01-14T00:39:37.895794+01:00' ],		#trigger : OmReference [ '26' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Tardis class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #'initialize - release',			#sourceCode : 'initialize\r\tsuper initialize.\r\tself reset.\r\t',			#stamp : 'jjddpp 11/20/2014 16:54',			#package : #DevilsAndAngels		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '39' ],		#self : OmReference [ '40' ],		#time : DateAndTime [ '2024-01-14T00:39:37.896316+01:00' ],		#trigger : OmReference [ '26' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Tardis class',				#isMetaSide : true			},			#name : #past,			#protocol : #accessing,			#sourceCode : 'past \r\t^ past',			#stamp : 'jjddpp 11/20/2014 16:55',			#package : #DevilsAndAngels		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '40' ],		#self : OmReference [ '41' ],		#time : DateAndTime [ '2024-01-14T00:39:37.896818+01:00' ],		#trigger : OmReference [ '26' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Tardis class',				#isMetaSide : true			},			#name : #'past:',			#protocol : #accessing,			#sourceCode : 'past: anObject\r\tpast := anObject.',			#stamp : 'jjddpp 11/20/2014 17:18',			#package : #DevilsAndAngels		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '41' ],		#self : OmReference [ '42' ],		#time : DateAndTime [ '2024-01-14T00:39:37.898881+01:00' ],		#trigger : OmReference [ '26' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Tardis class',				#isMetaSide : true			},			#name : #reset,			#protocol : #'initialize - release',			#sourceCode : 'reset\r\tself past: TimeLordsStack new.\r\tself future: TimeLordsStack new.',			#stamp : 'jjddpp 11/23/2014 16:48',			#package : #DevilsAndAngels		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '42' ],		#self : OmReference [ '43' ],		#time : DateAndTime [ '2024-01-14T00:39:37.899723+01:00' ],		#trigger : OmReference [ '26' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TestAlgorithms class',				#isMetaSide : true			},			#name : #TardisExample,			#protocol : #Algorithms,			#sourceCode : 'TardisExample\r\tTardis initialize.\r\t(self auxWith: $a and: ( (self auxWith: $b and:  (Tardis fita: 3)) = 4 ) )\r\t\tifTrue: [  \tTranscript show: \'aqui!\'; cr.\r\t\t\t\t\tself auxWith: $c and: (Tardis doctor: \'tot va be\') .  ]\r\t\tifFalse: [ \r\t\t\t(self auxWith: $d and: ( (self auxWith: $e and:  (Tardis fita: 4)) = 5 ) )\r\t\t\t\tifTrue: [ self auxWith: $f and: (Tardis doctor: (self auxWith: $g and:  (Tardis angelPloraner: 4))) ]\r\t\t\t\tifFalse: [ Transcript show: \'hem arribat fins aqui!\'; cr. \r\t\t\t\t\t\t  self auxWith: $h and: (Tardis angelPloraner: 5).\t] ]',			#stamp : 'jjddpp 11/23/2014 16:51',			#package : #DevilsAndAngels		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '43' ],		#self : OmReference [ '44' ],		#time : DateAndTime [ '2024-01-14T00:39:37.900396+01:00' ],		#trigger : OmReference [ '26' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TestAlgorithms class',				#isMetaSide : true			},			#name : #'auxParenthesis:and:and:',			#protocol : #private,			#sourceCode : 'auxParenthesis: n and: p and: con \r\t|  tmpStack |\r\ttmpStack := con deepCopy.\r\tn = 0 ifTrue: [ con isEmpty ifTrue: [ 1 to: p - 1 do: [ : i | Transcript show: (aux at: i) asString  ]. \r\t\t\t\t\t\t\t\t\t\tTranscript cr.  ]\r\t\t\t\t\t\t\tifFalse: [ \t| nn |\r\t\t\t\t\t\t\t\t\t\taux at: p put: \')\'.\r\t\t\t\t\t\t\t\t\t\tnn := tmpStack pop.\r\t\t\t\t\t\t\t\t\t\tself auxParenthesis: nn and: (p + 1)  and: tmpStack.  ]  ]\r\t\tifFalse: [ \taux at: p put: \'(\'.\r\t\t\t\t\t 0 to: n - 1 do: [ : i |\r\t\t\t\t\t\t\t\t\ttmpStack push: (n - i - 1).\r\t\t\t\t\t\t\t\t\tself auxParenthesis: i and: p + 1 and: tmpStack.\r\t\t\t\t\t\t\t\t\ttmpStack pop.  ] ] \r\t\t\t\t\t\t\t',			#stamp : 'jjddpp 11/20/2014 16:24',			#package : #DevilsAndAngels		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '44' ],		#self : OmReference [ '45' ],		#time : DateAndTime [ '2024-01-14T00:39:37.900946+01:00' ],		#trigger : OmReference [ '26' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TestAlgorithms class',				#isMetaSide : true			},			#name : #'auxWith:and:',			#protocol : #private,			#sourceCode : 'auxWith: anObject and: anotherObject\r\tTranscript show: \'==> \', anObject asString , \' : \', anotherObject asString; cr.\r\t^ anotherObject\r\t',			#stamp : 'jjddpp 11/23/2014 16:43',			#package : #DevilsAndAngels		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '45' ],		#self : OmReference [ '46' ],		#time : DateAndTime [ '2024-01-14T00:39:37.901472+01:00' ],		#trigger : OmReference [ '26' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TestAlgorithms class',				#isMetaSide : true			},			#name : #'parenthesis:and:and:',			#protocol : #Algorithms,			#sourceCode : 'parenthesis: n and: p and: con \r\taux := Array new: (n * 2).\r\tself auxParenthesis: n and: p and: con.\r\t',			#stamp : 'jjddpp 11/20/2014 16:07',			#package : #DevilsAndAngels		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '46' ],		#self : OmReference [ '47' ],		#time : DateAndTime [ '2024-01-14T00:39:37.902067+01:00' ],		#trigger : OmReference [ '26' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TimeLordsStack,				#isMetaSide : false			},			#name : #pop,			#protocol : #removing,			#sourceCode : 'pop\r\t"Returns the first element and remove it from the stack.\r\tThere will always be an identity function in the bottom of the stack"\r\r\tself isEmpty ifTrue: [ ^ [ :x | x ] ].\r\t^self removeFirst\r\t',			#stamp : 'jjddpp 10/28/2014 17:10',			#package : #DevilsAndAngels		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:39:44.445967+01:00' ],		#prior : OmReference [ '47' ],		#self : OmReference [ '48' ]	},	#content : EpMonticelloVersionSave {		#versionName : 'DeutschByte-jjddpp.6',		#repositoryDescription : '/home/marc/UPC/CAP/Pharo_Parcial/pharo-local/package-cache'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:39:44.480756+01:00' ],		#prior : OmReference [ '48' ],		#self : OmReference [ '49' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'DeutschByte-jjddpp.6'		]	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '49' ],		#self : OmReference [ '50' ],		#time : DateAndTime [ '2024-01-14T00:39:44.519092+01:00' ],		#trigger : @3	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Association',				#traitCompositionSource : '{}',				#definitionSource : 'Association subclass: #Binding\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #Binding,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Binding class\r\tinstanceVariableNames: \'\''				},				#name : #'Binding class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Binding,					#isMetaSide : false				},				#parent : @7,				#content : 'A Binding is .\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'A Binding is .\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '50' ],		#self : OmReference [ '51' ],		#time : DateAndTime [ '2024-01-14T00:39:44.519651+01:00' ],		#trigger : OmReference [ '49' ]	},	#content : EpCategoryAddition {		#classCategoryName : #DeutschByte,		#affectedPackageName : #DeutschByte	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '51' ],		#self : OmReference [ '52' ],		#time : DateAndTime [ '2024-01-14T00:39:44.539227+01:00' ],		#trigger : OmReference [ '49' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Association',				#traitCompositionSource : '{}',				#definitionSource : 'Association subclass: #Binding\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'DeutschByte\''			},			#name : #Binding,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Binding class\r\tinstanceVariableNames: \'\''				},				#name : #'Binding class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Binding,					#isMetaSide : false				},				#parent : @8,				#content : 'A Binding is .\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #DeutschByte,			#package : #DeutschByte,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '52' ],		#self : OmReference [ '53' ],		#time : DateAndTime [ '2024-01-14T00:39:44.544194+01:00' ],		#trigger : OmReference [ '49' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #BlockWithExit\r\tinstanceVariableNames: \'block exitBlock\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #BlockWithExit,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #BlockWithExit,						#isMetaSide : false					},					#name : #block,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #BlockWithExit,						#isMetaSide : false					},					#name : #exitBlock,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BlockWithExit class\r\tinstanceVariableNames: \'\''				},				#name : #'BlockWithExit class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BlockWithExit,					#isMetaSide : false				},				#parent : @8,				#content : 'A BlockWithExit is .\r\rInstance Variables\r\tblock:\t\t<Object>\r\texitBlock:\t\t<Object>\r\rblock\r\t- xxxxx\r\rexitBlock\r\t- xxxxx\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'A BlockWithExit is .\r\rInstance Variables\r\tblock:\t\t<Object>\r\texitBlock:\t\t<Object>\r\rblock\r\t- xxxxx\r\rexitBlock\r\t- xxxxx\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '53' ],		#self : OmReference [ '54' ],		#time : DateAndTime [ '2024-01-14T00:39:44.545328+01:00' ],		#trigger : OmReference [ '49' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #BlockWithExit\r\tinstanceVariableNames: \'block exitBlock\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'DeutschByte\''			},			#name : #BlockWithExit,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #BlockWithExit,						#isMetaSide : false					},					#name : #block,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #BlockWithExit,						#isMetaSide : false					},					#name : #exitBlock,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BlockWithExit class\r\tinstanceVariableNames: \'\''				},				#name : #'BlockWithExit class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BlockWithExit,					#isMetaSide : false				},				#parent : @8,				#content : 'A BlockWithExit is .\r\rInstance Variables\r\tblock:\t\t<Object>\r\texitBlock:\t\t<Object>\r\rblock\r\t- xxxxx\r\rexitBlock\r\t- xxxxx\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #DeutschByte,			#package : #DeutschByte,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '54' ],		#self : OmReference [ '55' ],		#time : DateAndTime [ '2024-01-14T00:39:44.572501+01:00' ],		#trigger : OmReference [ '49' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BlockClosure,				#isMetaSide : false			},			#name : #withExit,			#protocol : #'*DeutschByte',			#sourceCode : 'withExit\r\t^ BlockWithExit with: self',			#stamp : 'jjddpp 10/7/2012 22:22',			#package : #DeutschByte		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '55' ],		#self : OmReference [ '56' ],		#time : DateAndTime [ '2024-01-14T00:39:44.573629+01:00' ],		#trigger : OmReference [ '49' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Symbol,				#isMetaSide : false			},			#name : #'bindTo:in:',			#protocol : #'*DeutschByte',			#sourceCode : 'bindTo: value in: aBlock \r\t^ Binding of: self to: value in: aBlock \r\t',			#stamp : 'jjddpp 10/7/2012 22:16',			#package : #DeutschByte		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '56' ],		#self : OmReference [ '57' ],		#time : DateAndTime [ '2024-01-14T00:39:44.57443+01:00' ],		#trigger : OmReference [ '49' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Symbol,				#isMetaSide : false			},			#name : #binding,			#protocol : #'*DeutschByte',			#sourceCode : 'binding\r\t| context |\r\tcontext := thisContext.\r\t[ context = nil ] whileFalse:\r\t\t[   ((context receiver isMemberOf: Binding)\r\t\t\t\tand: [ context selector = #of:to:in:\r\t\t\t\t\tand: [context receiver key = self]])\r\t\t\t\tifTrue: [^ context receiver value]\r\t\t\t\tifFalse: [context := context sender]\r\t\t].\r\tself error: \'No binding for \', self asString.',			#stamp : 'jjddpp 10/7/2012 22:16',			#package : #DeutschByte		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '57' ],		#self : OmReference [ '58' ],		#time : DateAndTime [ '2024-01-14T00:39:44.575082+01:00' ],		#trigger : OmReference [ '49' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Binding class',				#isMetaSide : true			},			#name : #exampleSuccessful,			#protocol : #testing,			#sourceCode : 'exampleSuccessful\r\t"Binding exampleSuccessful"\r\r\t#testingDynamicBinding bindTo: \'This is a test\' in: \r\t\t[ Transcript show: (#testingDynamicBinding binding) asString; cr. ] .',			#stamp : 'jjddpp 10/7/2012 22:36',			#package : #DeutschByte		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '58' ],		#self : OmReference [ '59' ],		#time : DateAndTime [ '2024-01-14T00:39:44.575797+01:00' ],		#trigger : OmReference [ '49' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Binding class',				#isMetaSide : true			},			#name : #exampleUnsuccessful,			#protocol : #testing,			#sourceCode : 'exampleUnsuccessful\r\t"Binding exampleUnsuccessful"\r\r\t#testingDynamicBinding bindTo: \'This is a test\' in: \r\t[ Transcript show: (#testingDynamikBinding binding) asString; cr. ] .',			#stamp : 'jjddpp 10/7/2012 22:36',			#package : #DeutschByte		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '59' ],		#self : OmReference [ '60' ],		#time : DateAndTime [ '2024-01-14T00:39:44.57632+01:00' ],		#trigger : OmReference [ '49' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Binding class',				#isMetaSide : true			},			#name : #'of:to:in:',			#protocol : #'instance creation',			#sourceCode : 'of: aSymbol to: aValue in: aBlock\r\t^ self new of: aSymbol to: aValue in: aBlock ',			#stamp : 'jjddpp 10/7/2012 22:13',			#package : #DeutschByte		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '60' ],		#self : OmReference [ '61' ],		#time : DateAndTime [ '2024-01-14T00:39:44.576838+01:00' ],		#trigger : OmReference [ '49' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Binding,				#isMetaSide : false			},			#name : #'of:to:in:',			#protocol : #initialize-release,			#sourceCode : 'of: aSymbol to: aValue in: aBlock\r\tkey := aSymbol.\r\tvalue := aValue.\r\t^ aBlock value',			#stamp : 'jjddpp 10/7/2012 22:13',			#package : #DeutschByte		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '61' ],		#self : OmReference [ '62' ],		#time : DateAndTime [ '2024-01-14T00:39:44.577401+01:00' ],		#trigger : OmReference [ '49' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'BlockWithExit class',				#isMetaSide : true			},			#name : #example,			#protocol : #testing,			#sourceCode : 'example\r\t"BlockWithExit example"\r\r\t| theLoop coll |\r\tcoll := OrderedCollection new.\r\t1000 timesRepeat: [ coll add: 1000 atRandom ].\r\ttheLoop := [coll do: [:each | each traceCr.\r\t\t\t\t\t\t\t  \t\t\t  (each < 100) ifTrue: [theLoop exit]]] withExit.\r\ttheLoop value.\r',			#stamp : 'jjddpp 9/30/2020 18:46',			#package : #DeutschByte		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '62' ],		#self : OmReference [ '63' ],		#time : DateAndTime [ '2024-01-14T00:39:44.577993+01:00' ],		#trigger : OmReference [ '49' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'BlockWithExit class',				#isMetaSide : true			},			#name : #'with:',			#protocol : #'instance creation',			#sourceCode : 'with: aBlock\r\t^ self new with: aBlock ',			#stamp : 'jjddpp 10/7/2012 22:20',			#package : #DeutschByte		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '63' ],		#self : OmReference [ '64' ],		#time : DateAndTime [ '2024-01-14T00:39:44.579263+01:00' ],		#trigger : OmReference [ '49' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BlockWithExit,				#isMetaSide : false			},			#name : #exit,			#protocol : #control,			#sourceCode : 'exit\r\texitBlock value',			#stamp : 'jjddpp 10/7/2012 22:19',			#package : #DeutschByte		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '64' ],		#self : OmReference [ '65' ],		#time : DateAndTime [ '2024-01-14T00:39:44.579841+01:00' ],		#trigger : OmReference [ '49' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BlockWithExit,				#isMetaSide : false			},			#name : #value,			#protocol : #control,			#sourceCode : 'value\r\texitBlock := [^ nil].\r\t^ block value.\r',			#stamp : 'jjddpp 10/7/2012 22:19',			#package : #DeutschByte		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '65' ],		#self : OmReference [ '66' ],		#time : DateAndTime [ '2024-01-14T00:39:44.580373+01:00' ],		#trigger : OmReference [ '49' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BlockWithExit,				#isMetaSide : false			},			#name : #'with:',			#protocol : #initialize-release,			#sourceCode : 'with: aBlock\r\tblock := aBlock ',			#stamp : 'jjddpp 10/7/2012 22:19',			#package : #DeutschByte		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:39:56.948648+01:00' ],		#prior : OmReference [ '66' ],		#self : OmReference [ '67' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'Reflection-Complete-jjddpp.6'		]	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '67' ],		#self : OmReference [ '68' ],		#time : DateAndTime [ '2024-01-14T00:39:56.993174+01:00' ],		#trigger : @3	},	#content : EpCategoryAddition {		#classCategoryName : #Reflection-Complete,		#affectedPackageName : #Reflection-Complete	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '68' ],		#self : OmReference [ '69' ],		#time : DateAndTime [ '2024-01-14T00:39:57.015168+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #AnonymousObjectTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Reflection-Complete\''			},			#name : #AnonymousObjectTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AnonymousObjectTest class\r\tinstanceVariableNames: \'\''				},				#name : #'AnonymousObjectTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnonymousObjectTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Reflection-Complete,			#package : #Reflection-Complete,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '69' ],		#self : OmReference [ '70' ],		#time : DateAndTime [ '2024-01-14T00:39:57.020995+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #DynamicAccessorsTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Reflection-Complete\''			},			#name : #DynamicAccessorsTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'DynamicAccessorsTest class\r\tinstanceVariableNames: \'\''				},				#name : #'DynamicAccessorsTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #DynamicAccessorsTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Reflection-Complete,			#package : #Reflection-Complete,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '70' ],		#self : OmReference [ '71' ],		#time : DateAndTime [ '2024-01-14T00:39:57.02543+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #LoggingProxyTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Reflection-Complete\''			},			#name : #LoggingProxyTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LoggingProxyTest class\r\tinstanceVariableNames: \'\''				},				#name : #'LoggingProxyTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LoggingProxyTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Reflection-Complete,			#package : #Reflection-Complete,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '71' ],		#self : OmReference [ '72' ],		#time : DateAndTime [ '2024-01-14T00:39:57.029602+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #MethodWrapperTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Reflection-Complete\''			},			#name : #MethodWrapperTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MethodWrapperTest class\r\tinstanceVariableNames: \'\''				},				#name : #'MethodWrapperTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MethodWrapperTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Reflection-Complete,			#package : #Reflection-Complete,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '72' ],		#self : OmReference [ '73' ],		#time : DateAndTime [ '2024-01-14T00:39:57.034538+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #MinimalObjectTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Reflection-Complete\''			},			#name : #MinimalObjectTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MinimalObjectTest class\r\tinstanceVariableNames: \'\''				},				#name : #'MinimalObjectTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MinimalObjectTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Reflection-Complete,			#package : #Reflection-Complete,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '73' ],		#self : OmReference [ '74' ],		#time : DateAndTime [ '2024-01-14T00:39:57.03923+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #ReflectionTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #ReflectionTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ReflectionTest class\r\tinstanceVariableNames: \'\''				},				#name : #'ReflectionTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ReflectionTest,					#isMetaSide : false				},				#parent : @8,				#content : 'Various demonstrations of reflective capabilities of Squeak.\rExamples from Marcus Denker and StÈphane Ducasse',				#stamp : 'on 3/24/2006 16:41'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Various demonstrations of reflective capabilities of Squeak.\rExamples from Marcus Denker and StÈphane Ducasse',		#newStamp : 'on 3/24/2006 16:41'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '74' ],		#self : OmReference [ '75' ],		#time : DateAndTime [ '2024-01-14T00:39:57.040817+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #ReflectionTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Reflection-Complete\''			},			#name : #ReflectionTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ReflectionTest class\r\tinstanceVariableNames: \'\''				},				#name : #'ReflectionTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ReflectionTest,					#isMetaSide : false				},				#parent : @8,				#content : 'Various demonstrations of reflective capabilities of Squeak.\rExamples from Marcus Denker and StÈphane Ducasse',				#stamp : 'on 3/24/2006 16:41'			},			#classVariables : OrderedCollection [ ],			#category : #Reflection-Complete,			#package : #Reflection-Complete,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '75' ],		#self : OmReference [ '76' ],		#time : DateAndTime [ '2024-01-14T00:39:57.044858+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #DynamicAccessors\r\tinstanceVariableNames: \'x y\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #DynamicAccessors,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DynamicAccessors,						#isMetaSide : false					},					#name : #x,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DynamicAccessors,						#isMetaSide : false					},					#name : #y,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'DynamicAccessors class\r\tinstanceVariableNames: \'\''				},				#name : #'DynamicAccessors class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #DynamicAccessors,					#isMetaSide : false				},				#parent : @8,				#content : 'A DynamicAccessors is .\r\rInstance Variables\r\tx:\t\t<Object>\r\rx\r\t- xxxxx\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'A DynamicAccessors is .\r\rInstance Variables\r\tx:\t\t<Object>\r\rx\r\t- xxxxx\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '76' ],		#self : OmReference [ '77' ],		#time : DateAndTime [ '2024-01-14T00:39:57.045907+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #DynamicAccessors\r\tinstanceVariableNames: \'x y\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Reflection-Complete\''			},			#name : #DynamicAccessors,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DynamicAccessors,						#isMetaSide : false					},					#name : #x,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DynamicAccessors,						#isMetaSide : false					},					#name : #y,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'DynamicAccessors class\r\tinstanceVariableNames: \'\''				},				#name : #'DynamicAccessors class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #DynamicAccessors,					#isMetaSide : false				},				#parent : @8,				#content : 'A DynamicAccessors is .\r\rInstance Variables\r\tx:\t\t<Object>\r\rx\r\t- xxxxx\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Reflection-Complete,			#package : #Reflection-Complete,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '77' ],		#self : OmReference [ '78' ],		#time : DateAndTime [ '2024-01-14T00:39:57.050737+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #HaltDemo\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #HaltDemo,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'HaltDemo class\r\tinstanceVariableNames: \'\''				},				#name : #'HaltDemo class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #HaltDemo,					#isMetaSide : false				},				#parent : @8,				#content : 'HaltDemo new foo.\rHaltDemo new bar.\r\rOnly the second halts within foo.',				#stamp : 'on 3/28/2006 15:56'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'HaltDemo new foo.\rHaltDemo new bar.\r\rOnly the second halts within foo.',		#newStamp : 'on 3/28/2006 15:56'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '78' ],		#self : OmReference [ '79' ],		#time : DateAndTime [ '2024-01-14T00:39:57.052615+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #HaltDemo\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Reflection-Complete\''			},			#name : #HaltDemo,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'HaltDemo class\r\tinstanceVariableNames: \'\''				},				#name : #'HaltDemo class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #HaltDemo,					#isMetaSide : false				},				#parent : @8,				#content : 'HaltDemo new foo.\rHaltDemo new bar.\r\rOnly the second halts within foo.',				#stamp : 'on 3/28/2006 15:56'			},			#classVariables : OrderedCollection [ ],			#category : #Reflection-Complete,			#package : #Reflection-Complete,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '79' ],		#self : OmReference [ '80' ],		#time : DateAndTime [ '2024-01-14T00:39:57.056913+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #LoggingMethodWrapper\r\tinstanceVariableNames: \'method reference invocationCount\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #LoggingMethodWrapper,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LoggingMethodWrapper,						#isMetaSide : false					},					#name : #method,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LoggingMethodWrapper,						#isMetaSide : false					},					#name : #reference,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LoggingMethodWrapper,						#isMetaSide : false					},					#name : #invocationCount,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LoggingMethodWrapper class\r\tinstanceVariableNames: \'\''				},				#name : #'LoggingMethodWrapper class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LoggingMethodWrapper,					#isMetaSide : false				},				#parent : @8,				#content : 'A LoggingMethodWrapper is .\r\rInstance Variables\r\tinvocationCount:\t\t<Object>\r\tmethod:\t\t<Object>\r\treference:\t\t<Object>\r\rinvocationCount\r\t- xxxxx\r\rmethod\r\t- xxxxx\r\rreference\r\t- xxxxx\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'A LoggingMethodWrapper is .\r\rInstance Variables\r\tinvocationCount:\t\t<Object>\r\tmethod:\t\t<Object>\r\treference:\t\t<Object>\r\rinvocationCount\r\t- xxxxx\r\rmethod\r\t- xxxxx\r\rreference\r\t- xxxxx\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '80' ],		#self : OmReference [ '81' ],		#time : DateAndTime [ '2024-01-14T00:39:57.057974+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #LoggingMethodWrapper\r\tinstanceVariableNames: \'method reference invocationCount\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Reflection-Complete\''			},			#name : #LoggingMethodWrapper,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LoggingMethodWrapper,						#isMetaSide : false					},					#name : #method,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LoggingMethodWrapper,						#isMetaSide : false					},					#name : #reference,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LoggingMethodWrapper,						#isMetaSide : false					},					#name : #invocationCount,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LoggingMethodWrapper class\r\tinstanceVariableNames: \'\''				},				#name : #'LoggingMethodWrapper class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LoggingMethodWrapper,					#isMetaSide : false				},				#parent : @8,				#content : 'A LoggingMethodWrapper is .\r\rInstance Variables\r\tinvocationCount:\t\t<Object>\r\tmethod:\t\t<Object>\r\treference:\t\t<Object>\r\rinvocationCount\r\t- xxxxx\r\rmethod\r\t- xxxxx\r\rreference\r\t- xxxxx\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Reflection-Complete,			#package : #Reflection-Complete,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '81' ],		#self : OmReference [ '82' ],		#time : DateAndTime [ '2024-01-14T00:39:57.070612+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'ProtoObject',				#traitCompositionSource : '{}',				#definitionSource : 'ProtoObject subclass: #LoggingProxy\r\tinstanceVariableNames: \'subject invocationCount\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #LoggingProxy,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LoggingProxy,						#isMetaSide : false					},					#name : #subject,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LoggingProxy,						#isMetaSide : false					},					#name : #invocationCount,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LoggingProxy class\r\tinstanceVariableNames: \'\''				},				#name : #'LoggingProxy class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LoggingProxy,					#isMetaSide : false				},				#parent : @8,				#content : 'A LoggingProxy is .\r\rInstance Variables\r\tinvocationCount:\t\t<Object>\r\tsubject:\t\t<Object>\r\rinvocationCount\r\t- xxxxx\r\rsubject\r\t- xxxxx\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'A LoggingProxy is .\r\rInstance Variables\r\tinvocationCount:\t\t<Object>\r\tsubject:\t\t<Object>\r\rinvocationCount\r\t- xxxxx\r\rsubject\r\t- xxxxx\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '82' ],		#self : OmReference [ '83' ],		#time : DateAndTime [ '2024-01-14T00:39:57.071554+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'ProtoObject',				#traitCompositionSource : '{}',				#definitionSource : 'ProtoObject subclass: #LoggingProxy\r\tinstanceVariableNames: \'subject invocationCount\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Reflection-Complete\''			},			#name : #LoggingProxy,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LoggingProxy,						#isMetaSide : false					},					#name : #subject,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LoggingProxy,						#isMetaSide : false					},					#name : #invocationCount,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LoggingProxy class\r\tinstanceVariableNames: \'\''				},				#name : #'LoggingProxy class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LoggingProxy,					#isMetaSide : false				},				#parent : @8,				#content : 'A LoggingProxy is .\r\rInstance Variables\r\tinvocationCount:\t\t<Object>\r\tsubject:\t\t<Object>\r\rinvocationCount\r\t- xxxxx\r\rsubject\r\t- xxxxx\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Reflection-Complete,			#package : #Reflection-Complete,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '83' ],		#self : OmReference [ '84' ],		#time : DateAndTime [ '2024-01-14T00:39:57.075787+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'ProtoObject',				#traitCompositionSource : '{}',				#definitionSource : 'ProtoObject subclass: #MinimalObject\r\tinstanceVariableNames: \'subject calls\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #MinimalObject,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MinimalObject,						#isMetaSide : false					},					#name : #subject,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MinimalObject,						#isMetaSide : false					},					#name : #calls,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MinimalObject class\r\tinstanceVariableNames: \'\''				},				#name : #'MinimalObject class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MinimalObject,					#isMetaSide : false				},				#parent : @8,				#content : 'A MinimalObject is .\r\rInstance Variables\r\tcalls:\t\t<Object>\r\tsubject:\t\t<Object>\r\rcalls\r\t- xxxxx\r\rsubject\r\t- xxxxx\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'A MinimalObject is .\r\rInstance Variables\r\tcalls:\t\t<Object>\r\tsubject:\t\t<Object>\r\rcalls\r\t- xxxxx\r\rsubject\r\t- xxxxx\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '84' ],		#self : OmReference [ '85' ],		#time : DateAndTime [ '2024-01-14T00:39:57.076797+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'ProtoObject',				#traitCompositionSource : '{}',				#definitionSource : 'ProtoObject subclass: #MinimalObject\r\tinstanceVariableNames: \'subject calls\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Reflection-Complete\''			},			#name : #MinimalObject,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MinimalObject,						#isMetaSide : false					},					#name : #subject,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #MinimalObject,						#isMetaSide : false					},					#name : #calls,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MinimalObject class\r\tinstanceVariableNames: \'\''				},				#name : #'MinimalObject class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MinimalObject,					#isMetaSide : false				},				#parent : @8,				#content : 'A MinimalObject is .\r\rInstance Variables\r\tcalls:\t\t<Object>\r\tsubject:\t\t<Object>\r\rcalls\r\t- xxxxx\r\rsubject\r\t- xxxxx\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Reflection-Complete,			#package : #Reflection-Complete,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '85' ],		#self : OmReference [ '86' ],		#time : DateAndTime [ '2024-01-14T00:39:57.113255+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AnonymousObjectTest,				#isMetaSide : false			},			#name : #testCount,			#protocol : #running,			#sourceCode : 'testCount\r\t"Transcript closeAllViews; open"\r\t| set anonClass |\r\tset := Set new.\r\tself assert: set size = 0.\r\r\tanonClass := Behavior new.\r\tanonClass superclass: Set;\r\t\tsetFormat: Set format;\r\t\tmethodDictionary: MethodDictionary new.\r\t\r\t"anonClass compile: \'class ^ super class superclass\'. doesn\'t work since class is inlined"\r\tanonClass compile: \'add: anObject Transcript show: \'\'adding \'\', anObject printString; cr. ^ super add: anObject\'.\r\t\r\tself assert: set class = Set.\r\tself assert: set size = 0.\r\r\tset add: 1.\r\tself assert: set size = 1.\r\t\r\tset primitiveChangeClassTo: anonClass new.\r\t\r\tself assert: set class ~= Set. \t\t\t\t":-(" \r\tset add: 2.\r\tself assert: set size = 2.\r',			#stamp : 'jjddpp 10/4/2012 15:36',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '86' ],		#self : OmReference [ '87' ],		#time : DateAndTime [ '2024-01-14T00:39:57.116499+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DynamicAccessorsTest,				#isMetaSide : false			},			#name : #tearDown,			#protocol : #running,			#sourceCode : 'tearDown\r\t"DynamicAccessors methodDict removeDangerouslyKey: #x ifAbsent: []"\r\tDynamicAccessors removeSelector: #x.',			#stamp : 'jjddpp 10/22/2014 18:55',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '87' ],		#self : OmReference [ '88' ],		#time : DateAndTime [ '2024-01-14T00:39:57.117636+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DynamicAccessorsTest,				#isMetaSide : false			},			#name : #testAccessors,			#protocol : #running,			#sourceCode : 'testAccessors\r\tself deny: (DynamicAccessors methodDict keys includes: #x).\r\tself assert: DynamicAccessors new x = nil.\r\tself assert: (DynamicAccessors methodDict keys includes: #x).',			#stamp : 'onierstrasz 6/8/2009 15:43',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '88' ],		#self : OmReference [ '89' ],		#time : DateAndTime [ '2024-01-14T00:39:57.118427+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LoggingProxyTest,				#isMetaSide : false			},			#name : #testDelegation,			#protocol : #running,			#sourceCode : 'testDelegation\r\t| point |\r\tpoint := 1@2.\r\tLoggingProxy new become: point.\r\tself assert: point invocationCount = 0.\r\tself assert: point + (3@4) = (4@6).\r\tself assert: point invocationCount = 1.',			#stamp : 'onierstrasz 6/10/2009 11:28',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '89' ],		#self : OmReference [ '90' ],		#time : DateAndTime [ '2024-01-14T00:39:57.119079+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LoggingProxyTest,				#isMetaSide : false			},			#name : #testSelf,			#protocol : #running,			#sourceCode : 'testSelf\r\t| point |\r\tpoint := 1 @ 2.\r\tLoggingProxy new become: point.\r\tself assert: point invocationCount = 0.\r\tself assert: (point rectangle: 3 @ 4) area = 4.\r\t"rectangle: does two self-sends"\r\t"oops -- self sends are not intercepted"\r\tself deny: point invocationCount = 4',			#stamp : 'jjddpp 9/3/2019 08:47',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '90' ],		#self : OmReference [ '91' ],		#time : DateAndTime [ '2024-01-14T00:39:57.119669+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MethodWrapperTest,				#isMetaSide : false			},			#name : #testAnswer42,			#protocol : #'as yet unclassified',			#sourceCode : 'testAnswer42\r\t| demoClass |\r\tObject subclass: #Demo\r\t\tinstanceVariableNames: \'\'\r\t\tclassVariableNames: \'\'\r\t\tpoolDictionaries: \'\'\r\t\tcategory: \'Demo\'.\r\r\tdemoClass := Smalltalk at: #Demo.\r\r\tself should: [demoClass new answer42] raise: MessageNotUnderstood.\r\r\tdemoClass methodDict at: #answer42 put: ObjectsAsMethodsExample new.\r\r\tself assert: demoClass new answer42 = 42.\r\r\tdemoClass removeFromSystem ',			#stamp : 'FirstnameLastname 9/22/2009 16:37',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '91' ],		#self : OmReference [ '92' ],		#time : DateAndTime [ '2024-01-14T00:39:57.120297+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MinimalObjectTest,				#isMetaSide : false			},			#name : #testCallCount,			#protocol : #running,			#sourceCode : 'testCallCount\r\t"Transcript closeAllViews; open"\r\t| set minObject |\r\t"create subject and wrapper"\r\tset := Set new.\t\r\tminObject := MinimalObject new.\r\r\tset add: 0.\r\tself assert: minObject MOcalls = 0.\r\r\t"swap the pointers"\r\tset become: minObject.\r\tset add: 1; add: 2.\r\tself assert: set MOcalls = 2.\r\r\t"swap the pointers"\r\tminObject become: set.\r\tset add: 3.\r\tself assert: minObject MOcalls = 2.\r',			#stamp : 'jjddpp 10/4/2012 15:29',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '92' ],		#self : OmReference [ '93' ],		#time : DateAndTime [ '2024-01-14T00:39:57.120866+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ReflectionTest,				#isMetaSide : false			},			#name : #testBecome,			#protocol : #running,			#sourceCode : 'testBecome\r\t| pt1 pt2 pt3 |\r\tpt1 := 0@0.\r\tpt2 := pt1.\r\tpt3 := 100@100.\r\tpt1 become: pt3.\r\tself assert: pt1 = (100@100).\r\tself assert: pt1 == pt2.\r\tself assert: pt3 = (0@0).',			#stamp : 'on 3/24/2006 16:52',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '93' ],		#self : OmReference [ '94' ],		#time : DateAndTime [ '2024-01-14T00:39:57.121408+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ReflectionTest,				#isMetaSide : false			},			#name : #testBecomeForward,			#protocol : #running,			#sourceCode : 'testBecomeForward\r\t| pt1 pt2 pt3 |\r\tpt1 := 0@0.\r\tpt2 := pt1.\r\tpt3 := 100@100.\r\tpt1 becomeForward: pt3.\r\tself assert: pt1 = (100@100).\r\tself assert: pt1 == pt2.\r\tself assert: pt2 == pt3.\r',			#stamp : 'on 3/24/2006 16:51',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '94' ],		#self : OmReference [ '95' ],		#time : DateAndTime [ '2024-01-14T00:39:57.121952+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ReflectionTest,				#isMetaSide : false			},			#name : #testPrimitiveChangeClassTo,			#protocol : #running,			#sourceCode : 'testPrimitiveChangeClassTo\r\t| behavior model |\r\tbehavior := Behavior new.\r\tbehavior superclass: Model.\r\tbehavior setFormat: Model format.\r\tmodel := Model new.\r\tmodel primitiveChangeClassTo: behavior new.\r\tbehavior compile: \'thisIsATest ^ 2\'.\r\tself assert: model thisIsATest = 2.\r\tself should: [ Model new thisIsATest ] raise: MessageNotUnderstood',			#stamp : 'jjddpp 9/3/2019 08:46',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '95' ],		#self : OmReference [ '96' ],		#time : DateAndTime [ '2024-01-14T00:39:57.124083+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Continuation class',				#isMetaSide : true			},			#name : #'callcc:',			#protocol : #'*Reflection-Complete',			#sourceCode : 'callcc: aBlock\r\t^ self currentDo: aBlock',			#stamp : 'jjddpp 10/23/2014 17:11',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '96' ],		#self : OmReference [ '97' ],		#time : DateAndTime [ '2024-01-14T00:39:57.125067+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BlockClosure,				#isMetaSide : false			},			#name : #'whileTrueCC:',			#protocol : #'*Reflection-Complete',			#sourceCode : 'whileTrueCC: aBlock\r\t"versió de whileTrue: implementada amb callcc:"\r\r\t| cont |\r\tcont := Continuation callcc: [ :cc | cc ].\r\tself value\r\t\tifTrue: [ aBlock value.\r\t\t\t       cont value: cont ]\r\t\tifFalse: [ ^ nil ] ',			#stamp : 'jjddpp 9/3/2019 19:16',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '97' ],		#self : OmReference [ '98' ],		#time : DateAndTime [ '2024-01-14T00:39:57.125804+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DynamicAccessors,				#isMetaSide : false			},			#name : #'doesNotUnderstand:',			#protocol : #error-handling,			#sourceCode : 'doesNotUnderstand: aMessage \r\t| messageName |\r\tmessageName := aMessage selector asString.\r\t(self class instVarNames includes: messageName)\r\t\tifTrue: [self class compile: messageName , String cr , \' ^ \' , messageName.\r\t\t\t^ aMessage sendTo: self].\r\tsuper doesNotUnderstand: aMessage',			#stamp : 'onierstrasz 6/8/2009 15:35',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '98' ],		#self : OmReference [ '99' ],		#time : DateAndTime [ '2024-01-14T00:39:57.126558+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HaltDemo,				#isMetaSide : false			},			#name : #bar,			#protocol : #'as yet unclassified',			#sourceCode : 'bar\r\t^ (self foo), \'bar\'',			#stamp : 'on 3/28/2006 15:01',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '99' ],		#self : OmReference [ '100' ],		#time : DateAndTime [ '2024-01-14T00:39:57.127107+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HaltDemo,				#isMetaSide : false			},			#name : #foo,			#protocol : #'as yet unclassified',			#sourceCode : 'foo\r\tself haltIf: #bar.\r\t^ \'foo\'',			#stamp : 'on 3/28/2006 15:01',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '100' ],		#self : OmReference [ '101' ],		#time : DateAndTime [ '2024-01-14T00:39:57.127603+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HaltDemo,				#isMetaSide : false			},			#name : #'haltIf:',			#protocol : #'as yet unclassified',			#sourceCode : 'haltIf: aSelector\r\t| context |\r\tcontext := thisContext.\r\t[context sender isNil]\r\t\twhileFalse:\r\t\t\t[context := context sender.\r\t\t\t(context selector = aSelector)\r\t\t\tifTrue: [ Halt signal ] ].\r',			#stamp : 'on 3/28/2006 14:59',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '101' ],		#self : OmReference [ '102' ],		#time : DateAndTime [ '2024-01-14T00:39:57.1282+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'LoggingMethodWrapper class',				#isMetaSide : true			},			#name : #example,			#protocol : #examples,			#sourceCode : 'example\r\t| logger |\r\tlogger := LoggingMethodWrapper on: Integer>>#factorial.\r\r\tlogger invocationCount.\r\t5 factorial.\r\tlogger invocationCount.\r\r\tlogger install.\r\t[ 5 factorial ] ensure: [logger uninstall].\r\tlogger invocationCount.\r\r\t10 factorial.\r\tlogger invocationCount. \t',			#stamp : 'jjddpp 10/18/2012 12:01',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '102' ],		#self : OmReference [ '103' ],		#time : DateAndTime [ '2024-01-14T00:39:57.128761+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'LoggingMethodWrapper class',				#isMetaSide : true			},			#name : #'on:',			#protocol : #'instance creation',			#sourceCode : 'on: aCompiledMethod\r\t^ self new initializeOn: aCompiledMethod',			#stamp : 'jjddpp 10/8/2012 11:22',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '103' ],		#self : OmReference [ '104' ],		#time : DateAndTime [ '2024-01-14T00:39:57.129296+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LoggingMethodWrapper,				#isMetaSide : false			},			#name : #flushCache,			#protocol : #auxiliary,			#sourceCode : 'flushCache',			#stamp : 'jjddpp 10/8/2012 11:23',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '104' ],		#self : OmReference [ '105' ],		#time : DateAndTime [ '2024-01-14T00:39:57.129797+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LoggingMethodWrapper,				#isMetaSide : false			},			#name : #'initializeOn:',			#protocol : #initialize-release,			#sourceCode : 'initializeOn: aCompiledMethod\r\tmethod := aCompiledMethod.\r\treference := aCompiledMethod methodReference.\r\tinvocationCount := 0',			#stamp : 'jjddpp 10/8/2012 11:22',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '105' ],		#self : OmReference [ '106' ],		#time : DateAndTime [ '2024-01-14T00:39:57.131997+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LoggingMethodWrapper,				#isMetaSide : false			},			#name : #install,			#protocol : #running,			#sourceCode : 'install\r\treference actualClass methodDictionary\r\t\tat: reference selector\r\t\tput: self',			#stamp : 'jjddpp 9/4/2019 14:51',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '106' ],		#self : OmReference [ '107' ],		#time : DateAndTime [ '2024-01-14T00:39:57.13274+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LoggingMethodWrapper,				#isMetaSide : false			},			#name : #invocationCount,			#protocol : #accessing,			#sourceCode : 'invocationCount\r\t^ invocationCount',			#stamp : 'jjddpp 10/8/2012 11:25',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '107' ],		#self : OmReference [ '108' ],		#time : DateAndTime [ '2024-01-14T00:39:57.1333+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LoggingMethodWrapper,				#isMetaSide : false			},			#name : #'invocationCount:',			#protocol : #accessing,			#sourceCode : 'invocationCount: anObject\r\tinvocationCount := anObject',			#stamp : 'jjddpp 10/8/2012 11:25',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '108' ],		#self : OmReference [ '109' ],		#time : DateAndTime [ '2024-01-14T00:39:57.13379+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LoggingMethodWrapper,				#isMetaSide : false			},			#name : #method,			#protocol : #accessing,			#sourceCode : 'method\r\t^ method',			#stamp : 'jjddpp 10/8/2012 11:25',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '109' ],		#self : OmReference [ '110' ],		#time : DateAndTime [ '2024-01-14T00:39:57.134277+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LoggingMethodWrapper,				#isMetaSide : false			},			#name : #'method:',			#protocol : #accessing,			#sourceCode : 'method: anObject\r\tmethod := anObject',			#stamp : 'jjddpp 10/8/2012 11:25',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '110' ],		#self : OmReference [ '111' ],		#time : DateAndTime [ '2024-01-14T00:39:57.134769+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LoggingMethodWrapper,				#isMetaSide : false			},			#name : #'methodClass:',			#protocol : #auxiliary,			#sourceCode : 'methodClass: aMethodClass',			#stamp : 'jjddpp 10/8/2012 11:24',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '111' ],		#self : OmReference [ '112' ],		#time : DateAndTime [ '2024-01-14T00:39:57.135251+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LoggingMethodWrapper,				#isMetaSide : false			},			#name : #reference,			#protocol : #accessing,			#sourceCode : 'reference\r\t^ reference',			#stamp : 'jjddpp 10/8/2012 11:25',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '112' ],		#self : OmReference [ '113' ],		#time : DateAndTime [ '2024-01-14T00:39:57.135744+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LoggingMethodWrapper,				#isMetaSide : false			},			#name : #'reference:',			#protocol : #accessing,			#sourceCode : 'reference: anObject\r\treference := anObject',			#stamp : 'jjddpp 10/8/2012 11:25',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '113' ],		#self : OmReference [ '114' ],		#time : DateAndTime [ '2024-01-14T00:39:57.13627+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LoggingMethodWrapper,				#isMetaSide : false			},			#name : #'run:with:in:',			#protocol : #running,			#sourceCode : 'run: aSelector with: anArray in: aReceiver\r\tinvocationCount := invocationCount + 1.\r\t^ aReceiver withArgs: anArray executeMethod: method',			#stamp : 'jjddpp 10/22/2014 19:31',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '114' ],		#self : OmReference [ '115' ],		#time : DateAndTime [ '2024-01-14T00:39:57.138357+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LoggingMethodWrapper,				#isMetaSide : false			},			#name : #'selector:',			#protocol : #auxiliary,			#sourceCode : 'selector: aSymbol',			#stamp : 'jjddpp 10/8/2012 11:24',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '115' ],		#self : OmReference [ '116' ],		#time : DateAndTime [ '2024-01-14T00:39:57.139207+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LoggingMethodWrapper,				#isMetaSide : false			},			#name : #uninstall,			#protocol : #running,			#sourceCode : 'uninstall\r\treference actualClass methodDictionary\r\t\tat: reference selector\r\t\tput: method ',			#stamp : 'jjddpp 9/4/2019 14:51',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '116' ],		#self : OmReference [ '117' ],		#time : DateAndTime [ '2024-01-14T00:39:57.139966+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LoggingProxy,				#isMetaSide : false			},			#name : #'doesNotUnderstand:',			#protocol : #error-handling,			#sourceCode : 'doesNotUnderstand: aMessage \r\tTranscript show: \'performing \', aMessage printString; cr.\r\tinvocationCount := invocationCount + 1.\r\t^ aMessage sendTo: subject\r',			#stamp : 'onierstrasz 6/10/2009 11:30',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '117' ],		#self : OmReference [ '118' ],		#time : DateAndTime [ '2024-01-14T00:39:57.14049+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LoggingProxy,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialize-release,			#sourceCode : 'initialize\r\tinvocationCount := 0.\r\tsubject := self.',			#stamp : 'onierstrasz 6/10/2009 11:29',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '118' ],		#self : OmReference [ '119' ],		#time : DateAndTime [ '2024-01-14T00:39:57.140968+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LoggingProxy,				#isMetaSide : false			},			#name : #invocationCount,			#protocol : #accessing,			#sourceCode : 'invocationCount\r\t^ invocationCount',			#stamp : 'onierstrasz 6/10/2009 11:28',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '119' ],		#self : OmReference [ '120' ],		#time : DateAndTime [ '2024-01-14T00:39:57.141493+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MinimalObject class',				#isMetaSide : true			},			#name : #demo,			#protocol : #'as yet unclassified',			#sourceCode : 'demo\r\t"Transcript closeAllViews; open.\r\tMinimalObject demo"\r\t| set minObject |\r\t"create subject and wrapper"\r\tset := Set new.\t\r\tminObject := MinimalObject new.\r\r\tset add: 0.\r\r\t"swap the pointers"\r\tset become: minObject.\r\tset add: 1; add: 2.\r\r\t"swap the pointers"\r\tminObject become: set.\r\tset add: 3.\r\tset inspect.\r',			#stamp : 'on 3/30/2006 15:39',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '120' ],		#self : OmReference [ '121' ],		#time : DateAndTime [ '2024-01-14T00:39:57.14201+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MinimalObject,				#isMetaSide : false			},			#name : #MOcalls,			#protocol : #'as yet unclassified',			#sourceCode : 'MOcalls\r\t"Choose an uncommon method name"\r\t^ calls',			#stamp : 'on 4/3/2006 15:18',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '121' ],		#self : OmReference [ '122' ],		#time : DateAndTime [ '2024-01-14T00:39:57.142564+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MinimalObject,				#isMetaSide : false			},			#name : #'doesNotUnderstand:',			#protocol : #'as yet unclassified',			#sourceCode : 'doesNotUnderstand: aMessage\r\tTranscript show: \'performing \', aMessage printString; cr.\r\tcalls := calls + 1.\r\t^ subject perform: aMessage selector withArguments: aMessage arguments',			#stamp : 'on 4/3/2006 13:57',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '122' ],		#self : OmReference [ '123' ],		#time : DateAndTime [ '2024-01-14T00:39:57.143074+01:00' ],		#trigger : OmReference [ '67' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MinimalObject,				#isMetaSide : false			},			#name : #initialize,			#protocol : #'as yet unclassified',			#sourceCode : 'initialize\r\t"When we become: anotherObject, this reference will also get swapped"\r\tsubject := self.\r\tcalls := 0.',			#stamp : 'jjddpp 10/4/2012 15:29',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.134788+01:00' ],		#prior : OmReference [ '123' ],		#self : OmReference [ '124' ]	},	#content : EpCategoryAddition {		#classCategoryName : #Examples-SnakesAndLadders,		#affectedPackageName : #Examples-SnakesAndLadders	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.155707+01:00' ],		#prior : OmReference [ '124' ],		#self : OmReference [ '125' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #SnakesAndLadders\r\tinstanceVariableNames: \'players squares turn die over\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #SnakesAndLadders,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLadders,						#isMetaSide : false					},					#name : #players,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLadders,						#isMetaSide : false					},					#name : #squares,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLadders,						#isMetaSide : false					},					#name : #turn,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLadders,						#isMetaSide : false					},					#name : #die,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLadders,						#isMetaSide : false					},					#name : #over,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SnakesAndLadders class\r\tinstanceVariableNames: \'\''				},				#name : #'SnakesAndLadders class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SnakesAndLadders,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.158474+01:00' ],		#prior : OmReference [ '125' ],		#self : OmReference [ '126' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #SnakesAndLadders\r\tinstanceVariableNames: \'players squares turn die over\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #SnakesAndLadders,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLadders,						#isMetaSide : false					},					#name : #players,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLadders,						#isMetaSide : false					},					#name : #squares,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLadders,						#isMetaSide : false					},					#name : #turn,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLadders,						#isMetaSide : false					},					#name : #die,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLadders,						#isMetaSide : false					},					#name : #over,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SnakesAndLadders class\r\tinstanceVariableNames: \'\''				},				#name : #'SnakesAndLadders class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SnakesAndLadders,					#isMetaSide : false				},				#parent : @7,				#content : 'SnakesAndLadders example playToEnd\r\rA simple board game in which players roll a die to move from the starting square to the end. A square may contain a snake (moves you back) or a ladder (moves you up). If youland on a square already occupied, you go back to the start. If you move past the end, you reverse direction the remaining number of moves.\r\rSee http://en.wikipedia.org/wiki/Snakes_and_ladders for the rules of the game\r\rSnakesAndLadders has the following responsibilities:\r- enable scripting of an initial configuration of squares and players\r- keep track of the rules of the game\r- keep track whose turn it is to play\r- initiate a move\r- play a game to the end\r- report on moves and intermediate game states\r- stop when the game is over\r\rTypical usage (see the example):\r- Instantiate a new SnakesAndLadders\r- Add squares, snakes and ladders to build the game board \r- Join players\r- Play single moves or PlayToEnd',				#stamp : 'on 3/14/2006 19:05'			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'SnakesAndLadders example playToEnd\r\rA simple board game in which players roll a die to move from the starting square to the end. A square may contain a snake (moves you back) or a ladder (moves you up). If youland on a square already occupied, you go back to the start. If you move past the end, you reverse direction the remaining number of moves.\r\rSee http://en.wikipedia.org/wiki/Snakes_and_ladders for the rules of the game\r\rSnakesAndLadders has the following responsibilities:\r- enable scripting of an initial configuration of squares and players\r- keep track of the rules of the game\r- keep track whose turn it is to play\r- initiate a move\r- play a game to the end\r- report on moves and intermediate game states\r- stop when the game is over\r\rTypical usage (see the example):\r- Instantiate a new SnakesAndLadders\r- Add squares, snakes and ladders to build the game board \r- Join players\r- Play single moves or PlayToEnd',		#newStamp : 'on 3/14/2006 19:05'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.161262+01:00' ],		#prior : OmReference [ '126' ],		#self : OmReference [ '127' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #'add:',			#protocol : #initialize-release,			#sourceCode : 'add: aSquare \r\tsquares add: aSquare.\r\taSquare setPosition: squares size board: self',			#stamp : 'on 3/18/2006 15:13',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.163446+01:00' ],		#prior : OmReference [ '127' ],		#self : OmReference [ '128' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialize-release,			#sourceCode : 'initialize\r\tsuper initialize.\r\tdie := Die new.\r\tsquares := OrderedCollection new.\r\tplayers := OrderedCollection new.\r\tturn := 1.\r\tover := false.',			#stamp : 'on 3/20/2006 10:16',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.165786+01:00' ],		#prior : OmReference [ '128' ],		#self : OmReference [ '129' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #invariant,			#protocol : #initialize-release,			#sourceCode : 'invariant\r\t"Should also check that snakes and ladders lead to ordinary squares, and do not bounce\r\tpast the beginning or end of the board."\r\t^ squares size > 1\r\t\tand: [players size > 1\r\t\tand: [turn >= 1\r\t\tand: [turn <= players size]]]',			#stamp : 'jjddpp 9/4/2012 12:23',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.168301+01:00' ],		#prior : OmReference [ '129' ],		#self : OmReference [ '130' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #'join:',			#protocol : #initialize-release,			#sourceCode : 'join: aPlayer\r\tplayers add: aPlayer.\r\taPlayer moveTo: self firstSquare.\r',			#stamp : 'on 3/18/2006 12:10',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.17088+01:00' ],		#prior : OmReference [ '130' ],		#self : OmReference [ '131' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #reset,			#protocol : #initialize-release,			#sourceCode : 'reset\r\tdie := Die new.\r\tturn := 1.\r\tover := false.\r\tplayers do: [:each | each moveTo: self firstSquare ].\r\tself assert: self invariant.',			#stamp : 'on 3/16/2006 11:30',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.172705+01:00' ],		#prior : OmReference [ '131' ],		#self : OmReference [ '132' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #'at:',			#protocol : #testing,			#sourceCode : 'at: position\r\t^ squares at: position',			#stamp : 'on 3/14/2006 16:30',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.174993+01:00' ],		#prior : OmReference [ '132' ],		#self : OmReference [ '133' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #currentPlayer,			#protocol : #testing,			#sourceCode : 'currentPlayer\r\t^ players at: turn',			#stamp : 'on 3/14/2006 16:54',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.176262+01:00' ],		#prior : OmReference [ '133' ],		#self : OmReference [ '134' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #firstSquare,			#protocol : #testing,			#sourceCode : 'firstSquare\r\t^ squares first',			#stamp : 'on 3/14/2006 16:43',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.177482+01:00' ],		#prior : OmReference [ '134' ],		#self : OmReference [ '135' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #isNotOver,			#protocol : #testing,			#sourceCode : 'isNotOver\r\t^ self isOver not',			#stamp : 'on 3/18/2006 15:04',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.178523+01:00' ],		#prior : OmReference [ '135' ],		#self : OmReference [ '136' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #isOver,			#protocol : #testing,			#sourceCode : 'isOver\r\t^ over',			#stamp : 'on 3/18/2006 15:04',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.180894+01:00' ],		#prior : OmReference [ '136' ],		#self : OmReference [ '137' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #lastPosition,			#protocol : #testing,			#sourceCode : 'lastPosition\r\t^ squares size',			#stamp : 'on 3/14/2006 16:59',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.182138+01:00' ],		#prior : OmReference [ '137' ],		#self : OmReference [ '138' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #turn,			#protocol : #testing,			#sourceCode : 'turn\r\t^ turn',			#stamp : 'on 3/14/2006 16:22',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.18356+01:00' ],		#prior : OmReference [ '138' ],		#self : OmReference [ '139' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #checkResult,			#protocol : #playing,			#sourceCode : 'checkResult\r\t^ self currentPlayer position = self lastPosition\r\t\tifTrue: [\r\t\t\tover := true.\r\t\t\t\' -- \', self currentPlayer asString, \' wins!\'\r\t\t\t]\r\t\tifFalse: [ \'\' ]',			#stamp : 'on 3/14/2006 17:10',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.185362+01:00' ],		#prior : OmReference [ '139' ],		#self : OmReference [ '140' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #playOneMove,			#protocol : #playing,			#sourceCode : 'playOneMove\r\t| result |\r\tself assert: self invariant.\r\t^ self isOver \r\t\tifTrue: [\'The game is over!\']\r\t\tifFalse: \r\t\t\t[result := (self currentPlayer moveWith: die) , self checkResult.\r\t\t\tself upDateTurn.\r\t\t\tresult]',			#stamp : 'on 5/17/2006 16:49',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.187298+01:00' ],		#prior : OmReference [ '140' ],		#self : OmReference [ '141' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #playToEnd,			#protocol : #playing,			#sourceCode : 'playToEnd\r\t"SnakesAndLadders example playToEnd"\r\tTranscript open.\r\tTranscript\r\t\tshow: self asString;\r\t\tcr;\r\t\tcr.\r\t[self isNotOver] whileTrue: \r\t\t\t[Transcript\r\t\t\t\tshow: self playOneMove asString;\r\t\t\t\tcr.\r\t\t\tTranscript\r\t\t\t\tshow: self asString;\r\t\t\t\tcr;\r\t\t\t\tcr]',			#stamp : 'jjddpp 9/9/2012 19:21',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.18854+01:00' ],		#prior : OmReference [ '141' ],		#self : OmReference [ '142' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #upDateTurn,			#protocol : #playing,			#sourceCode : 'upDateTurn\r\tturn := 1 + (turn\\\\players size).',			#stamp : 'on 3/14/2006 16:21',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.189599+01:00' ],		#prior : OmReference [ '142' ],		#self : OmReference [ '143' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #players,			#protocol : #accessors,			#sourceCode : 'players\r\t"needed for testing"\r\t^ players',			#stamp : 'on 3/15/2006 15:01',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.190631+01:00' ],		#prior : OmReference [ '143' ],		#self : OmReference [ '144' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #'setDie:',			#protocol : #accessors,			#sourceCode : 'setDie: aDie\r\t"For testing only. Can play the game with a loaded die."\r\tdie := aDie.',			#stamp : 'on 3/15/2006 13:29',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.193596+01:00' ],		#prior : OmReference [ '144' ],		#self : OmReference [ '145' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\tsquares do: [:each | each printOn: aStream].',			#stamp : 'jjddpp 9/4/2012 11:57',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.196984+01:00' ],		#prior : OmReference [ '145' ],		#self : OmReference [ '146' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'SnakesAndLadders class',				#isMetaSide : true			},			#name : #example,			#protocol : #documentation,			#sourceCode : 'example\r\t"self example playToEnd"\r\r\t^ (self new)\r\t\tadd: FirstSquare new;\r\t\tadd: (LadderSquare forward: 4);\r\t\tadd: BoardSquare new;\r\t\tadd: BoardSquare new;\r\t\tadd: BoardSquare new;\r\t\tadd: BoardSquare new;\r\t\tadd: (LadderSquare forward: 2);\r\t\tadd: BoardSquare new;\r\t\tadd: BoardSquare new;\r\t\tadd: BoardSquare new;\r\t\tadd: (SnakeSquare back: 6);\r\t\tadd: BoardSquare new;\r\t\tjoin: (GamePlayer named: \'Jack\');\r\t\tjoin: (GamePlayer named: \'Jill\');\r\t\tyourself',			#stamp : 'on 10/28/2007 13:51',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.198769+01:00' ],		#prior : OmReference [ '146' ],		#self : OmReference [ '147' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'SnakesAndLadders class',				#isMetaSide : true			},			#name : #example2,			#protocol : #documentation,			#sourceCode : 'example2\r\t"self example2 playToEnd"\r\r\t^ (self new)\r\t\tadd: FirstSquare new;\r\t\tadd: BoardSquare new;\r\t\tadd: (LadderSquare forward: 4);\r\t\tadd: BoardSquare new;\r\t\tadd: BoardSquare new;\r\t\tadd: (SnakeSquare back: 2);\r\t\tadd: BoardSquare new;\r\t\tadd: (LadderSquare forward: 3);\r\t\tadd: BoardSquare new;\r\t\tadd: BoardSquare new;\r\t\tadd: (SnakeSquare back: 4);\r\t\tadd: BoardSquare new;\r\t\tadd: BoardSquare new;\r\t\tjoin: (GamePlayer named: \'Jack\');\r\t\tjoin: (GamePlayer named: \'Jill\');\r\t\tyourself',			#stamp : 'on 10/28/2007 13:51',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.202345+01:00' ],		#prior : OmReference [ '147' ],		#self : OmReference [ '148' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Die\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #Die,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Die class\r\tinstanceVariableNames: \'\''				},				#name : #'Die class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Die,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.204024+01:00' ],		#prior : OmReference [ '148' ],		#self : OmReference [ '149' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Die\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #Die,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Die class\r\tinstanceVariableNames: \'\''				},				#name : #'Die class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Die,					#isMetaSide : false				},				#parent : @7,				#content : 'Responsibilities:\r- Yields a random number from 1 to 6 ;-)',				#stamp : 'on 3/14/2006 19:06'			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Responsibilities:\r- Yields a random number from 1 to 6 ;-)',		#newStamp : 'on 3/14/2006 19:06'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.205053+01:00' ],		#prior : OmReference [ '149' ],		#self : OmReference [ '150' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Die,				#isMetaSide : false			},			#name : #roll,			#protocol : #playing,			#sourceCode : 'roll\r\t^ (1 to: 6) atRandom',			#stamp : 'on 3/14/2006 15:41',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.20965+01:00' ],		#prior : OmReference [ '150' ],		#self : OmReference [ '151' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #GamePlayer\r\tinstanceVariableNames: \'name square\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #GamePlayer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #GamePlayer,						#isMetaSide : false					},					#name : #name,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #GamePlayer,						#isMetaSide : false					},					#name : #square,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'GamePlayer class\r\tinstanceVariableNames: \'\''				},				#name : #'GamePlayer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #GamePlayer,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.211862+01:00' ],		#prior : OmReference [ '151' ],		#self : OmReference [ '152' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #GamePlayer\r\tinstanceVariableNames: \'name square\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #GamePlayer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #GamePlayer,						#isMetaSide : false					},					#name : #name,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #GamePlayer,						#isMetaSide : false					},					#name : #square,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'GamePlayer class\r\tinstanceVariableNames: \'\''				},				#name : #'GamePlayer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #GamePlayer,					#isMetaSide : false				},				#parent : @7,				#content : 'Responsibilities:\r- Keep track of the square you are on\r- Roll the die\r- Attempt to move the resulting number of squares',				#stamp : 'on 3/14/2006 19:07'			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Responsibilities:\r- Keep track of the square you are on\r- Roll the die\r- Attempt to move the resulting number of squares',		#newStamp : 'on 3/14/2006 19:07'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.213044+01:00' ],		#prior : OmReference [ '152' ],		#self : OmReference [ '153' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GamePlayer,				#isMetaSide : false			},			#name : #invariant,			#protocol : #initialize-release,			#sourceCode : 'invariant\r\t^ square notNil\r\t\tand: [ name notNil ]',			#stamp : 'on 3/18/2006 12:08',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.214282+01:00' ],		#prior : OmReference [ '153' ],		#self : OmReference [ '154' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GamePlayer,				#isMetaSide : false			},			#name : #'setName:',			#protocol : #initialize-release,			#sourceCode : 'setName: aName\r\tname := aName.',			#stamp : 'on 3/18/2006 12:49',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.21537+01:00' ],		#prior : OmReference [ '154' ],		#self : OmReference [ '155' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GamePlayer,				#isMetaSide : false			},			#name : #leaveCurrentSquare,			#protocol : #private,			#sourceCode : 'leaveCurrentSquare\r\tsquare notNil ifTrue: [ square remove: self ].',			#stamp : 'on 3/14/2006 15:53',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.216494+01:00' ],		#prior : OmReference [ '155' ],		#self : OmReference [ '156' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GamePlayer,				#isMetaSide : false			},			#name : #'moveTo:',			#protocol : #playing,			#sourceCode : 'moveTo: aSquare\r\tself leaveCurrentSquare.\r\tsquare := aSquare landHere: self.\r',			#stamp : 'on 3/18/2006 15:21',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.217852+01:00' ],		#prior : OmReference [ '156' ],		#self : OmReference [ '157' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GamePlayer,				#isMetaSide : false			},			#name : #'moveWith:',			#protocol : #playing,			#sourceCode : 'moveWith: aDie\r\t| roll destination |\r\tself assert: self invariant.\r\troll := aDie roll.\r\tdestination := square forwardBy: roll.\r\tself moveTo: destination.\r\t^ name, \' rolls \', roll asString, \' and lands at \', square asString',			#stamp : 'on 3/23/2006 09:04',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.219019+01:00' ],		#prior : OmReference [ '157' ],		#self : OmReference [ '158' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GamePlayer,				#isMetaSide : false			},			#name : #name,			#protocol : #testing,			#sourceCode : 'name\r\t^ name',			#stamp : 'on 3/15/2006 14:57',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.221701+01:00' ],		#prior : OmReference [ '158' ],		#self : OmReference [ '159' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GamePlayer,				#isMetaSide : false			},			#name : #position,			#protocol : #testing,			#sourceCode : 'position\r\t^ square position',			#stamp : 'on 3/14/2006 17:03',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.222902+01:00' ],		#prior : OmReference [ '159' ],		#self : OmReference [ '160' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GamePlayer,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\taStream nextPutAll: name',			#stamp : 'on 3/14/2006 15:32',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.225256+01:00' ],		#prior : OmReference [ '160' ],		#self : OmReference [ '161' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'GamePlayer class',				#isMetaSide : true			},			#name : #'named:',			#protocol : #'instance creation',			#sourceCode : 'named: aName\r\t^ self new setName: aName',			#stamp : 'on 3/18/2006 12:48',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.228494+01:00' ],		#prior : OmReference [ '161' ],		#self : OmReference [ '162' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #BoardSquare\r\tinstanceVariableNames: \'position player board\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #BoardSquare,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #BoardSquare,						#isMetaSide : false					},					#name : #position,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #BoardSquare,						#isMetaSide : false					},					#name : #player,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #BoardSquare,						#isMetaSide : false					},					#name : #board,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BoardSquare class\r\tinstanceVariableNames: \'\''				},				#name : #'BoardSquare class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BoardSquare,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.229625+01:00' ],		#prior : OmReference [ '162' ],		#self : OmReference [ '163' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #BoardSquare\r\tinstanceVariableNames: \'position player board\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #BoardSquare,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #BoardSquare,						#isMetaSide : false					},					#name : #position,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #BoardSquare,						#isMetaSide : false					},					#name : #player,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #BoardSquare,						#isMetaSide : false					},					#name : #board,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BoardSquare class\r\tinstanceVariableNames: \'\''				},				#name : #'BoardSquare class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BoardSquare,					#isMetaSide : false				},				#parent : @7,				#content : 'Responsibilities:\r- Remember position in the board\r- Keep track of any players on this square\r- Send on any players passing through\r- Displays itself with its position and any player who might be on it, e.g., [7 Jack]',				#stamp : 'on 3/14/2006 19:27'			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Responsibilities:\r- Remember position in the board\r- Keep track of any players on this square\r- Send on any players passing through\r- Displays itself with its position and any player who might be on it, e.g., [7 Jack]',		#newStamp : 'on 3/14/2006 19:27'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.231037+01:00' ],		#prior : OmReference [ '163' ],		#self : OmReference [ '164' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BoardSquare,				#isMetaSide : false			},			#name : #'backwardBy:',			#protocol : #playing,			#sourceCode : 'backwardBy: squares \r\t^ squares = 0 \r\t\tifTrue: [self destination]\r\t\tifFalse: \r\t\t\t[self isFirstSquare \r\t\t\t\tifTrue: [self nextSquare forwardBy: squares - 1]\r\t\t\t\tifFalse: [self previousSquare backwardBy: squares - 1]]',			#stamp : 'on 3/15/2006 15:26',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.232449+01:00' ],		#prior : OmReference [ '164' ],		#self : OmReference [ '165' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BoardSquare,				#isMetaSide : false			},			#name : #destination,			#protocol : #playing,			#sourceCode : 'destination\r\t^ self',			#stamp : 'on 3/15/2006 15:26',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.235308+01:00' ],		#prior : OmReference [ '165' ],		#self : OmReference [ '166' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BoardSquare,				#isMetaSide : false			},			#name : #'forwardBy:',			#protocol : #playing,			#sourceCode : 'forwardBy: squares\r\tself assert: self invariant.\r\t^ squares = 0 \r\t\tifTrue: [self destination]\r\t\tifFalse: \r\t\t\t[self isLastSquare \r\t\t\t\tifFalse: [self nextSquare forwardBy: squares - 1]\r\t\t\t\tifTrue: [self previousSquare backwardBy: squares - 1]]',			#stamp : 'on 3/18/2006 11:43',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.2367+01:00' ],		#prior : OmReference [ '166' ],		#self : OmReference [ '167' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BoardSquare,				#isMetaSide : false			},			#name : #'landHere:',			#protocol : #playing,			#sourceCode : 'landHere: aPlayer\r\t^ self isOccupied\r\t\tifTrue: [ board firstSquare landHere: aPlayer ]\r\t\tifFalse: [ player := aPlayer. self ]',			#stamp : 'on 3/15/2006 15:43',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.237786+01:00' ],		#prior : OmReference [ '167' ],		#self : OmReference [ '168' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BoardSquare,				#isMetaSide : false			},			#name : #nextSquare,			#protocol : #playing,			#sourceCode : 'nextSquare\r\tself assert: self isLastSquare not.\r\t^ board at: position + 1',			#stamp : 'on 3/14/2006 16:32',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.238787+01:00' ],		#prior : OmReference [ '168' ],		#self : OmReference [ '169' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BoardSquare,				#isMetaSide : false			},			#name : #previousSquare,			#protocol : #playing,			#sourceCode : 'previousSquare\r\tself assert: self isFirstSquare not.\r\t^ board at: position - 1',			#stamp : 'on 3/14/2006 16:32',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.239955+01:00' ],		#prior : OmReference [ '169' ],		#self : OmReference [ '170' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BoardSquare,				#isMetaSide : false			},			#name : #'remove:',			#protocol : #playing,			#sourceCode : 'remove: aPlayer\r\tself assert: player = aPlayer.\r\tplayer := nil.',			#stamp : 'on 3/14/2006 16:14',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.241205+01:00' ],		#prior : OmReference [ '170' ],		#self : OmReference [ '171' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BoardSquare,				#isMetaSide : false			},			#name : #contents,			#protocol : #printing,			#sourceCode : 'contents\r\t^ self isOccupied\r\t\tifTrue: [ \' \', player asString ]\r\t\tifFalse: [ \'\' ]',			#stamp : 'on 3/14/2006 17:18',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.242405+01:00' ],		#prior : OmReference [ '171' ],		#self : OmReference [ '172' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BoardSquare,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\taStream nextPutAll: \'[\', position printString, self contents, \']\'.',			#stamp : 'on 3/14/2006 16:08',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.245141+01:00' ],		#prior : OmReference [ '172' ],		#self : OmReference [ '173' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BoardSquare,				#isMetaSide : false			},			#name : #invariant,			#protocol : #initialize-release,			#sourceCode : 'invariant\r\t^ board notNil\r\t\tand: [ position notNil\r\t\tand: [ position >= 0 \r\t\tand: [ position <= board lastPosition]]]',			#stamp : 'jjddpp 9/4/2012 12:23',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.246239+01:00' ],		#prior : OmReference [ '173' ],		#self : OmReference [ '174' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BoardSquare,				#isMetaSide : false			},			#name : #'setPosition:board:',			#protocol : #initialize-release,			#sourceCode : 'setPosition: aNumber board: aBoard \r\tposition := aNumber.\r\tboard := aBoard',			#stamp : 'on 3/18/2006 15:13',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.247231+01:00' ],		#prior : OmReference [ '174' ],		#self : OmReference [ '175' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BoardSquare,				#isMetaSide : false			},			#name : #isFirstSquare,			#protocol : #testing,			#sourceCode : 'isFirstSquare\r\t^ position = 1',			#stamp : 'on 3/14/2006 16:12',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.248354+01:00' ],		#prior : OmReference [ '175' ],		#self : OmReference [ '176' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BoardSquare,				#isMetaSide : false			},			#name : #isLastSquare,			#protocol : #testing,			#sourceCode : 'isLastSquare\r\t^ position = board lastPosition',			#stamp : 'on 3/20/2006 10:17',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.249506+01:00' ],		#prior : OmReference [ '176' ],		#self : OmReference [ '177' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BoardSquare,				#isMetaSide : false			},			#name : #isOccupied,			#protocol : #testing,			#sourceCode : 'isOccupied\r\t^ player notNil',			#stamp : 'on 3/14/2006 16:40',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.250819+01:00' ],		#prior : OmReference [ '177' ],		#self : OmReference [ '178' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BoardSquare,				#isMetaSide : false			},			#name : #position,			#protocol : #testing,			#sourceCode : 'position\r\t^ position',			#stamp : 'on 3/14/2006 17:03',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.254363+01:00' ],		#prior : OmReference [ '178' ],		#self : OmReference [ '179' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'BoardSquare',				#traitCompositionSource : '{}',				#definitionSource : 'BoardSquare subclass: #LadderSquare\r\tinstanceVariableNames: \'forward\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #LadderSquare,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LadderSquare,						#isMetaSide : false					},					#name : #forward,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LadderSquare class\r\tinstanceVariableNames: \'\''				},				#name : #'LadderSquare class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LadderSquare,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.257091+01:00' ],		#prior : OmReference [ '179' ],		#self : OmReference [ '180' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'BoardSquare',				#traitCompositionSource : '{}',				#definitionSource : 'BoardSquare subclass: #LadderSquare\r\tinstanceVariableNames: \'forward\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #LadderSquare,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LadderSquare,						#isMetaSide : false					},					#name : #forward,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LadderSquare class\r\tinstanceVariableNames: \'\''				},				#name : #'LadderSquare class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LadderSquare,					#isMetaSide : false				},				#parent : @7,				#content : 'Responsibilities:\r- If a player lands here, send him or her up the ladder (forward # squares)\r- Displays itself as a square with a positive offset, e.g., [6]3+>',				#stamp : 'on 3/17/2006 10:36'			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Responsibilities:\r- If a player lands here, send him or her up the ladder (forward # squares)\r- Displays itself as a square with a positive offset, e.g., [6]3+>',		#newStamp : 'on 3/17/2006 10:36'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.259356+01:00' ],		#prior : OmReference [ '180' ],		#self : OmReference [ '181' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LadderSquare,				#isMetaSide : false			},			#name : #destination,			#protocol : #playing,			#sourceCode : 'destination\r\t^ self forwardBy: forward',			#stamp : 'on 3/15/2006 15:26',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.261263+01:00' ],		#prior : OmReference [ '181' ],		#self : OmReference [ '182' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LadderSquare,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\tsuper printOn: aStream.\r\taStream nextPutAll: forward asString, \'+>\'.',			#stamp : 'on 3/16/2006 14:35',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.262488+01:00' ],		#prior : OmReference [ '182' ],		#self : OmReference [ '183' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LadderSquare,				#isMetaSide : false			},			#name : #'setForward:',			#protocol : #initialize-release,			#sourceCode : 'setForward: aNumber\r\tforward := aNumber.',			#stamp : 'on 3/18/2006 12:49',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.264568+01:00' ],		#prior : OmReference [ '183' ],		#self : OmReference [ '184' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'LadderSquare class',				#isMetaSide : true			},			#name : #'forward:',			#protocol : #'instance creation',			#sourceCode : 'forward: number\r\t^ self new setForward: number',			#stamp : 'on 3/18/2006 12:50',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.267561+01:00' ],		#prior : OmReference [ '184' ],		#self : OmReference [ '185' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'BoardSquare',				#traitCompositionSource : '{}',				#definitionSource : 'BoardSquare subclass: #FirstSquare\r\tinstanceVariableNames: \'players\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #FirstSquare,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #FirstSquare,						#isMetaSide : false					},					#name : #players,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'FirstSquare class\r\tinstanceVariableNames: \'\''				},				#name : #'FirstSquare class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #FirstSquare,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.26879+01:00' ],		#prior : OmReference [ '185' ],		#self : OmReference [ '186' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'BoardSquare',				#traitCompositionSource : '{}',				#definitionSource : 'BoardSquare subclass: #FirstSquare\r\tinstanceVariableNames: \'players\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #FirstSquare,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #FirstSquare,						#isMetaSide : false					},					#name : #players,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'FirstSquare class\r\tinstanceVariableNames: \'\''				},				#name : #'FirstSquare class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #FirstSquare,					#isMetaSide : false				},				#parent : @7,				#content : 'Responsibilities:\r- Allows multiple players to be added or removed [normal squares can only hold a single player]',				#stamp : 'on 3/14/2006 19:06'			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Responsibilities:\r- Allows multiple players to be added or removed [normal squares can only hold a single player]',		#newStamp : 'on 3/14/2006 19:06'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.27019+01:00' ],		#prior : OmReference [ '186' ],		#self : OmReference [ '187' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FirstSquare,				#isMetaSide : false			},			#name : #contents,			#protocol : #printing,			#sourceCode : 'contents\r\t^ players inject: \'\' into:\r\t\t\t[ :list :each | list , \' \', each asString ]',			#stamp : 'on 3/14/2006 15:35',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.273019+01:00' ],		#prior : OmReference [ '187' ],		#self : OmReference [ '188' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FirstSquare,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialize-release,			#sourceCode : 'initialize\r\tplayers := OrderedCollection new.',			#stamp : 'on 3/14/2006 15:30',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.274254+01:00' ],		#prior : OmReference [ '188' ],		#self : OmReference [ '189' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FirstSquare,				#isMetaSide : false			},			#name : #'landHere:',			#protocol : #initialize-release,			#sourceCode : 'landHere: aPlayer\r\tplayers add: aPlayer.',			#stamp : 'on 3/15/2006 15:29',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.275263+01:00' ],		#prior : OmReference [ '189' ],		#self : OmReference [ '190' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FirstSquare,				#isMetaSide : false			},			#name : #isOccupied,			#protocol : #testing,			#sourceCode : 'isOccupied\r\t^ players size > 0',			#stamp : 'on 3/18/2006 11:10',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.276482+01:00' ],		#prior : OmReference [ '190' ],		#self : OmReference [ '191' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FirstSquare,				#isMetaSide : false			},			#name : #'remove:',			#protocol : #playing,			#sourceCode : 'remove: aPlayer\r\tself assert: (players includes: aPlayer).\r\tplayers remove: aPlayer.',			#stamp : 'on 3/14/2006 16:15',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.279509+01:00' ],		#prior : OmReference [ '191' ],		#self : OmReference [ '192' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #MetaclassHierarchyTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #MetaclassHierarchyTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MetaclassHierarchyTest class\r\tinstanceVariableNames: \'\''				},				#name : #'MetaclassHierarchyTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MetaclassHierarchyTest,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.280684+01:00' ],		#prior : OmReference [ '192' ],		#self : OmReference [ '193' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #MetaclassHierarchyTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #MetaclassHierarchyTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MetaclassHierarchyTest class\r\tinstanceVariableNames: \'\''				},				#name : #'MetaclassHierarchyTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MetaclassHierarchyTest,					#isMetaSide : false				},				#parent : @7,				#content : 'Demonstrate the relationship between classes and metaclasses',				#stamp : 'on 3/19/2006 11:33'			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Demonstrate the relationship between classes and metaclasses',		#newStamp : 'on 3/19/2006 11:33'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.283336+01:00' ],		#prior : OmReference [ '193' ],		#self : OmReference [ '194' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MetaclassHierarchyTest,				#isMetaSide : false			},			#name : #testHierarchy,			#protocol : #running,			#sourceCode : 'testHierarchy\r\t"The class hierarchy"\r\tself assert: SnakeSquare superclass = BoardSquare.\r\tself assert: BoardSquare superclass = Object.\r\tself assert: Object superclass superclass = nil.\r\t"The parallel metaclass hierarchy"\r\tself assert: SnakeSquare class name = \'SnakeSquare class\'.\r\tself assert: SnakeSquare class superclass = BoardSquare class.\r\tself assert: BoardSquare class superclass = Object class.\r\tself assert: Object class superclass superclass = Class.\r\tself assert: Class superclass = ClassDescription.\r\tself assert: ClassDescription superclass = Behavior.\r\tself assert: Behavior superclass = Object.\r\t"The Metaclass hierarchy"\r\tself assert: SnakeSquare class class = Metaclass.\r\tself assert: BoardSquare class class = Metaclass.\r\tself assert: Object class class = Metaclass.\r\tself assert: Class class class = Metaclass.\r\tself assert: ClassDescription class class = Metaclass.\r\tself assert: Behavior class class = Metaclass.\r\tself assert: Metaclass superclass = ClassDescription.\r\t"The fixpoint"\r\tself assert: Metaclass class class = Metaclass',			#stamp : 'on 10/28/2007 15:49',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.288235+01:00' ],		#prior : OmReference [ '194' ],		#self : OmReference [ '195' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Die',				#traitCompositionSource : '{}',				#definitionSource : 'Die subclass: #LoadedDie\r\tinstanceVariableNames: \'roll\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #LoadedDie,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LoadedDie,						#isMetaSide : false					},					#name : #roll,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LoadedDie class\r\tinstanceVariableNames: \'\''				},				#name : #'LoadedDie class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LoadedDie,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.289358+01:00' ],		#prior : OmReference [ '195' ],		#self : OmReference [ '196' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Die',				#traitCompositionSource : '{}',				#definitionSource : 'Die subclass: #LoadedDie\r\tinstanceVariableNames: \'roll\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #LoadedDie,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LoadedDie,						#isMetaSide : false					},					#name : #roll,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LoadedDie class\r\tinstanceVariableNames: \'\''				},				#name : #'LoadedDie class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LoadedDie,					#isMetaSide : false				},				#parent : @7,				#content : 'For testing purposes. When rolled, a loaded die returns a fixed value.',				#stamp : 'on 3/17/2006 10:50'			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'For testing purposes. When rolled, a loaded die returns a fixed value.',		#newStamp : 'on 3/17/2006 10:50'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.290445+01:00' ],		#prior : OmReference [ '196' ],		#self : OmReference [ '197' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LoadedDie,				#isMetaSide : false			},			#name : #roll,			#protocol : #playing,			#sourceCode : 'roll\r\tself assert: roll notNil.\r\t^ roll',			#stamp : 'on 3/18/2006 15:24',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.291866+01:00' ],		#prior : OmReference [ '197' ],		#self : OmReference [ '198' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LoadedDie,				#isMetaSide : false			},			#name : #'roll:',			#protocol : #playing,			#sourceCode : 'roll: aNumber\r\tself assert: ((1 to: 6) includes: aNumber).\r\troll := aNumber.',			#stamp : 'on 3/18/2006 15:25',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.294971+01:00' ],		#prior : OmReference [ '198' ],		#self : OmReference [ '199' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'BoardSquare',				#traitCompositionSource : '{}',				#definitionSource : 'BoardSquare subclass: #SnakeSquare\r\tinstanceVariableNames: \'back\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #SnakeSquare,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeSquare,						#isMetaSide : false					},					#name : #back,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SnakeSquare class\r\tinstanceVariableNames: \'\''				},				#name : #'SnakeSquare class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SnakeSquare,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.296148+01:00' ],		#prior : OmReference [ '199' ],		#self : OmReference [ '200' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'BoardSquare',				#traitCompositionSource : '{}',				#definitionSource : 'BoardSquare subclass: #SnakeSquare\r\tinstanceVariableNames: \'back\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #SnakeSquare,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeSquare,						#isMetaSide : false					},					#name : #back,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SnakeSquare class\r\tinstanceVariableNames: \'\''				},				#name : #'SnakeSquare class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SnakeSquare,					#isMetaSide : false				},				#parent : @7,				#content : 'Responsibilities:\r- If a player lands here, send him or her backwards (back # squares)\r- Displays itself as a square with a negative offset, e.g., <-3[5]',				#stamp : 'on 3/20/2006 09:14'			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Responsibilities:\r- If a player lands here, send him or her backwards (back # squares)\r- Displays itself as a square with a negative offset, e.g., <-3[5]',		#newStamp : 'on 3/20/2006 09:14'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.297354+01:00' ],		#prior : OmReference [ '200' ],		#self : OmReference [ '201' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeSquare,				#isMetaSide : false			},			#name : #destination,			#protocol : #playing,			#sourceCode : 'destination\r\t^ self backwardBy: back',			#stamp : 'on 3/15/2006 15:26',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.298892+01:00' ],		#prior : OmReference [ '201' ],		#self : OmReference [ '202' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeSquare,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\taStream nextPutAll: \'<-\', back asString.\r\tsuper printOn: aStream.',			#stamp : 'on 3/16/2006 14:35',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.299965+01:00' ],		#prior : OmReference [ '202' ],		#self : OmReference [ '203' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeSquare,				#isMetaSide : false			},			#name : #'setBack:',			#protocol : #initialize-release,			#sourceCode : 'setBack: aNumber\r\tback := aNumber.',			#stamp : 'on 3/18/2006 12:50',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.305306+01:00' ],		#prior : OmReference [ '203' ],		#self : OmReference [ '204' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'SnakeSquare class',				#isMetaSide : true			},			#name : #'back:',			#protocol : #'instance creation',			#sourceCode : 'back: number\r\t^ self new setBack: number',			#stamp : 'on 3/18/2006 12:50',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.308504+01:00' ],		#prior : OmReference [ '204' ],		#self : OmReference [ '205' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #SnakesAndLaddersTest\r\tinstanceVariableNames: \'eg loadedDie jack jill\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #SnakesAndLaddersTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLaddersTest,						#isMetaSide : false					},					#name : #eg,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLaddersTest,						#isMetaSide : false					},					#name : #loadedDie,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLaddersTest,						#isMetaSide : false					},					#name : #jack,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLaddersTest,						#isMetaSide : false					},					#name : #jill,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SnakesAndLaddersTest class\r\tinstanceVariableNames: \'\''				},				#name : #'SnakesAndLaddersTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SnakesAndLaddersTest,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.309638+01:00' ],		#prior : OmReference [ '205' ],		#self : OmReference [ '206' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #SnakesAndLaddersTest\r\tinstanceVariableNames: \'eg loadedDie jack jill\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #SnakesAndLaddersTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLaddersTest,						#isMetaSide : false					},					#name : #eg,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLaddersTest,						#isMetaSide : false					},					#name : #loadedDie,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLaddersTest,						#isMetaSide : false					},					#name : #jack,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLaddersTest,						#isMetaSide : false					},					#name : #jill,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SnakesAndLaddersTest class\r\tinstanceVariableNames: \'\''				},				#name : #'SnakesAndLaddersTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SnakesAndLaddersTest,					#isMetaSide : false				},				#parent : @7,				#content : 'Play a rigged game and check the results.',				#stamp : 'on 3/15/2006 13:24'			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Play a rigged game and check the results.',		#newStamp : 'on 3/15/2006 13:24'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.310683+01:00' ],		#prior : OmReference [ '206' ],		#self : OmReference [ '207' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLaddersTest,				#isMetaSide : false			},			#name : #example,			#protocol : #running,			#sourceCode : 'example\r\t^ SnakesAndLadders example',			#stamp : 'on 3/16/2006 09:58',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.312089+01:00' ],		#prior : OmReference [ '207' ],		#self : OmReference [ '208' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLaddersTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\teg := self example.\r\tloadedDie := LoadedDie new.\r\teg setDie: loadedDie.\r\tjack := eg players first.\r\tjill := eg players last.',			#stamp : 'on 3/16/2006 09:58',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.314039+01:00' ],		#prior : OmReference [ '208' ],		#self : OmReference [ '209' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLaddersTest,				#isMetaSide : false			},			#name : #testExample,			#protocol : #running,			#sourceCode : 'testExample\r\tself assert: eg currentPlayer = jack.\r\tloadedDie roll: 1.\r\teg playOneMove.\r\tself assert: jack position = 6.\r\tself assert: eg currentPlayer = jill.\r\tloadedDie roll: 5.\r\teg playOneMove.\r\tself assert: jill position = 1.\r\tself assert: eg currentPlayer = jack.\r\tloadedDie roll: 5.\r\teg playOneMove.\r\tself assert: jack position = 5.\r\tself assert: eg currentPlayer = jill.\r\tloadedDie roll: 4.\r\teg playOneMove.\r\tself assert: jill position = 1.\r\tself assert: eg currentPlayer = jack.\r\tloadedDie roll: 6.\r\teg playOneMove.\r\tself assert: jack position = 5.\r\tself assert: eg currentPlayer = jill.\r\tloadedDie roll: 6.\r\teg playOneMove.\r\tself assert: jill position = 9.\r\tself assert: eg currentPlayer = jack.\r\tloadedDie roll: 5.\r\teg playOneMove.\r\tself assert: jack position = 10.\r\tself assert: eg currentPlayer = jill.\r\tloadedDie roll: 5.\r\teg playOneMove.\r\tself assert: jill position = 1.\r\tself assert: eg currentPlayer = jack.\r\tloadedDie roll: 2.\r\teg playOneMove.\r\tself assert: jack position = 12.\r\tself assert: eg isOver',			#stamp : 'on 3/23/2006 09:06',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.317153+01:00' ],		#prior : OmReference [ '209' ],		#self : OmReference [ '210' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLaddersTest,				#isMetaSide : false			},			#name : #testStartPosition,			#protocol : #running,			#sourceCode : 'testStartPosition\r\tself assert: eg lastPosition = 12.\r\tself assert: eg isNotOver.\r\tself assert: eg currentPlayer = jack.\r\tself assert: eg firstSquare isFirstSquare.\r\tself assert: eg firstSquare isLastSquare not.\r\tself assert: eg firstSquare position = 1.\r\tself assert: eg firstSquare isOccupied.\r\tself assert: (eg at: eg lastPosition) isFirstSquare not.\r\tself assert: (eg at: eg lastPosition) isLastSquare.\r\tself assert: (eg at: eg lastPosition) position = 12.\r\tself assert: (eg at: eg lastPosition) isOccupied not.\r\tself assert: jack name = \'Jack\'.\r\tself assert: jill name = \'Jill\'.\r\tself assert: jack position = 1.\r\tself assert: jill position = 1',			#stamp : 'on 3/18/2006 15:01',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.320365+01:00' ],		#prior : OmReference [ '210' ],		#self : OmReference [ '211' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'SnakesAndLaddersTest',				#traitCompositionSource : '{}',				#definitionSource : 'SnakesAndLaddersTest subclass: #SnakesAndLaddersTest2\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #SnakesAndLaddersTest2,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SnakesAndLaddersTest2 class\r\tinstanceVariableNames: \'\''				},				#name : #'SnakesAndLaddersTest2 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SnakesAndLaddersTest2,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.321494+01:00' ],		#prior : OmReference [ '211' ],		#self : OmReference [ '212' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'SnakesAndLaddersTest',				#traitCompositionSource : '{}',				#definitionSource : 'SnakesAndLaddersTest subclass: #SnakesAndLaddersTest2\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #SnakesAndLaddersTest2,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SnakesAndLaddersTest2 class\r\tinstanceVariableNames: \'\''				},				#name : #'SnakesAndLaddersTest2 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SnakesAndLaddersTest2,					#isMetaSide : false				},				#parent : @7,				#content : 'Some tests for a second example.',				#stamp : 'on 3/17/2006 10:50'			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Some tests for a second example.',		#newStamp : 'on 3/17/2006 10:50'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.323045+01:00' ],		#prior : OmReference [ '212' ],		#self : OmReference [ '213' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLaddersTest2,				#isMetaSide : false			},			#name : #example,			#protocol : #running,			#sourceCode : 'example\r\t^ SnakesAndLadders example2',			#stamp : 'on 3/16/2006 09:59',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2024-01-14T00:46:39.325482+01:00' ],		#prior : OmReference [ '213' ],		#self : OmReference [ '214' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLaddersTest2,				#isMetaSide : false			},			#name : #testExample,			#protocol : #running,			#sourceCode : 'testExample\r\tself assert: jack name = \'Jack\'.\r\tself assert: jill name = \'Jill\'.\r\tself assert: jack position = 1.\r\tself assert: jill position = 1.\r\tself assert: eg currentPlayer = jack.\r\tloadedDie roll: 1.\r\teg playOneMove.\r\tself assert: jack position = 2.\r\tself assert: eg currentPlayer = jill.\r\tloadedDie roll: 2.\r\teg playOneMove.\r\tself assert: jill position = 7.\r\tself assert: eg currentPlayer = jack.\r\tloadedDie roll: 3.\r\teg playOneMove.\r\tself assert: jack position = 5.\r\tself assert: eg currentPlayer = jill.\r\tloadedDie roll: 1.\r\teg playOneMove.\r\tself assert: jill position = 7.\r\tself assert: eg currentPlayer = jack.\r\tloadedDie roll: 2.\r\teg playOneMove.\r\tself assert: jack position = 1.\r\tself assert: eg currentPlayer = jill.\r\tloadedDie roll: 5.\r\teg playOneMove.\r\tself assert: jill position = 12.\r\tself assert: eg currentPlayer = jack.\r\tloadedDie roll: 6.\r\teg playOneMove.\r\tself assert: jack position = 7.\r\tself assert: eg currentPlayer = jill.\r\tloadedDie roll: 1.\r\teg playOneMove.\r\tself assert: jill position = 13.\r\tself assert: eg isOver',			#stamp : 'on 3/18/2006 15:04',			#package : #Examples-SnakesAndLadders		}	}}